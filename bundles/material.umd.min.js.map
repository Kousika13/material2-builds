{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.2-c9681bf');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being`void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(private _tiles: QueryList<MatGridTile>) {}\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = this._tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator(this._tiles);\n    }\n\n    const tracker = this._tileCoordinator;\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_this","_super","call","this","_tabNavBar","_elementRef","_focusMonitor","_tabLinkRipple","setupTriggerEvents","nativeElement","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","event","preventDefault","MatTabLink","decorators","Directive","args","exportAs","inputs","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","selector","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkHeaderRow","MatHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatFooterCellDef","MatFooterRowDef","MatHeaderCell","MatCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","TemplateRef","_CdkPortal","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","_activeLinkElement","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSlider","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","_tiles","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_location","_afterClosed","_beforeClosed","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","MatCheckbox","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","MatCheckboxChange","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","_hasFocus","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxBase","_MatCheckboxMixinBase","_autoActiveFirstOption","MatAutocomplete","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;i/DiKuBA,SAAgBozF,GAAUC,EAAG9iF,GAEzB,QAAS+iF,KAAO9xF,KAAK+xF,YAAcF,EADnCG,GAAcH,EAAG9iF,GAEjB8iF,EAAEltF,UAAkB,OAANoK,EAAatD,OAAOysB,OAAOnpB,IAAM+iF,EAAGntF,UAAYoK,EAAEpK,UAAW,GAAImtF,ICNnF,QAAgBG,KACd,OAAO,ECAT,QAAgBryF,GAAyCsyF,GACvD,MAAF,UAAApyF,GAMI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KAA2C2B,IAA3C3B,WALAH,GAAAgnC,WAAiC,IAvBjC,MAsBuBniC,GAAvBytF,EAAAryF,GAGI2L,OAAJC,eAAQymF,EAARxtF,UAAA,gBAAI,WAAiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GAAcjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,oCA1BtEkxF,GAsBuBD,GCOvB,QAAgBhuF,GACZguF,EAASE,GACX,MAAF,UAAAtyF,GAmBI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KACe2B,IADf3B,WAIMH,GAAKgmD,MAAQusC,IAtDnB,MA+BuB1tF,GAAvBytF,EAAAryF,GAGI2L,OAAJC,eAAQymF,EAARxtF,UAAA,aAAI,WAA4B,MAAO3E,MAAKymF,YACxC,SAAUxlF,GACR,GAAMwmF,GAAexmF,GAASmxF,CAE1B3K,KAAiBznF,KAAKymF,SACpBzmF,KAAKymF,QACPzmF,KAAKE,YAAYI,cAAckF,UAAU0Y,OAAO,OAAOle,KAAKymF,QAE1DgB,GACFznF,KAAKE,YAAYI,cAAckF,UAAU2Y,IAAI,OAAOspE,GAGtDznF,KAAKymF,OAASgB,oCA9CtB0K,GA+BuBD,GCVvB,QAAgBvyF,GAA8CuyF,GAC5D,MAAF,UAAApyF,GAOI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KAA2C2B,IAA3C3B,WANAH,GAAAwyF,gBAAsC,IAvBtC,MAsBuB3tF,GAAvBytF,EAAAryF,GAII2L,OAAJC,eAAQymF,EAARxtF,UAAA,qBAAI,WAAsB,MAAO3E,MAAKqyF,oBAClC,SAAkBpxF,GAAcjB,KAAKqyF,eAAiBr0E,EAAAA,sBAAsB/c,oCA3BhFkxF,GAsBuBD,GCAvB,QAAgBxyF,GAAiDwyF,EAASrzB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAA/+D,GASI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KACe2B,IADf3B,WARAH,GAAAm8E,UAAgCnd,IAzBhC,MAwBuBn6D,GAAvBytF,EAAAryF,GAGI2L,OAAJC,eAAQymF,EAARxtF,UAAA,gBAAI,WAAyB,MAAO3E,MAAKW,UAAY,EAAIX,KAAKg8E,eAC1D,SAAa/6E,GAEXjB,KAAKg8E,UAAqB,MAAT/6E,EAAgBA,EAAQ49D,mCA9B/CszB,GAwBuBD,GCavB,QAAgBlwC,GAAsDkwC,GAEpE,MAAF,UAAApyF,GAyBI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KACe2B,IADf3B,WAvBIH,GAAJ+uF,YAA0B,EAMtB/uF,EAAJyjD,aAA4B,GAAI3vC,GAAAA,UA/ChC,MAuCuBjP,GAAvBytF,EAAAryF,GAYIqyF,EAAJxtF,UAAAw/C,iBAAI,WACE,GAAMo0B,GAAWv4E,KAAK4uF,WAChBx5D,EAASp1B,KAAK6hD,kBAAoB7hD,KAAK4hD,YACvC0wC,EAAUtyF,KAAKovC,mBAAqBpvC,KAAK2hD,0BACzCh8B,EAAU3lB,KAAK8hD,UAAY9hD,KAAK8hD,UAAgC,QAAG,KACnEw2B,EAAWga,EAAQ5sE,aAAaC,EAASyP,EAE3CkjD,KAAaC,IACfv4E,KAAK4uF,WAAatW,EAClBt4E,KAAKsjD,aAAa33C,SA5D1BwmF,GAuCuBD,GCJvB,QAAgBz5D,GAA4Cy5D,GAE1D,MAAF,UAAApyF,GAyBI,QAAJqyF,KAAA,IAAgB,GAAhBxwF,MAAA4oD,EAAA,EAAgBA,EAAhB39C,UAAAzH,OAAgBolD,IAAA5oD,EAAhB4oD,GAAA39C,UAAA29C,EAAI,IAAJ1qD,GAAAC,EAAAoM,MAAAlM,KAA2C2B,IAA3C3B,WAvBIH,GAAJ8mC,gBAAqB,EAOjB9mC,EAAJ0yF,uBAMI1yF,EAAJqQ,YAAkB,GAAIsiF,GAAAA,WAAiB,SAAAC,GAG7B5yF,EAAK8mC,eACP9mC,EAAK6yF,kBAAkBD,GAEvB5yF,EAAwB,oBAAE+J,KAAK6oF,OA1DvC,MAqCuB/tF,GAAvBytF,EAAAryF,GAgCIqyF,EAAJxtF,UAAA60B,iBAAI,WACE,GAAIx5B,KAAK2mC,eACP,KAAMvS,OAAM,wFAIdp0B,MAAK2mC,gBAAiB,EAEtB3mC,KAAwB,oBAAEoK,QAAQpK,KAAK0yF,mBACvC1yF,KAAKuyF,oBAAsB,MAI7BJ,EAAJxtF,UAAA+tF,kBAAI,SAAkBD,GAChBA,EAAW9mF,OACX8mF,EAAWx+E,YApFjBk+E,GAqCuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAASC,GAAS3tF,EAAgB4tF,GAEhC,IAAK,GADCC,GAAclpF,MAAM3E,GACjB6F,EAAI,EAAGA,EAAI7F,EAAQ6F,IAC1BgoF,EAAYhoF,GAAK+nF,EAAc/nF,EAEjC,OAAOgoF,GCmQT,QAASC,GAA0B3gF,GAIjC6wE,OAAO/+B,iBAAiB9xC,GAAS4gF,iBAAiB,WAMpD,QAASC,GAAyBxnE,EAAWE,EAAWqkE,GACtD,GAAMkD,GAAQzhF,KAAKoK,IAAIpK,KAAK06B,IAAI1gB,EAAIukE,EAAKl9E,MAAOrB,KAAK06B,IAAI1gB,EAAIukE,EAAKn4D,QAC5Ds7D,EAAQ1hF,KAAKoK,IAAIpK,KAAK06B,IAAIxgB,EAAIqkE,EAAK5iE,KAAM3b,KAAK06B,IAAIxgB,EAAIqkE,EAAKj4D,QACjE,OAAOtmB,MAAK2hF,KAAKF,EAAQA,EAAQC,EAAQA,yCvB3D3CE,GAAyBtoD,EAAzB3vB,UACQk4E,EAAR1mD,EAA8BxxB,UACtBm4E,EAAR,gBACAF,EAAyBvoF,GAAzBmgC,OAAAooD,EAAAvoF,GAAAmgC,QAAAqoD,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAlpC,EAAAmpC,aAEAD,EAGIA,EAAJC,EAAAC,EAAA/rC,EACAl2C,KAAAoK,IAAA,EAAA23E,EAAA7rC,EAAA8rC,GAGAC,EwBrSA,QAAgB9E,KACd,MAAO16D,OAAM,gEAIf,QAAgBg7D,GAAmC/O,GACjD,MAAOjsD,OAAM,4CAA2CisD,EAA1D,QAIA,QAAgBkP,KACd,MAAOn7D,OAAM,sDnCqDf,QAAgBu9D,KACd,OAAQ5P,uBAAuB,G5HRjC,QAAgBK,GAAyC5uC,GACvD,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBsJ,cAwBxC,QAAgBrO,KACd,MAAOpxD,OAAM,6MsIoFf,QAASy9C,GAAqBr8C,GAC5B,MAAFM,OAAa,GAAI2yD,IAA2BjzD,GhC1I5C,QAAgB+5C,KACd,KAAMn7C,OAAM,yEEOd,QAAgB0/D,GAAmCtgD,GACjD,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBC,SAIxC,QAAgBtZ,GAA4C19B,GAE1D,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBC,SAwUxC,QAAS3Y,GACLr8C,EAA0BkpD,GAC5B,MAAF5oD,OAAa4oD,EAAmBlpD,GC5PhC,QAAS+9C,GAAiBjhE,EAAkCo/D,GAG1D,IAFA,GAAIt8C,GAA6B9iB,EAAQhS,cAAcwyE,cAEhD19C,IAAWA,EAAO5vB,UAAUC,SAAS,yBAC1C2vB,EAASA,EAAO09C,aAGlB,OAAO19C,GAASs8C,EAAYrxD,KAAK,SAAAiyD,GAAU,MAAAA,GAAOxxD,KAApD,EAAmEA,KAAM,KuDlIzE,QAAgBm1D,GAAgCj3E,GAC9C,MAAOo1B,OAAM,eAAep1B,EAA9B,mCCDA,QAAgB25D,GAA2Bo7B,GACzC,MAAO3/D,OACH,wCAAwC2/D,EAD9C,0JlFmDA,QAAgBznB,IAAuC94B,GACrD,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBsJ,cNkOxC,QAASxlC,IAAK2lC,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAASlmC,IAAe7sD,GACtB,MAAQA,GAAMgzF,MAAM,aAAgBhzF,EAAQA,EAAQ,KGzQtD,QAAgBmzD,IAA4BvC,GAC1C,MAAOz9B,OAAM,sCAAsCy9B,EAArD,KASA,QAAgBiE,MACd,MAAO1hC,OAAM,8JAWf,QAAgBo/B,IAAmCtC,GACjD,MAAO98B,OAAM,yHACkD88B,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAO59B,OAAM,2HACkD49B,EAAjE,MAihBA,QAAgBwE,IACd09B,EACAC,EACAC,EACA5vF,GACA,MAAO0vF,IAAkB,GAAI/iC,IAAgBgjC,EAAYC,EAAW5vF,GAiBtE,QAASkvD,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmB5vC,GAClC,MAAO4vC,GAAY,IAAM5vC,EsF/lB3B,QAAgBy9B,MACd,KAAM3rB,OAAM,0KAYd,QAAgB6nB,MACd,KAAM7nB,OAAM,kIASd,QAAgB+nB,MACd,KAAM/nB,OAAM,gIlGiCd,QAAgB6mB,MACd,OACEa,gBAAgB,EAChBV,UAAW,QACXE,UAAW,QACXM,cAAe,oCC1BnB,QAAgBsC,IAAiC1K,GAC/C,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBsJ,ckGpCxC,QAAgBtwC,MACd,MAAOnvB,OAAM,iEASf,QAAgB6xB,MACd,MAAO7xB,OAAM,sDAQf,QAAgBovB,MACd,MAAOpvB,OAAM,qChK6Gf,QAAgBotB,IAA4ChO,GAE1D,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBsJ,cCtFxC,QAAgB5/C,IAAkCrgC,GAChD,MAAOwgB,OAAM,qBAAqBxgB,EAApC,iBAQA,QAAgBo8B,IAAoCwD,GAClD,MAAO,YAAM,MAAAA,GAAQ+2C,iBAAiBsJ,YAAYQ,eAAgBxkD,MAyBpE,QAAgBK,MACd,OACEM,UAAW,EACXC,UAAW,EACXgC,kBAAmB,MqDxCvB,QAAgBiD,IAAoC4+C,GAClD,MAAOA,IAAc,GAAI9+C,IVQ3B,QAAgBmC,MACd,GAAMlzC,GAAYmuF,EAAAA,OAAOvsF,EAAAA,SAEzB,QAAQ6xC,SADUzzC,GAAaA,EAAUozC,UAAYpzC,EAAUozC,SAASK,UAAa,uBAkJ7D,6BAAF,KAAxBn8B,IAA4CA,EAA5C,KAAApK,KAAAoK,IAAAlK,EAAAF,KAAAE,IAAAkK,EAAAD,IEjJA,QAAgBioB,MACd,OAAQW,SAAUf,IRtBpB,QAAgB/F,IAA8BhqB,GAC5C,KAAMwgB,OAAM,iDAAgDxgB,EAA9D,OAeA,QAAgBk1B,MACd,OAAO,EFzBT,QAAgBnU,MACd,MAAO,IAAInC,I6HhCb,QAAgByG,IAAgCnY,GAC9C,MAAOsT,OAAM,kDAAkDtT,EAAjE,MAIA,QAAgBiB,MACd,MAAOqS,OAAM,oFAIf,QAAgB2E,MACd,MAAO3E,OAAM,oDAIf,QAAgByE,IAA6BhqB,GAC3C,MAAOulB,OAASvlB,EAAlB,qD5HkJA,QAASyqB,IAAsBvW,EACAc,GAC7B,GAAI0wE,IAA8B,MAAO,OAIzC,OAHa,QAATxxE,GAAmBwxE,EAAU5vC,UAC5B9gC,GAAgB0wE,EAAU3qF,KAAK,IAE7B2qF,EtBpJT,QAAgBlzE,IAAsCizE,GACpD,MAAOA,IAAc,GAAItzE,IVC3B,QAAgB9O,MAMd,MALe,UAACI,GAAyB,OACvCU,KAAMV,GAAWA,EAAQyF,YAAc,GAAK,KAAO,IACnD9E,MAAOX,GAAWA,EAAQ2F,aAAe,GAAK,KAAO,kO4IlBzD,GAAI+5E,IAAgB,SAASH,EAAG9iF,GAI5B,OAHAijF,GAAgBvmF,OAAO+oF,iBAChBC,uBAA2B3qF,QAAS,SAAU+nF,EAAG9iF,GAAK8iF,EAAE4C,UAAY1lF,IACvE,SAAU8iF,EAAG9iF,GAAK,IAAK,GAAIwnC,KAAKxnC,GAAOA,EAAEiF,eAAeuiC,KAAIs7C,EAAEt7C,GAAKxnC,EAAEwnC,MACpDs7C,EAAG9iF,IASjB2lF,GAAW,WAQlB,MAPAA,IAAWjpF,OAAOkpF,QAAU,SAAkBxf,GAC1C,IAAK,GAAIyf,GAAG5pF,EAAI,EAAG6pF,EAAIjoF,UAAUzH,OAAQ6F,EAAI6pF,EAAG7pF,IAAK,CACjD4pF,EAAIhoF,UAAU5B,EACd,KAAK,GAAIurC,KAAKq+C,GAAOnpF,OAAO9G,UAAUqP,eAAejU,KAAK60F,EAAGr+C,KAAI4+B,EAAE5+B,GAAKq+C,EAAEr+C,IAE9E,MAAO4+B,IAEJuf,GAASxoF,MAAMlM,KAAM4M,wCiBrChC,MAUE+sB,GAAFC,eAA0B,8BACxBD,EAAFovD,mBAA8B,8BAC5BpvD,EAAFkvD,mBAA8B,4BAC5BlvD,EAAFm7D,YAAuB,8BAbvBn7D,iCAAA,MAmBEF,GAAFmvD,QAAmB,QACjBnvD,EAAFC,SAAoB,QAClBD,EAAFqvD,QAAmB,QArBnBrvD,KhBcas7D,GAAyB,GAAIhjF,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASggF,kBA+BT,QAAFlvF,GACwDiyF,EACTC,GADSj1F,KAAxDg1F,qBAAwDA,EACTh1F,KAA/Ci1F,cAA+CA,EAb/Cj1F,KAAAk1F,sBAAiC,EAGjCl1F,KAAAm1F,mBAA8B,EAG9Bn1F,KAAAyE,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5ExE,KAAAo1F,QAAsC,gBAAXjS,SAAuBA,OAASA,OAAS,KAM5DnjF,KAAKq1F,sBAAwBr1F,KAAKk1F,uBACpCl1F,KAAKs1F,yBACLt1F,KAAKu1F,uBACLv1F,KAAKk1F,sBAAuB,GAtDlC,MA2DUnyF,GAAV4B,UAAA0wF,6BACI,MAAOr1F,MAAKg1F,sBAAwBnwF,EAAAA,cAAgB7E,KAAKw1F,cAInDzyF,EAAV4B,UAAA6wF,sBACI,MAAOx1F,MAAKo1F,UAAYp1F,KAAKo1F,QAAmB,WAAKp1F,KAAKo1F,QAAiB,UAGrEryF,EAAV4B,UAAA2wF,kCACQt1F,KAAKyE,YAAczE,KAAKyE,UAAUgxF,SACpClvC,QAAQC,KACN,yHAMEzjD,EAAV4B,UAAA4wF,gCAGI,GAAKv1F,KAAKyE,WAAczE,KAAKyE,UAAUixF,MAAoC,kBAArBtxC,kBAAtD,CAIA,GAAMuxC,GAAc31F,KAAKyE,UAAU6gC,cAAc,MAEjDqwD,GAAYnwF,UAAU2Y,IAAI,2BAC1Bne,KAAKyE,UAAUixF,KAAKlwD,YAAYmwD,EAEhC,IAAMC,GAAgBxxC,iBAAiBuxC,EAKnCC,IAA2C,SAA1BA,EAAc53B,SACjCzX,QAAQC,KACN,sLAMJxmD,KAAKyE,UAAUixF,KAAK39B,YAAY49B,KAIlC5yF,EAAF4B,UAAAkxF,wBAAE,YACM71F,KAAKm1F,mBAAsBn1F,KAAKo1F,WAIhCp1F,KAAKq1F,qBAAwBr1F,KAAKo1F,QAAgB,QAAMp1F,KAAKi1F,eAC/D1uC,QAAQC,KACN,wFAEJxmD,KAAKm1F,mBAAoB,mBArF7Bn2F,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUizF,EAAAA,YACV1yF,SAAU0yF,EAAAA,oDAgBZ92F,KAAAgsD,QAAAvpD,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBozF,QACxB/1F,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBo0F,EAAAA,oBAjDxBhzF,KOYaizF,GAAkB,GAAIjkF,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS0gF,IAcEsD,IAA4BzuF,QAASwuF,GAAiBvuF,YAAaorF,EAAAA,WAGhFl4B,GAAA,wBAME36D,KAAFk2F,eAA6B,GAAIviF,GAAAA,QArCjC,MAoCElI,QAAFC,eAAMivD,EAANh2D,UAAA,qBAAE,WAAwC,MAAO3E,MAAKk2F,gDAqLpDv7B,EAAFh2D,UAAA03D,YAAE,SAAYp7D,GACV,MAAa,OAATA,GAAiBjB,KAAKi+D,eAAeh9D,IAAUjB,KAAKo9D,QAAQn8D,GACvDA,EAEFjB,KAAK+lB,WAOd40C,EAAFh2D,UAAAwxF,UAAE,SAAUC,GACRp2F,KAAKo2F,OAASA,EACdp2F,KAAKk2F,eAAevqF,QAUtBgvD,EAAFh2D,UAAA23D,YAAE,SAAYpxB,EAAUmrD,GACpB,MAAOr2F,MAAKmmE,QAAQj7B,GAASlrC,KAAKmmE,QAAQkwB,IACtCr2F,KAAKsmE,SAASp7B,GAASlrC,KAAKsmE,SAAS+vB,IACrCr2F,KAAK2mE,QAAQz7B,GAASlrC,KAAK2mE,QAAQ0vB,IAUzC17B,EAAFh2D,UAAAw0D,SAAE,SAASjuB,EAAiBmrD,GACxB,GAAInrD,GAASmrD,EAAQ,CACnB,GAAIC,GAAat2F,KAAKo9D,QAAQlyB,GAC1BqrD,EAAcv2F,KAAKo9D,QAAQi5B,EAC/B,OAAIC,IAAcC,GACRv2F,KAAKs8D,YAAYpxB,EAAOmrD,GAE3BC,GAAcC,EAEvB,MAAOrrD,IAASmrD,GAWlB17B,EAAFh2D,UAAA6gE,UAAE,SAAUnM,EAASxnD,EAAgBkK,GACjC,MAAIlK,IAAO7R,KAAKs8D,YAAYjD,EAAMxnD,GAAO,EAChCA,EAELkK,GAAO/b,KAAKs8D,YAAYjD,EAAMt9C,GAAO,EAChCA,EAEFs9C,GAxRXsB,KUwBa8D,GAAmB,GAAI1sD,GAAAA,eAA+B,oBTV7DykF,GAAmC,mBAARC,MAI3BC,IACJ1xB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzB2xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF1xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEoJ,GAAqC,SAAArjE,GAAK,MAAAvI,QAAOuI,EAAI,IAA/C4rF,GAAqB9D,EAAM,GAAjCzkB,IAIMwoB,IACJ7xB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3E2xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD1xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrC6xB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuB9yD,GAAxE,GAAFrkC,GACIC,EADJC,KAAAC,OAAAA,WAFEH,GAAFo3F,kBAA8B,EAI1Bn3F,EAAJ6E,UAAUwxF,UAAVp2F,KAAAF,EAAoBm3F,GAGhBn3F,EAAKo3F,kBAAoB/yD,EAASO,QAClC5kC,EAAKq3F,WAAahzD,EAASO,SAAWP,EAASM,OAnFnD,MA4DuC9/B,GAAvCqyF,EAAAj3F,GA0BEi3F,EAAFpyF,UAAAwhE,QAAE,SAAQ9M,GACN,MAAOA,GAAK89B,eAGdJ,EAAFpyF,UAAA2hE,SAAE,SAASjN,GACP,MAAOA,GAAKiN,YAGdywB,EAAFpyF,UAAAgiE,QAAE,SAAQtN,GACN,MAAOA,GAAKsN,WAGdowB,EAAFpyF,UAAA4iE,aAAE,SAAalO,GACX,MAAOA,GAAK+9B,UAGdL,EAAFpyF,UAAAwiE,cAAE,SAAcx0D,GAAd,GAAF9S,GAAAG,IACI,IAAIw2F,GAAmB,CACrB,GAAMa,GAAM,GAAIZ,MAAKa,eAAet3F,KAAKo2F,QAASxtB,MAAOj2D,EAAO4kF,SAAU,OAC1E,OAAOzE,GAAM,GAAI,SAAA9nF,GACb,MAAAnL,GAAK23F,+BAA+B33F,EAAK43F,QAAQJ,EAAK,GAAIK,MAAK,KAAM1sF,EAAG,OAE9E,MAAO0rF,IAAoB/jF,IAG7BokF,EAAFpyF,UAAAijE,aAAE,WAAA,GAAF/nE,GAAAG,IACI,IAAIw2F,GAAmB,CACrB,GAAMmB,GAAM,GAAIlB,MAAKa,eAAet3F,KAAKo2F,QAASwB,IAAK,UAAWL,SAAU,OAC5E,OAAOzE,GAAM,GAAI,SAAA9nF,GAAK,MAAAnL,GAAK23F,+BACvB33F,EAAK43F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAG1sF,EAAI,OAE9C,MAAO4rF,KAGTG,EAAFpyF,UAAAkgE,kBAAE,SAAkBlyD,GAAlB,GAAF9S,GAAAG,IACI,IAAIw2F,GAAmB,CACrB,GAAMqB,GAAM,GAAIpB,MAAKa,eAAet3F,KAAKo2F,QAAS0B,QAASnlF,EAAO4kF,SAAU,OAC5E,OAAOzE,GAAM,EAAG,SAAA9nF,GAAK,MAAAnL,GAAK23F,+BACtB33F,EAAK43F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAG1sF,EAAI,OAE9C,MAAO6rF,IAA0BlkF,IAGnCokF,EAAFpyF,UAAAqkE,YAAE,SAAY3P,GACV,GAAIm9B,GAAmB,CACrB,GAAMuB,GAAM,GAAItB,MAAKa,eAAet3F,KAAKo2F,QAAS3tB,KAAM,UAAW8uB,SAAU,OAC7E,OAAOv3F,MAAKw3F,+BAA+Bx3F,KAAKy3F,QAAQM,EAAK1+B,IAE/D,MAAO52D,QAAOzC,KAAKmmE,QAAQ9M,KAG7B09B,EAAFpyF,UAAAggE,kBAAE,WAEE,MAAO,IAGToyB,EAAFpyF,UAAAiiE,kBAAE,SAAkBvN,GAChB,MAAOr5D,MAAK2mE,QAAQ3mE,KAAKg4F,wBACrBh4F,KAAKmmE,QAAQ9M,GAAOr5D,KAAKsmE,SAASjN,GAAQ,EAAG,KAGnD09B,EAAFpyF,UAAAszF,MAAE,SAAM5+B,GACJ,MAAOr5D,MAAKwmE,WAAWxmE,KAAKmmE,QAAQ9M,GAAOr5D,KAAKsmE,SAASjN,GAAOr5D,KAAK2mE,QAAQtN,KAG/E09B,EAAFpyF,UAAA6hE,WAAE,SAAWiC,EAAcG,EAAevP,GAGtC,GAAIuP,EAAQ,GAAKA,EAAQ,GACvB,KAAMx0C,OAAM,wBAAwBw0C,EAA1C,6CAGI,IAAIvP,EAAO,EACT,KAAMjlC,OAAM,iBAAiBilC,EAAnC,oCAGI,IAAI1R,GAAS3nD,KAAKg4F,wBAAwBvvB,EAAMG,EAAOvP,EAEvD,IAAI1R,EAAO2e,YAAcsC,EACvB,KAAMx0C,OAAM,iBAAiBilC,EAAnC,2BAAkEuP,EAAlE,KAGI,OAAOjhB,IAGTovC,EAAFpyF,UAAA0gE,MAAE,WACE,MAAO,IAAIqyB,OAGbX,EAAFpyF,UAAAm5D,MAAE,SAAM78D,GAGJ,MAAoB,gBAATA,GACF,GAAIy2F,MAAKz2F,GAEXA,EAAQ,GAAIy2F,MAAKA,KAAK55B,MAAM78D,IAAU,MAG/C81F,EAAFpyF,UAAAo5D,OAAE,SAAO1E,EAAY6+B,GACjB,IAAKl4F,KAAKo9D,QAAQ/D,GAChB,KAAMjlC,OAAM,iDAGd,IAAIoiE,GAAmB,CAGjBx2F,KAAKk3F,aAAe79B,EAAK89B,cAAgB,GAAK99B,EAAK89B,cAAgB,QACrE99B,EAAOr5D,KAAKi4F,MAAM5+B,GAClBA,EAAK8+B,YAAYxmF,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI,KAAMwnD,EAAK89B,kBAGnDe,EAANpiE,MAA0BoiE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAItB,MAAKa,eAAet3F,KAAKo2F,OAAQ8B,EACjD,OAAOl4F,MAAKw3F,+BAA+Bx3F,KAAKy3F,QAAQM,EAAK1+B,IAE/D,MAAOr5D,MAAKw3F,+BAA+Bn+B,EAAK++B,iBAGlDrB,EAAFpyF,UAAAkiE,iBAAE,SAAiBxN,EAAYg/B,GAC3B,MAAOr4F,MAAK8mE,kBAAkBzN,EAAc,GAARg/B,IAGtCtB,EAAFpyF,UAAAmiE,kBAAE,SAAkBzN,EAAYi/B,GAC5B,GAAIC,GAAUv4F,KAAKg4F,wBACfh4F,KAAKmmE,QAAQ9M,GAAOr5D,KAAKsmE,SAASjN,GAAQi/B,EAAQt4F,KAAK2mE,QAAQtN,GAUnE,OAJIr5D,MAAKsmE,SAASiyB,MAAcv4F,KAAKsmE,SAASjN,GAAQi/B,GAAU,GAAK,IAAM,KACzEC,EAAUv4F,KAAKg4F,wBAAwBh4F,KAAKmmE,QAAQoyB,GAAUv4F,KAAKsmE,SAASiyB,GAAU,IAGjFA,GAGTxB,EAAFpyF,UAAA+hE,gBAAE,SAAgBrN,EAAYm/B,GAC1B,MAAOx4F,MAAKg4F,wBACRh4F,KAAKmmE,QAAQ9M,GAAOr5D,KAAKsmE,SAASjN,GAAOr5D,KAAK2mE,QAAQtN,GAAQm/B,IAGpEzB,EAAFpyF,UAAA8zF,UAAE,SAAUp/B,GACR,OACEA,EAAKq/B,iBACL14F,KAAK24F,QAAQt/B,EAAKu/B,cAAgB,GAClC54F,KAAK24F,QAAQt/B,EAAKw/B,eAClB1rD,KAAK,MAQT4pD,EAAFpyF,UAAA03D,YAAE,SAAYp7D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAI61F,GAAernC,KAAKxuD,GAAQ,CAC9B,GAAIo4D,GAAO,GAAIq+B,MAAKz2F,EACpB,IAAIjB,KAAKo9D,QAAQ/D,GACf,MAAOA,IAIb,MAAOv5D,GAAX6E,UAAiB03D,YAAjBt8D,KAAAC,KAA6BiB,IAG3B81F,EAAFpyF,UAAAs5D,eAAE,SAAejtD,GACb,MAAOA,aAAe0mF,OAGxBX,EAAFpyF,UAAAy4D,QAAE,SAAQ/D,GACN,OAAQy/B,MAAMz/B,EAAK0/B,YAGrBhC,EAAFpyF,UAAAohB,QAAE,WACE,MAAO,IAAI2xE,MAAKsB,MAIVjC,EAAVpyF,UAAAqzF,wBAAA,SAAkCvvB,EAAcG,EAAevP,GAC3D,GAAM1R,GAAS,GAAI+vC,MAAKjvB,EAAMG,EAAOvP,EAOrC,OAHIoP,IAAQ,GAAKA,EAAO,KACtB9gB,EAAOwwC,YAAYn4F,KAAKmmE,QAAQxe,GAAU,MAErCA,GAQDovC,EAAVpyF,UAAAg0F,QAAA,SAAkB9D,GACd,OAAQ,KAAOA,GAAGzvF,OAAO,IAUnB2xF,EAAVpyF,UAAA6yF,+BAAA,SAAyC/hC,GACrC,MAAOA,GAAI7vB,QAAQ,kBAAmB,KAchCmxD,EAAVpyF,UAAA8yF,QAAA,SAAkBM,EAA0B1+B,GACxC,GAAMw4B,GAAI,GAAI6F,MAAKA,KAAKuB,IACpB5/B,EAAK89B,cAAe99B,EAAKiN,WAAYjN,EAAKsN,UAAWtN,EAAK6/B,WAC1D7/B,EAAK8/B,aAAc9/B,EAAK+/B,aAAc//B,EAAKggC,mBAC/C,OAAOtB,GAAIh6B,OAAO8zB,mBAnQtB7yF,KAAC+hB,EAAAA,iDAkBD/hB,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkCq0F,QArElCh3F,KAAQoD,EAAAA,YARR20F,GA4DuCp8B,IUjD1B2+B,IACXx7B,OACErC,UAAW,MAEbuC,SACEvC,WAAYgN,KAAM,UAAWG,MAAO,UAAWgvB,IAAK,WACpDrtB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCZ,eAAgBS,KAAM,UAAWG,MAAO,OAAQgvB,IAAK,WACrD/tB,oBAAqBpB,KAAM,UAAWG,MAAO,sCCnBjD,sBAqBA5pE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAU88B,EAAAA,gBACVp4B,YACGC,QAASmzD,GAAalqC,SAAUsmE,SAxBrCwC,KAgCAlrB,GAAoDirB,+BAhCpD,sBA8BAt6F,KAAC4D,EAAAA,SAADjB,OACEkB,SAAU02F,IACVhyF,YAAaC,QAASi3D,GAAkB6P,SAA1CD,SAhCAmrB,iCCAA,MAcEC,GAAF90F,UAAA+gB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ+zE,OAAU9zE,GAAQA,EAAK+zE,4BAH5E36F,KAAC+hB,EAAAA,aAZD04E,iCAAA,MAsBExzE,GAAFthB,UAAA+gB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQi0E,SAAYh0E,GAAQA,EAAK+zE,4BAH9E36F,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,8GApBzBiU,KCuBa4zE,GAAqB,GAAI9nF,GAAAA,eAA8B,sBAE9D+nF,IACJ,YACA,QACA,aACA,WACA,aACA,aAQFzrB,GAAM,aAAN0rB,GACO,aAFDC,IACJC,GAAF5rB,GACE6rB,IAAFH,mBASE,QAAFrpE,GACoDypE,EACpCC,GAFd,GAAFv6F,GAGIC,EAHJC,KAAAC,OAAAA,WACoDH,GAApDs6F,eAAoDA,EAHlDt6F,EAAFw6F,OAAWP,GAMHM,GACFA,EAAavE,4BAtDnB,MA6CmCnxF,GAAnCgsB,EAAA5wB,GA0BE4wB,EAAF/rB,UAAA21F,YAAE,SAAYhoF,GACV,GAAMioF,GAAyC,mBAAXpX,QAAyB,OAAgBqX,OAAS,IAEtF,KAAKD,EASH,MAAOP,GAGT,IAAMS,GAAK,GAAIF,GAAOjoF,EAAStS,KAAKm6F,oBAAkB93F,IAGhDq4F,EAAM,GAAIH,GAAOI,IACjBC,EAAQ,GAAIL,GAAOM,MACnBC,EAAQ,GAAIP,GAAOQ,MAKnBC,EAAQh7F,KAAKi7F,kBAAkBP,GAAMp5F,MAAO,QAAS45F,UAAW,GAAIN,GACpEO,EAAYn7F,KAAKi7F,kBAAkBH,GAAQx5F,MAAO,YAAa85F,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAGt8E,KAAKy8E,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMzqE,EAAV/rB,UAAAs2F,kBAAA,SAA4B/I,EAAkBjnD,GAA9C,IAA4D,GAA5DqwD,MAAA/wC,EAAA,EAA4DA,EAA5D39C,UAAAzH,OAA4DolD,IAAA+wC,EAA5D/wC,EAAA,GAAA39C,UAAA29C,EACI,IAAIgxC,GAAa,GAAKrJ,GAAoC,YAAEjnD,EAK5D,OAHAqwD,GAAa1xF,KAAKsoF,GAClBoJ,EAAalxF,QAAQ,SAAAsyC,GAAQ,MAAA6+C,GAAWF,cAAc3+C,KAE/C6+C,kBA9EXv8F,KAAC+hB,EAAAA,iDAMD/hB,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBk4F,QAxCxB76F,KAAQ+D,GAARtB,aAAAzC,KAyCKsD,EAAAA,cAnDLouB,GA6CmC8qE,EAAAA,iDC7CnC,sBAsBAx8F,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,wBACV3F,MAAOC,MAAS,gBAxBlByrD,KAgCAV,GAAA,WACE,QAAFA,GAAsBC,EAAoCplC,GAAxD,GAAFxkB,GAAAG,IAAsBA,MAAtBypD,OAAsBA,EAAoCzpD,KAA1DqkB,SAA0DA,EACtDrkB,KAAKy7F,cAAcz7F,KAAKypD,OAAOtkD,QAE/BnF,KAAKypD,OAAOxkD,QAAQC,UAAU,WAC5BrF,EAAK47F,cAAc57F,EAAK4pD,OAAOtkD,UArCrC,MAyCUqkD,GAAV7kD,UAAA82F,cAAA,SAAwBC,GACpB17F,KAAK27F,gBACS,IAAVD,GAAyB,IAAVA,EACjB17F,KAAK47F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjB17F,KAAK47F,UAAU,kBAAkB,IAI7BpyC,EAAV7kD,UAAAg3F,yBACI37F,KAAK47F,UAAU,cAAc,GAC7B57F,KAAK47F,UAAU,cAAc,GAC7B57F,KAAK47F,UAAU,kBAAkB,IAG3BpyC,EAAV7kD,UAAAi3F,UAAA,SAAoBv/C,EAAmBw/C,GAC/BA,EACF77F,KAAKqkB,SAAS/jB,cAAckF,UAAU2Y,IAAIk+B,GAE1Cr8C,KAAKqkB,SAAS/jB,cAAckF,UAAU0Y,OAAOm+B,IA5DnDmN,iCAAA,sBAkEAxqD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAU8mD,GAASnnD,IACnBU,cAAeymD,QArEjB/B,SCYE2zC,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,EAAAC,IAAAA,GAAEJ,WAAF,YAAAI,GAAAA,GAAaH,SAAb,UAAAG,GAAAA,GAAsBF,YAAtB,aAAAE,GAAAA,GAAkCD,QAAlC,QAMA,IAAAE,IAAA,WAKE,QAAFA,GACY5V,EAEDj0E,EAEAkjB,GAJCx1B,KAAZumF,UAAYA,EAEDvmF,KAAXsS,QAAWA,EAEAtS,KAAXw1B,OAAWA,EAPTx1B,KAAF4U,MAAuBsnF,GAAYD,OArBnC,MAgCEE,GAAFx3F,UAAAy3F,QAAE,WACEp8F,KAAKumF,UAAU8V,cAAcr8F,OAjCjCm8F,KdgDaG,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjChiB,GAAA,WA+BE,QAAFA,GAAsBiiB,EACAvqF,EACR7N,EACA4/B,GAHZ,GAAFrkC,GAAAG,IAAsBA,MAAtB08F,QAAsBA,EACA18F,KAAtBmS,QAAsBA,EAxBtBnS,KAAA28F,gBAA2B,EAG3B38F,KAAA48F,eAA2B,GAAIjkE,KAG/B34B,KAAA68F,eAA2B,GAAIh3D,KAS/B7lC,KAAA88F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA4JvEh9F,KAAAi9F,YAAwB,SAAC37F,GAGrB,GAAM47F,GAAkBl8C,EAAAA,gCAAgC1/C,GAClD67F,EAAmBt9F,EAAKu9F,sBAC1B1F,KAAK2F,MAAQx9F,EAAKu9F,qBAAuBX,EAExC58F,GAAK68F,QAAQY,gBAAmBJ,GAAoBC,IACvDt9F,EAAK88F,gBAAiB,EACtB98F,EAAK09F,aAAaj8F,EAAMsqB,QAAStqB,EAAMwqB,QAASjsB,EAAK68F,QAAQziB,gBAKnEj6E,KAAAw9F,aAAyB,SAACl8F,GACtB,IAAKzB,EAAK68F,QAAQY,eAAgB,CAIhCz9F,EAAKu9F,qBAAuB1F,KAAK2F,MACjCx9F,EAAK88F,gBAAiB,CAMtB,KAAK,GAFCc,GAAUn8F,EAAMo8F,eAEb1yF,EAAI,EAAGA,EAAIyyF,EAAQt4F,OAAQ6F,IAClCnL,EAAK09F,aAAaE,EAAQzyF,GAAG4gB,QAAS6xE,EAAQzyF,GAAG8gB,QAASjsB,EAAK68F,QAAQziB,gBAM/Ej6E,KAAA29F,YAAwB,WACf99F,EAAK88F,iBAIV98F,EAAK88F,gBAAiB,EAGtB98F,EAAKg9F,eAAezyF,QAAQ,SAAA2uE,GAG1B,GAAMzmC,GAAYymC,EAAOnkE,QAAUsnF,GAAYH,SAC7ChjB,EAAOvjD,OAAO50B,sBAAwBm4E,EAAOnkE,QAAUsnF,GAAYJ,WAEhE/iB,EAAOvjD,OAAOooE,YAActrD,GAC/BymC,EAAOqjB,cA9LPl4D,EAASp/B,YACX9E,KAAK69F,kBAAoBv5F,EAAWhE,cAGpCN,KAAK48F,eACF1jE,IAAI,YAAal5B,KAAKi9F,aACtB/jE,IAAI,UAAWl5B,KAAK29F,aACpBzkE,IAAI,aAAcl5B,KAAK29F,aAEvBzkE,IAAI,aAAcl5B,KAAKw9F,cACvBtkE,IAAI,WAAYl5B,KAAK29F,aACrBzkE,IAAI,cAAel5B,KAAK29F,cAlHjC,MA4HEljB,GAAF91E,UAAA44F,aAAE,SAAa5xE,EAAWE,EAAW2J,GAAnC,GAAF31B,GAAAG,SAAA,KAAAw1B,IAAqCA,KACjC,IAAMsoE,GAAgB99F,KAAK+9F,eACL/9F,KAAK+9F,gBAAkB/9F,KAAK69F,kBAAkBpvE,wBAC9DuvE,EAAVloE,MAAgCwmE,GAAiC9mE,EAAO30B,UAEhE20B,GAAOyoE,WACTtyE,EAAImyE,EAAc9qF,KAAO8qF,EAAc7qF,MAAQ,EAC/C4Y,EAAIiyE,EAAcxwE,IAAMwwE,EAAc1+E,OAAS,EAGjD,IAAM45D,GAASxjD,EAAOwjD,QAAUma,EAAyBxnE,EAAGE,EAAGiyE,GACzDvzD,EAAU5e,EAAImyE,EAAc9qF,KAC5B2tC,EAAU90B,EAAIiyE,EAAcxwE,IAC5BwE,EAAWksE,EAAgBzB,cAE3BxjB,EAASv0E,SAAS8gC,cAAc,MACtCyzC,GAAOvzE,UAAU2Y,IAAI,sBAErB46D,EAAOpmE,MAAMK,KAAUu3B,EAAUyuC,EAArC,KACID,EAAOpmE,MAAM2a,IAASqzB,EAAUq4B,EAApC,KACID,EAAOpmE,MAAMyM,OAAqB,EAAT45D,EAA7B,KACID,EAAOpmE,MAAMM,MAAoB,EAAT+lE,EAA5B,KAGID,EAAOpmE,MAAMrT,gBAAkBk2B,EAAOqwB,OAAS,KAC/CkzB,EAAOpmE,MAAMurF,mBAAwBpsE,EAAzC,KAEI9xB,KAAK69F,kBAAkBr4D,YAAYuzC,GAInCka,EAA0Bla,GAE1BA,EAAOpmE,MAAMkC,UAAY,UAGzB,IAAMspF,GAAY,GAAIhC,IAAUn8F,KAAM+4E,EAAQvjD,EA2B9C,OAzBA2oE,GAAUvpF,MAAQsnF,GAAYJ,UAG9B97F,KAAK68F,eAAe1+E,IAAIggF,GAEnB3oE,EAAOooE,aACV59F,KAAKo+F,2BAA6BD,GAKpCn+F,KAAKq+F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAct+F,EAAKu+F,0BAEvDD,GAAUvpF,MAAQsnF,GAAYH,QAMzBvmE,EAAOooE,YAAgBU,GAAgCz+F,EAAK88F,gBAC/DwB,EAAU/B,WAEXtqE,GAEIqsE,GAIT1jB,EAAF91E,UAAA03F,cAAE,SAAc8B,GACZ,GAAMI,GAAYv+F,KAAK68F,eAAe1jE,OAAOglE,EAY7C,IAVIA,IAAcn+F,KAAKo+F,6BACrBp+F,KAAKo+F,2BAA6B,MAI/Bp+F,KAAK68F,eAAetvE,OACvBvtB,KAAK+9F,eAAiB,MAInBQ,EAAL,CAIA,GAAMC,GAAWL,EAAU7rF,QACrB0rF,EAAVloE,MAAgCwmE,GAAiC6B,EAAU3oE,OAAO30B,UAE9E29F,GAAS7rF,MAAMurF,mBAAwBF,EAAgBxB,aAA3D,KACIgC,EAAS7rF,MAAMugB,QAAU,IACzBirE,EAAUvpF,MAAQsnF,GAAYF,WAG9Bh8F,KAAKq+F,sBAAsB,WACzBF,EAAUvpF,MAAQsnF,GAAYD,OAC9BuC,EAAmB,WAAEzmC,YAAYymC,IAChCR,EAAgBxB,gBAIrB/hB,EAAF91E,UAAA85F,WAAE,WACEz+F,KAAK68F,eAAezyF,QAAQ,SAAA2uE,GAAU,MAAAA,GAAOqjB,aAI/C3hB,EAAF91E,UAAAtE,mBAAE,SAAmBiS,GAAnB,GAAFzS,GAAAG,IACSsS,IAAWA,IAAYtS,KAAK0+F,kBAKjC1+F,KAAK86E,uBAEL96E,KAAKmS,QAAQM,kBAAkB,WAC7B5S,EAAK+8F,eAAexyF,QAAQ,SAACwkB,EAAI5vB,GAC7B,MAAAsT,GAAQy+B,iBAAiB/xC,EAAM4vB,EAAI/uB,EAAKi9F,mBAG9C98F,KAAK0+F,gBAAkBpsF,IA0DjBmoE,EAAV91E,UAAA05F,sBAAA,SAAgCzvE,EAAcmjB,OAA9C,KAAAA,IAA8CA,EAA9C,GACI/xC,KAAKmS,QAAQM,kBAAkB,WAAM,MAAAsf,YAAWnD,EAAImjB,MAItD0oC,EAAF91E,UAAAm2E,qBAAE,WAAA,GAAFj7E,GAAAG,IACQA,MAAK0+F,iBACP1+F,KAAK48F,eAAexyF,QAAQ,SAACwkB,EAAI5vB,GAC/Ba,EAAoB,gBAAEgyC,oBAAoB7yC,EAAM4vB,EAAI/uB,EAAKi9F,kBAnTjEriB,Ke+Caj4E,GACT,GAAIuP,GAAAA,eAAoC,2CAuE1C,QAAFwnE,GAAsBr5E,EACR2+B,EACAqF,EAC+CzjC,EACJ0jC,GAJnCnkC,KAAtBE,YAAsBA,EA1CpBF,KAAFg5E,OAA6C,EAmB7Ch5E,KAAA6mC,WAA+B,EAqB/B7mC,KAAA2mC,gBAAoC,EAQhC3mC,KAAK2+F,eAAiBl+F,MACtBT,KAAK4+F,gBAAkB,GAAInkB,IAAez6E,KAAM6+B,EAAQ3+B,EAAagkC,GAE/C,mBAAlBC,IACFnkC,KAAK2+F,eAAe99F,WAAa07F,cAAe,EAAGC,aAAc,IAjIvE,MA0FE/wF,QAAFC,eACM6tE,EADN50E,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GACXjB,KAAK6mC,UAAY5lC,EACjBjB,KAAK6+F,gEAQPpzF,OAAFC,eACM6tE,EADN50E,UAAA,eAAE,WACgB,MAAO3E,MAAK8+F,UAAY9+F,KAAKE,YAAYI,mBACzD,SAAYqU,GACV3U,KAAK8+F,SAAWnqF,EAChB3U,KAAK6+F,gEA2BPtlB,EAAF50E,UAAAuP,SAAE,WACElU,KAAK2mC,gBAAiB,EACtB3mC,KAAK6+F,gCAGPtlB,EAAF50E,UAAAsD,YAAE,WACEjI,KAAK4+F,gBAAgB9jB,wBAIvBvB,EAAF50E,UAAA85F,WAAE,WACEz+F,KAAK4+F,gBAAgBH,cAOvBhzF,OAAFC,eAAM6tE,EAAN50E,UAAA,oBAAE,WACE,OACEs5F,SAAUj+F,KAAKi+F,SACfjlB,OAAQh5E,KAAKg5E,OACbnzB,MAAO7lD,KAAK6lD,MACZhlD,UAANi1B,MAAqB91B,KAAK2+F,eAAe99F,UAAcb,KAAKa,WACtDD,qBAAsBZ,KAAK2+F,eAAe/9F,uDAQ9C6K,OAAFC,eAAM6tE,EAAN50E,UAAA,sBAAE,WACE,MAAO3E,MAAKW,YAAcX,KAAK2+F,eAAeh+F,0CAIxC44E,EAAV50E,UAAAk6F,yCACS7+F,KAAKW,UAAYX,KAAK2mC,gBACzB3mC,KAAK4+F,gBAAgBv+F,mBAAmBL,KAAK2U,UAmBjD4kE,EAAF50E,UAAAo6F,OAAE,SAAOC,EAAkCnzE,EAAe2J,GACtD,WADJ,KAAA3J,IAA2CA,EAA3C,GAC6B,gBAAdmzE,GACFh/F,KAAK4+F,gBAAgBrB,aAAayB,EAAWnzE,EAA1DiK,MAAiE91B,KAAKi6E,aAAiBzkD,IAE1Ex1B,KAAK4+F,gBAAgBrB,aAAa,EAAG,EAAlDznE,MAAyD91B,KAAKi6E,aAAiB+kB,oBAjJ/EhgG,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4BACVvC,SAAU,YACVpD,MACEC,MAAS,aACTwgG,+BAAgC,qDA5CpCjgG,KAAE0I,EAAAA,aAIF1I,KAAEC,EAAAA,SAPFD,KAAQoD,EAAAA,WAkHRpD,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkCa,QAClCxD,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkC4uB,EAAAA,8CA9DlCs1B,QAAA7mD,KAAGO,EAAAA,MAAHoC,MAAS,oBAGTu9F,YAAAlgG,KAAGO,EAAAA,MAAHoC,MAAS,wBAMTs8F,WAAAj/F,KAAGO,EAAAA,MAAHoC,MAAS,uBAOTq3E,SAAAh6E,KAAGO,EAAAA,MAAHoC,MAAS,qBAOTd,YAAA7B,KAAGO,EAAAA,MAAHoC,MAAS,wBAMThB,WAAA3B,KAAGO,EAAAA,MAAHoC,MAAS,uBAYTgT,UAAA3V,KAAGO,EAAAA,MAAHoC,MAAS,uBAtGT43E,iCCAA,sBAiBAv6E,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiB48B,EAAAA,gBAC3Bv8B,SAAUm2E,GAAWx2E,IACrBU,cAAe81E,QApBjBt2E,mBC2DE,QAAFk8F,GAAgE1iE,GAAAz8B,KAAhEy8B,eAAgEA,EAL9Dz8B,KAAF4U,MAA2C,YAGzC5U,KAAFW,UAA+B,EAA/B,sBApBA3B,KAACgH,EAAAA,UAADrE,OAAAjD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEoF,SAAF,sBACE+B,QAAF,2jCACED,SAAU,GACVzH,MACFC,MAAA,sBACM2gG,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIhvE,kCAAJ,4KAYA6uE,EAAA9/F,kEAFA8/F,iCCzDA,sBAYAngG,KAAC4D,EAAAA,SAADjB,OACEyB,SAAU+7F,IACV17F,cAAe07F,QAdjB/2C,KCcAm3C,GAAA,yBAdA,MAAAA,MAeaC,GACT5/F,EAAc2/F,IAGdE,GAA2B,kFA2B7B5/F,GAAFqqC,SAAqB,sBAAsBu1D,OAH3C,MAFiC/6F,GAAjCqqC,EAAAjvC,kBAjBAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACEvC,SAAU,cACVqE,SAAU,mIACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,YACEqE,QAAF,mkBACE1H,MACFC,MAAA,eACMyI,KAAN,QACIw4F,gCAAJ,WACI39F,uBAAJ,sBACIyrC,yBAAJ,gBAIAuB,EAAA1vC,wCAGA0vC,O1CVIyvC,GAAmB,EAGvBqF,GAAA,WACE,QAAFA,GAEWv1D,EAEAw4B,sBAFA9mD,KAAXsuB,OAAWA,EAEAtuB,KAAX8mD,YAAWA,EAzCX,MAAA+8B,MAyDav1C,GACT,GAAIv8B,GAAAA,eAAyC,6CA6D/C,QAAF+8B,GACYzqB,EACAjM,EACiD+yE,EACpChgD,GAHbnrC,KAAZqkB,SAAYA,EACArkB,KAAZoY,mBAAYA,EACiDpY,KAA7DmrF,QAA6DA,EACpCnrF,KAAzBmrC,MAAyBA,EApCzBnrC,KAAA0mC,WAAsB,EACtB1mC,KAAAorF,SAAoB,EACpBprF,KAAA6mC,WAAsB,EACtB7mC,KAAAwrF,qBAAiC,GAY/BxrF,KAAF8gB,GAAwB,cAAc09D,KAYpCx+E,KAAFkjD,kBAAyC,GAAI3sC,GAAAA,aAG3CvW,KAAF0T,cAA2B,GAAIC,GAAAA,QAH/B,MArBElI,QAAFC,eAAMojC,EAANnqC,UAAA,gBAAE,WAAiB,MAAO3E,MAAKmrF,SAAWnrF,KAAKmrF,QAAQrgD,0CAGrDr/B,OAAFC,eAAMojC,EAANnqC,UAAA,gBAAE,WAA0B,MAAO3E,MAAK0mC,2CAStCj7B,OAAFC,eACMojC,EADNnqC,UAAA,gBAAE,WACiB,MAAQ3E,MAAKmrC,OAASnrC,KAAKmrC,MAAMxqC,UAAaX,KAAK6mC,eACpE,SAAa5lC,GAAcjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c;2EAGlEwK,OAAFC,eAAMojC,EAANnqC,UAAA,qBAAE,WAAsB,MAAO3E,MAAKmrF,SAAWnrF,KAAKmrF,QAAQhjD,+CAqB1D18B,OAAFC,eAAMojC,EAANnqC,UAAA,cAAE,WACE,MAAO3E,MAAKorF,yCAOd3/E,OAAFC,eAAMojC,EAANnqC,UAAA,iBAAE,WAEE,OAAQ3E,KAAK0kB,kBAAkB7e,aAAe,IAAIC,wCAIpDgpC,EAAFnqC,UAAAo/C,OAAE,WACO/jD,KAAK0mC,YACR1mC,KAAK0mC,WAAY,EACjB1mC,KAAKoY,mBAAmBxB,eACxB5W,KAAKqrF,8BAKTv8C,EAAFnqC,UAAAs/C,SAAE,WACMjkD,KAAK0mC,YACP1mC,KAAK0mC,WAAY,EACjB1mC,KAAKoY,mBAAmBxB,eACxB5W,KAAKqrF,8BAKTv8C,EAAFnqC,UAAAkT,MAAE,WACE,GAAMvF,GAAUtS,KAAK0kB,iBAEQ,mBAAlBpS,GAAQuF,OACjBvF,EAAQuF,SASZi3B,EAAFnqC,UAAA2mF,gBAAE,WACOtrF,KAAKorF,UACRprF,KAAKorF,SAAU,EACfprF,KAAKoY,mBAAmBxB,iBAS5Bk4B,EAAFnqC,UAAA4mF,kBAAE,WACMvrF,KAAKorF,UACPprF,KAAKorF,SAAU,EACfprF,KAAKoY,mBAAmBxB,iBAK5Bk4B,EAAFnqC,UAAA61C,SAAE,WACE,MAAOx6C,MAAK0kD,WAId5V,EAAFnqC,UAAAgV,eAAE,SAAerY,GACTA,EAAMsY,UAAYK,EAAAA,OAAS3Y,EAAMsY,UAAYM,EAAAA,QAC/Cla,KAAKulD,wBAGLjkD,EAAMC,mBAQVutC,EAAFnqC,UAAA4gD,sBAAE,WACOvlD,KAAKW,WACRX,KAAK0mC,WAAY1mC,KAAK8qC,WAAY9qC,KAAK0mC,UACvC1mC,KAAKoY,mBAAmBxB,eACxB5W,KAAKqrF,2BAA0B,KAKnCv8C,EAAFnqC,UAAA+a,aAAE,WACE,MAAO1f,MAAKW,SAAW,KAAO,KAIhCmuC,EAAFnqC,UAAA+f,gBAAE,WACE,MAAO1kB,MAAKqkB,SAAS/jB,eAGvBwuC,EAAFnqC,UAAAkzE,mBAAE,WAME,GAAI73E,KAAK0mC,UAAW,CAClB,GAAMge,GAAY1kD,KAAK0kD,SAEnBA,KAAc1kD,KAAKwrF,uBACrBxrF,KAAKwrF,qBAAuB9mC,EAC5B1kD,KAAK0T,cAAc/H,UAKzBmjC,EAAFnqC,UAAAsD,YAAE,WACEjI,KAAK0T,cAAcO,YAIb66B,EAAVnqC,UAAA0mF,0BAAA,SAAoCvkC,OAApC,KAAAA,IAAoCA,GAApC,GACI9mD,KAAKkjD,kBAAkBhsC,KAAK,GAAI2sE,IAAyB7jF,KAAM8mD,oBA/LnE9nD,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACVpD,MACF0I,KAAA,SACMq7B,kBAAN,iBACIkpD,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBrpD,OAAJ,KACI2nB,uBAAJ,sBACIloD,uBAAJ,sBACI6pF,8BAAJ,WACIzpF,UAAJ,0BACIgtB,YAAJ,yBACI1wB,MAAS,cAEbyH,QAAA,k5CACAD,SAAA,qWACEvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAC,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA2sC,QAFAtvC,KAAE+vC,GAAFttC,aAAAzC,KAAAsD,EAAAA,cAcAwsC,EAAAzvC,2DAwEAsB,WAAA3B,KAAAO,EAAAA,QAGA2jD,oBAAAlkD,KAAAwY,EAAAA,UAYAs3B,iCClHA,sBAgBA9vC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUI,GAAiBH,EAAAA,aAAcslD,IACzChlD,SAAU0rC,GAAWC,IACrBtrC,cAAeqrC,GAAWC,QAnB5BQ,KCWas8C,GACX,GAAI95E,GAAAA,eAA6B,4BCD/BguB,GAAe,6BAajB//B,KAAF8gB,GAAwB,aAAaif,KAxBrC,sBAeA/gC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,YACV3F,MACEC,MAAS,YACTyI,KAAQ,QACRshC,YAAa,4BAIjB1nB,KAAA9hB,KAAGO,EAAAA,SAxBHusF,KCiBaC,IAIXC,mBAAoBr3E,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAASjC,EAAAA,OAAQugB,QAAS,EAAGre,UAAW,oBAC9CE,EAAAA,WAAW,iBACTpC,EAAAA,OAAQugB,QAAS,EAAGre,UAAW,sBAC/BG,EAAAA,QAAQ,+CCbdq5B,GAAA,yBAbA,MAAAA,MCWItO,GAAe,6BAgBjB//B,KAAFqgF,MAAoC,QAGlCrgF,KAAF8gB,GAAwB,YAAYif,KA9BpC,sBAeA/gC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,WACV3F,MACEC,MAAS,WACTwtF,oBAAqB,iBACrBzjD,YAAa,KAEbvM,eAAgB,8BAKpBokD,QAAArhF,KAAGO,EAAAA,QAGHuhB,KAAA9hB,KAAGO,EAAAA,SA9BH2sF,iCCAA,sBAYAltF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBAbZgoF,iCCAA,sBAiBAntF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sBAlBZioF,iCCAA,sBAYAptF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBAbZkoF,iCCAA,sBAYArtF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBAbZmoF,KCuDIvsD,GAAe,EASnBwsD,GAAA,WACE,QAAFA,GAAqBrsF,GAAAF,KAArBE,YAAqBA,EAjErB,MAAAqsF,MAwEaC,GACTtoF,EAAWqoF,GAAkB,WAiBpBE,GACT,GAAI16E,GAAAA,eAA2C,iDAyJjD,QAAF08B,GACavuC,EACCkY,EACsCs0E,EAC1Bv2E,EAERw2E,EAEJpoF,EACA4N,EACmCsqB,GAV/C,GAAF58B,GAWIC,EAXJC,KAAAC,KAWUE,IAXVF,WACaH,GAAbK,YAAaA,EACCL,EAAduY,mBAAcA,EAEYvY,EAA1BsW,KAA0BA,EAERtW,EAAlB8sF,UAAkBA,EAEJ9sF,EAAd0E,UAAcA,EACA1E,EAAdsS,QAAcA,EA7GdtS,EAAA+sF,8BAAyC,EAgCzC/sF,EAAAgtF,oBAA+B,EAW7BhtF,EAAFitF,yBAAqC,GASrCjtF,EAAAktF,WAAuB,GAGrBltF,EAAFmtF,aAAyB,YAAYjtD,KAGnClgC,EAAFqqC,SAAa,wBAAwBnK,KAuDjClgC,EAAKotF,cAAgBP,MACrB7sF,EAAK6kF,WAAa7kF,EAAKotF,cAAcC,OAAS,OAC9CrtF,EAAKstF,mBAAwC,mBAAnB1wD,EAG1B58B,EAAK8+E,WAAcgO,GAAaA,EAAUhO,WAAcgO,EAAUhO,WAAa,WA3BnF,MA9FkCj6E,GAAlC+pC,EAAA3uC,GAME2L,OAAFC,eACM+iC,EADN9pC,UAAA,kBAAE,WAC2C,MAAO3E,MAAKy/E,iBACvD,SAAex+E,GAAf,GAAFpB,GAAAG,KACUwrB,EAAWxrB,KAAKy/E,WAEtBz/E,MAAKy/E,YAAcx+E,GAAUjB,KAAK2sF,WAAa3sF,KAAK2sF,UAAUhO,YAAe,SAEpD,YAArB3+E,KAAKy/E,aAA6Bj0D,IAAavqB,IAE7CjB,KAAKmS,QACPnS,KAAY,QAAE+8C,SAAS9yC,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC7CrF,EAAY,QAAE4S,kBAAkB,WAAM,MAAA5S,GAAKutF,uBAG7C77E,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAKutF,uDAOxC3hF,OAAFC,eACM+iC,EADN9pC,UAAA,0BAAE,WACoC,MAAO3E,MAAKqtF,yBAChD,SAAuBpsF,GACrBjB,KAAKqtF,oBAAsBrvE,EAAAA,sBAAsB/c,oCAQnDwK,OAAFC,eAAM+iC,EAAN9pC,UAAA,0BAAE,WACE,MAA2B,WAApB3E,KAAK0kF,aAA4B1kF,KAAK6sF,oDAI/CphF,OAAFC,eAAM+iC,EAAN9pC,UAAA,sBAAE,WAAgC,MAA2B,UAApB3E,KAAK0kF,4CAM5Cj5E,OAAFC,eACM+iC,EADN9pC,UAAA,iBAAE,WAC0B,MAAO3E,MAAK+sF,gBACtC,SAAc9rF,GACZjB,KAAK+sF,WAAa9rF,EAClBjB,KAAKstF,iDAkBP7hF,OAAFC,eACM+iC,EADN9pC,UAAA,kBAAE,WAEE,MAA2B,WAApB3E,KAAK2+E,YAAgD,UAArB3+E,KAAKujF,YAA0B,OAASvjF,KAAKujF,iBAEtF,SAAetiF,GACTA,IAAUjB,KAAKujF,cACjBvjF,KAAKujF,YAActiF,GAASjB,KAAKitF,cAAcC,OAAS,OACxDltF,KAAKoY,mBAAmBxB,iDAkD5B63B,EAAF9pC,UAAA+4D,0BAAE,WACE,MAAO19D,MAAKutF,yBAA2BvtF,KAAKE,aAG9CuuC,EAAF9pC,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKwtF,wBACDxtF,KAAKslF,SAASxiC,aAChB9iD,KAAKE,YAAYI,cAAckF,UAC1B2Y,IAAI,uBAAuBne,KAAKslF,SAASxiC,aAIhD9iD,KAAKslF,SAAShiC,aAAar5C,KAAKsL,EAAAA,UAAS,OAAerQ,UAAU,WAChErF,EAAK4tF,wBACL5tF,EAAK6tF,sBACL7tF,EAAKuY,mBAAmBxB,gBAI1B,IAAM+2E,GAAe3tF,KAAKslF,SAASxjC,WAAa9hD,KAAKslF,SAASxjC,UAAU6rC,cAAgBt/E,EAAAA,KACxFpC,GAAAA,MAAM0hF,EAAc3tF,KAAK4tF,gBAAgB3oF,QAASjF,KAAK6tF,gBAAgB5oF,SAClEC,UAAU,WAAM,MAAArF,GAAKuY,mBAAmBxB,iBAG7C5W,KAAK8tF,cAAc7oF,QAAQgF,KAAKsL,EAAAA,UAAU,OAAOrQ,UAAU,WACzDrF,EAAKytF,gBACLztF,EAAKuY,mBAAmBxB,iBAI1B5W,KAAK+tF,eAAe9oF,QAAQgF,KAAKsL,EAAAA,UAAU,OAAOrQ,UAAU,WAC1DrF,EAAK6tF,sBACL7tF,EAAKuY,mBAAmBxB,kBAI5B63B,EAAF9pC,UAAAuU,sBAAE,WACElZ,KAAKwtF,wBACDxtF,KAAK4sF,8BACP5sF,KAAKotF,oBAIT3+C,EAAF9pC,UAAAC,gBAAE,WAEE5E,KAAK8sF,yBAA2B,QAChC9sF,KAAKoY,mBAAmB8S,iBAI1BujB,EAAF9pC,UAAAqpF,eAAE,SAAeC,GACb,GAAMnsC,GAAY9hD,KAAKslF,SAAWtlF,KAAKslF,SAASxjC,UAAY,IAC5D,OAAOA,IAAaA,EAAUmsC,IAGhCx/C,EAAF9pC,UAAAupF,gBAAE,WACE,SAAUluF,KAAKslF,UAAYtlF,KAAKslF,SAASx7C,aAAe9pC,KAAKmuF,oBAG/D1/C,EAAF9pC,UAAAypF,UAAE,WACE,QAASpuF,KAAKquF,aAGhB5/C,EAAF9pC,UAAA2pF,kBAAE,WACE,MAAOtuF,MAAKuuF,iBAAmBvuF,KAAKslF,SAASkJ,kBAAoBxuF,KAAKyuF,qBAGxEhgD,EAAF9pC,UAAA+pF,wBAAE,WAEE,MAA2B,WAApB1uF,KAAK2+E,aAA4B3+E,KAAKouF,aACzCpuF,KAAKouF,cAAgBpuF,KAAKsuF,qBAGhC7/C,EAAF9pC,UAAAslC,kBAAE,WAEE,MAAOjqC,MAAKouF,aAAmC,WAApBpuF,KAAK2+E,YAA2B3+E,KAAKkuF,mBAIlEz/C,EAAF9pC,UAAAgqF,sBAAE,WACE,MAAQ3uF,MAAK+tF,gBAAkB/tF,KAAK+tF,eAAe5oF,OAAS,GACxDnF,KAAKslF,SAASsJ,WAAc,QAAU,QAI5CngD,EAAF9pC,UAAAggF,qBAAE,WAAA,GAAF9kF,GAAAG,IACQA,MAAKiqC,qBAAuBjqC,KAAKuuF,iBAG/BvuF,KAAKmtF,qBACPntF,KAAK6sF,oBAAqB,EAE1Bp0C,EAAAA,UAAUz4C,KAAK6uF,OAAOvuF,cAAe,iBAAiB2J,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC5ErF,EAAKgtF,oBAAqB,KAI9B7sF,KAAK0kF,WAAa,SAClB1kF,KAAKoY,mBAAmBxB,iBAQpB63B,EAAV9pC,UAAA8oF,iCACI,GAAIztF,KAAKslF,SAASx7C,aAAe9pC,KAAKmuF,kBACpC,KAAMW,MAKFrgD,EAAV9pC,UAAA2oF,yBACIttF,KAAK+uF,iBACL/uF,KAAK0tF,uBAOCj/C,EAAV9pC,UAAAoqF,oCACI,IAAI/uF,KAAK8tF,cAAe,CACtB,GAAIkB,OAAV,GACUC,MAAV,EACMjvF,MAAK8tF,cAAc1jF,QAAQ,SAAC8kF,GAC1B,GAAmB,UAAfA,EAAK7O,MAAmB,CAC1B,GAAI2O,GAAanvF,EAAKsvF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAK7O,MAAiB,CAC/B,GAAI4O,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVzgD,EAAV9pC,UAAA+oF,+BACI,GAAI1tF,KAAKslF,SAAU,CACjB,GAAIr4C,KAEJ,IAAqC,SAAjCjtC,KAAK2uF,wBAAoC,CAC3C,GAAMU,GAAYrvF,KAAK8tF,cACnB9tF,KAAK8tF,cAAcztE,KAAK,SAAA6uE,GAAQ,MAAe,UAAfA,EAAK7O,QAAqB,KACxDiP,EAAUtvF,KAAK8tF,cACjB9tF,KAAK8tF,cAAcztE,KAAK,SAAA6uE,GAAQ,MAAe,QAAfA,EAAK7O,QAAmB,IAExDgP,GACFpiD,EAAIrjC,KAAKylF,EAAUvuE,IACV9gB,KAAK+sF,YACd9/C,EAAIrjC,KAAK5J,KAAKgtF,cAGZsC,GACFriD,EAAIrjC,KAAK0lF,EAAQxuE,QAEV9gB,MAAK+tF,iBACd9gD,EAAMjtC,KAAK+tF,eAAe5hF,IAAI,SAAAm6C,GAAS,MAAAA,GAAMxlC,KAG/C9gB,MAAKslF,SAASt4C,kBAAkBC,KAK1BwB,EAAZ9pC,UAAA6oF,sBAAE,WACE,IAAKxtF,KAAKslF,SACR,KAAMiK,MAQV9gD,EAAF9pC,UAAAyoF,iBAAE,WACE,GAAMoC,GAAUxvF,KAAK6uF,OAAS7uF,KAAK6uF,OAAOvuF,cAAgB,IAE1D,IAAwB,YAApBN,KAAK2+E,YAA6B6Q,GAAYA,EAAQrlF,SAAShF,QAC9DqqF,EAAQ3pF,YAAYC,UAIrB9F,KAAKuE,WAAcvE,KAAKuE,UAAUO,WAAtC,CAMA,IAAKN,SAAwB,gBAAEiB,SAASzF,KAAKE,YAAYI,eAEvD,YADAN,KAAK4sF,8BAA+B,EAItC,IAAI6C,GAAa,EACbC,EAAW,EACTC,EAAW3vF,KAAKutF,wBAAwBjtF,cAAcs3D,iBAC1D,iCACIg4B,EAAS5vF,KAAKutF,wBAAwBjtF,cAAcs3D,iBACtD,8BACJ,IAAI53D,KAAK6uF,QAAU7uF,KAAK6uF,OAAOvuF,cAAc6J,SAAShF,OAAQ,CAM5D,IAAoB,GALd0qF,GAAiB7vF,KAAK8vF,aACxB9vF,KAAKutF,wBAAwBjtF,cAAcmuB,yBACzCshE,EAAa/vF,KAAK8vF,aAAaN,EAAQrlF,SAAS,GAAGskB,yBACrDuhE,EAAa,EAEvBzlC,EAAA,EAA0B95C,EAAA++E,EAAQrlF,SAARogD,EAA1B95C,EAAAtL,OAA0BolD,IAAkB,CACpCylC,GADRv/E,EAAA85C,GAC4BtyC,YAEtBw3E,EAAaM,EAAaF,EA9aN,EA+apBH,EAAWM,EAAa,EAhbH,IAgbOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAIjlF,GAAI,EAAGA,EAAI2kF,EAASxqF,OAAQ6F,IACnC2kF,EAASjzC,KAAK1xC,GAAG2H,MAAMM,MAAWw8E,EAAxC,IAEI,KAAK,GAAIzkF,GAAI,EAAGA,EAAI4kF,EAAOzqF,OAAQ6F,IACjC4kF,EAAOlzC,KAAK1xC,GAAG2H,MAAMM,MAAWy8E,EAAtC,IAGI1vF,MAAK4sF,8BAA+B,IAI9Bn+C,EAAV9pC,UAAAmrF,aAAA,SAAuBI,GACnB,MAAOlwF,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,MAAkBivF,EAAKn4D,MAAQm4D,EAAKl9E,qBAxZtEhU,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACEvC,SAAU,eACVqE,SAAU,k/eAMVzH,MACEC,MAAJ,iBACI0xF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACI1xB,qBAAJ,oBACIC,mBAAJ,kBACI0xB,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACI9gE,kCAAJ,uBAEAzuB,QAAA,SACAnD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA0vC,EAAA1nB,eAAA,WAAA,QACA/nB,KAAA0I,EAAAA,aACA1I,KAAAE,EAAAA,oBACAF,SAAAqD,GAAAZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAkqF,QACA7sF,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAmCsD,EAAAA,aACnCtD,SAAAqD,GAAAZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA8qF,QACAztF,KAAAoD,EAAAA,wHAxHAqsC,EAAApvC,gBAJAs/E,aAAA3/E,KAAAO,EAAAA,QAwOA8xF,qBAAAryF,KAAAO,EAAAA,QA/OA4vF,YAAAnwF,KAAAO,EAAAA,QAiPAmlF,aAAA1lF,KAAAO,EAAAA,QAtMA+xF,eAAAtyF,KAAAsV,EAAAA,UAAA3S,MAAA,eA5BA4rF,0BAAAvuF,KAAAsV,EAAAA,UAAA3S,MAAA,yBAuOA4vF,qBAAAvyF,KAAAsV,EAAAA,UAAA3S,MAAA,0GA3GAwsF,oBAAAnvF,KAAAu/B,EAAAA,aAAA58B,MAAAyqF,MAqBAiC,cAAArvF,KAAAu/B,EAAAA,aAAA58B,MAAAwqF,MAsBA4B,iBAAA/uF,KAAQoJ,EAAAA,gBAARzG,MAAAmqF,MAsBAgC,gBAAA9uF,KAAAoJ,EAAAA,gBAAAzG,MAAAuqF,MAmBA0B,kBAAA5uF,KAAAoJ,EAAAA,gBAAAzG,MAAA0qF,MAEAwB,kBAAA7uF,KAAAoJ,EAAAA,gBAAYzG,MAAZ2qF,OAEA79C,GACA+9C,gCC5OA,sBAoBAxtF,KAAC4D,EAAAA,SAADjB,OACE8B,cACEqoF,GACAr9C,GACAy9C,GACAC,GACAC,GACAC,GACAC,IAEFzpF,SACEC,EAAAA,aACAI,EAAAA,iBAEFE,SACE0oF,GACAr9C,GACAy9C,GACAC,GACAC,GACAC,GACAC,QAzCJ98C,KvByCIgiD,GAA+B,EAGnC5P,GAAA,WACE,QAAFA,GAEWtzD,EAEA20B,GAFAjjD,KAAXsuB,OAAWA,EAEAtuB,KAAXijD,OAAWA,EAjDX,MAAA2+B,MAuDA6P,GAAA,yBAvDA,MAAAA,MAwDaC,GACT/xF,EAAmB8xF,IASV3P,GACT,GAAI/vE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAAS0/E,mBA+Fb,QAAFrQ,GACYlpE,EACAlY,EACkCsgC,GAH5C,GAAF3gC,GAIIC,EAJJC,KAAAC,OAAAA,WACYH,GAAZuY,mBAAYA,EACAvY,EAAZK,YAAYA,EAlEVL,EAAF6hF,WAAuB,EAIrB7hF,EAAF6jF,SAAqB,EAenB7jF,EAAFgqB,YAA0D,KAoBxDhqB,EAAFgiF,eACM,GAAItrE,GAAAA,aAGR1W,EAAFu6B,OAAkD,GAAI7jB,GAAAA,aAGpD1W,EAAF0xB,OAAkD,GAAIhb,GAAAA,aAapD1W,EAAF67C,cAGE77C,EAAFihB,GAAe,oBAAoB0wE,KAQ/B3xF,EAAKwhF,yBAA2B7gD,EAASuhD,wBAlB7C,MA3DqCr9E,GAArC48E,EAAAxhF,GAUE2L,OAAFC,eAAM41E,EAAN38E,UAAA,cAAE,WAAwB,MAAO3E,MAAK0jF,SAAW1jF,KAAK0hF,2CAsBpDj2E,OAAFC,eACM41E,EADN38E,UAAA,6BAAE,WACuC,MAAO3E,MAAKqhF;wCACnD,SAA0BpgF,GACxBjB,KAAKqhF,uBAAyBrjE,EAAAA,sBAAsB/c,oCAwBtDwK,OAAFC,eACM41E,EADN38E,UAAA,iBAAE,SACc1D,GADd,GAAFpB,GAAAG,IAEQiB,IAASA,EAAMkE,SACjBlE,EAAMmiC,MAAM,KAAKh5B,QAAQ,SAAAiyC,GAAa,MAAAx8C,GAAK67C,WAAWW,EAAUv2C,SAAU,IAC1E9F,KAAKE,YAAYI,cAAc+7C,UAAY,qCAiB/CilC,EAAF38E,UAAAqD,mBAAE,WACEhI,KAAKgZ,YAAc,GAAIytC,GAAAA,2BAAsCzmD,KAAKirC,SAASvwB,WAE3E1a,KAAKuhF,kBAOPD,EAAF38E,UAAA68E,cAAE,SAAczjC,GACR/9C,KAAK2lD,QACP3lD,KAAK2lD,MAAMrlD,cAAcy9C,UAAYA,IAKzCujC,EAAF38E,UAAA88E,cAAE,WACE,MAAOzhF,MAAK2lD,MAAQ3lD,KAAK2lD,MAAMrlD,cAAcy9C,UAAY,GAI3DujC,EAAF38E,UAAA48E,eAAE,WACEvhF,KAAK0hF,YAAc1hF,KAAKirC,QAAQ9lC,OAChCnF,KAAK07C,WAAW,4BAA8B17C,KAAK0hF,UACnD1hF,KAAK07C,WAAW,4BAA8B17C,KAAK0hF,UACnD1hF,KAAKoY,mBAAmBxB,gBAI1B0qE,EAAF38E,UAAAg9E,iBAAE,SAAiB1+B,GACf,GAAM3hD,GAAQ,GAAIsgF,IAA6B5hF,KAAMijD,EACrDjjD,MAAK6hF,eAAe3qE,KAAK5V,mBAhI7BtC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,wJACVC,QAAF,kpBACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE6C,SAAF,kBACEC,QAAF,iBACErD,MACFC,MAAA,oBAEA8I,YACAC,QAAA8mC,GAAA7mC,YAAA65E,2FA3EAtiF,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAmgF,SA0JAR,EAAAjiF,6GA5DA4rC,UAAAjsC,KAAAoJ,EAAAA,gBAAAzG,MAAAmtC,IAAAtH,aAAA,MAGAsF,eAAA9tC,KAAAoJ,EAAAA,gBAAAzG,MAAAotC,MAGAllB,cAAA7qB,KAAAO,EAAAA,QAGAwiF,wBAAA/iF,KAAAO,EAAAA,QAGAyiF,aAAAhjF,KAAAO,EAAAA,QAMAsiF,iBAAA7iF,KAAAwY,EAAAA,SAWA4iB,SAAAp7B,KAAAwY,EAAAA,SAGA+Z,SAAAvyB,KAAAwY,EAAAA,SAIAhS,YAAAxG,KAAAO,EAAAA,MAAAoC,MAAA,YASA2/E,qBCrIE,QAAFW,GAEa39E,GAAAtE,KAAbsE,WAAaA,EArBb,sBAcAtF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,0BACVvC,SAAU,gEARZ5C,KAAmB0I,EAAAA,cARnBu6E,K7H8DaC,GACT,GAAInwE,GAAAA,eAAqC,oCAQhCowE,IACX36E,QAAS06E,GACThhE,MAAOiX,EAAAA,SACP/W,WAAYghE,GAODC,IACX76E,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAqsE,MAC9BniD,OAAO,iBA2GP,QAAFmiD,GAAsBj+D,EAAgDwQ,EAChDthB,EACAgvE,EACAnqE,EAC0Ck4B,EAC9Bn6B,EACQolD,EACU92D,EAE9B4T,GATpB,GAAFxY,GAAAG,IAAsBA,MAAtBqkB,SAAsBA,EAAgDrkB,KAAtE60B,SAAsEA,EAChD70B,KAAtBuT,kBAAsBA,EACAvT,KAAtBuiF,MAAsBA,EACAviF,KAAtBoY,mBAAsBA,EAC0CpY,KAAhEswC,gBAAgEA,EAC9BtwC,KAAlCmW,KAAkCA,EACQnW,KAA1Cu7D,WAA0CA,EACUv7D,KAApDyE,UAAoDA,EAE9BzE,KAAtBqY,eAAsBA,EAhFtBrY,KAAAwiF,qBAAgC,EAChCxiF,KAAAyiF,uBAAkC,EASlCziF,KAAA0iF,wBAAmC,EAMnC1iF,KAAA2iF,sBAAkCv0E,EAAAA,aAAaC,MAO/CrO,KAAA4iF,qBAAgC,EAGhC5iF,KAAA6iF,qBAA0C,GAAIlvE,GAAAA,QAM9C3T,KAAA8iF,mBAA+B,WAI3BjjF,EAAK+iF,oBACDp+E,SAAS02B,gBAAkBr7B,EAAKwkB,SAAS/jB,eAAiBT,EAAKuqC,WAIrEpqC,KAAFwiD,UAAoC,aAGlCxiD,KAAFyiD,WAAe,aAebziD,KAAF+iF,sBAAyD,MA6CzD/iF,KAAAgjF,kBAAsC,EAqEpChjF,KAAFijF,iBAAoEjgC,EAAAA,MAAM,WACtE,MAAInjD,GAAKqjF,cAAgBrjF,EAAKqjF,aAAaj4C,QACnCh/B,EAAAA,MAAZC,UAAA,GAAqBrM,EAAKqjF,aAAaj4C,QAAQ9+B,IAAI,SAAA82C,GAAU,MAAAA,GAAOC,qBAKzDrjD,EAAK0iF,MAAMxlC,SACb3qB,eACAnoB,KAAKC,EAAAA,KAAK,GAAIsyC,EAAAA,UAAU,WAAM,MAAA38C,GAAKojF,sBApGlB,mBAAXE,SACTZ,EAAM9vE,kBAAkB,WACtB0wE,OAAOpyC,iBAAiB,OAAQlxC,EAAKijF,sBA5M7C,MAyLEr3E,QAAFC,eACM42E,EADN39E,UAAA,4BAAE,WACsC,MAAO3E,MAAKyiF,2BAClD,SAAyBxhF,GACvBjB,KAAKyiF,sBAAwBzkE,EAAAA,sBAAsB/c,oCAqBrDqhF,EAAF39E,UAAAsD,YAAE,WACwB,mBAAXk7E,SACTA,OAAOtxC,oBAAoB,OAAQ7xC,KAAK8iF,oBAG1C9iF,KAAK2iF,sBAAsB5xE,cAC3B/Q,KAAKwiF,qBAAsB,EAC3BxiF,KAAKojF,gBACLpjF,KAAK6iF,qBAAqB5uE,YAI5BxI,OAAFC,eAAM42E,EAAN39E,UAAA,iBAAE,WACE,MAAO3E,MAAKgjF,kBAAoBhjF,KAAKkjF,aAAaxB,2CAKpDY,EAAF39E,UAAA0+E,UAAE,WACErjF,KAAKsjF,iBACLtjF,KAAKujF,eAIPjB,EAAF39E,UAAA6+E,WAAE,WACExjF,KAAKyjF,cAEAzjF,KAAKgjF,mBAINhjF,KAAKoqC,WAEPpqC,KAAKkjF,aAAa3xD,OAAOra,OAG3BlX,KAAKkjF,aAAaQ,QAAU1jF,KAAKgjF,kBAAmB,EAEhDhjF,KAAK8wB,aAAe9wB,KAAK8wB,YAAYnb,gBACvC3V,KAAK8wB,YAAY/a,SACjB/V,KAAK2jF,4BAA4B5yE,eAK9B/Q,KAAKwiF,qBAKRxiF,KAAKoY,mBAAmB8S,kBAQ5Bo3D,EAAF39E,UAAA2mC,eAAE,WACMtrC,KAAKgjF,kBACPhjF,KAAgB,YAAEsrC,kBAQtB7/B,OAAFC,eAAM42E,EAAN39E,UAAA,2BAAE,WAAA,GAAF9E,GAAAG,IACI,OAAOiM,GAAAA,MACLjM,KAAKijF,iBACLjjF,KAAKkjF,aAAalqE,YAAYujC,OAAOtyC,KAAK3E,EAAAA,OAAO,WAAM,MAAAzF,GAAKmjF,oBAC5DhjF,KAAK6iF,qBACL7iF,KAAK4jF,yBACL5jF,KAAK8wB,YACD9wB,KAAK8wB,YAAYqG,cAAcltB,KAAK3E,EAAAA,OAAO,WAAM,MAAAzF,GAAKmjF,oBACtD7yE,EAAAA,MACJlG,KAEAkC,EAAAA,IAAI,SAAA7K,GAAS,MAAAA,aAAiBuiF,IAA2BviF,EAAQ,yCAkBrEmK,OAAFC,eAAM42E,EAAN39E,UAAA,oBAAE,WACE,MAAI3E,MAAKkjF,cAAgBljF,KAAKkjF,aAAalqE,YAClChZ,KAAKkjF,aAAalqE,YAAYqxB,WAGhC,sCAIDi4C,EAAV39E,UAAAi/E,4CACI,OAAK5jF,MAAKyE,UAIHwH,EAAAA,MACLwsC,EAAAA,UAAsBz4C,KAAKyE,UAAW,SACtCg0C,EAAAA,UAAsBz4C,KAAKyE,UAAW,aAEvCwF,KAAK3E,EAAAA,OAAO,SAAAhE,GACX,GAAMwiF,GAAcxiF,EAA2B,OACzCyiF,EAAYlkF,EAAK07D,WACnB17D,EAAK07D,WAAWr7D,YAAYI,cAAgB,IAEhD,OAAOT,GAAKmjF,kBACJc,IAAgBjkF,EAAKwkB,SAAS/jB,iBAC5ByjF,IAAcA,EAAUt+E,SAASq+E,OAChCjkF,EAAKixB,cAAgBjxB,EAAKixB,YAAYuG,eAAe5xB,SAASq+E,MAflE3zE,EAAAA,GAAa,OAoBxBmyE,EAAF39E,UAAA+pB,WAAE,SAAWztB,GAAX,GAAFpB,GAAAG,IACIuR,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAA5R,GAAKmkF,iBAAiB/iF,MAIzDqhF,EAAF39E,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAKwiD,UAAY5zB,GAInB0zD,EAAF39E,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GAIpB0zD,EAAF39E,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKqkB,SAAS/jB,cAAcK,SAAWouB,GAGzCuzD,EAAF39E,UAAAgV,eAAE,SAAerY,GACb,GAAMsY,GAAUtY,EAAMsY,OAYtB,IANIA,IAAY24B,EAAAA,QACdjxC,EAAMC,iBAKJvB,KAAKoqC,YAAcxwB,IAAY24B,EAAAA,QAAW34B,IAAYkT,EAAAA,UAAYxrB,EAAMyjD,QAC1E/kD,KAAKikF,mBACLjkF,KAAK6iF,qBAAqBl3E,OAC1BrK,EAAMo5B,sBACD,IAAI16B,KAAKkkF,cAAgBtqE,IAAYK,EAAAA,OAASja,KAAKoqC,UACxDpqC,KAAKkkF,aAAa3+B,wBAClBvlD,KAAKikF,mBACL3iF,EAAMC,qBACD,IAAIvB,KAAKkjF,aAAc,CAC5B,GAAMiB,GAAiBnkF,KAAKkjF,aAAalqE,YAAYqxB,WAC/Cya,EAAalrC,IAAYkT,EAAAA,UAAYlT,IAAYoT,EAAAA,UAEnDhtB,MAAKoqC,WAAaxwB,IAAYwqE,EAAAA,IAChCpkF,KAAKkjF,aAAalqE,YAAYoB,UAAU9Y,GAC/BwjD,GAAc9kD,KAAKqkF,YAC5BrkF,KAAKqjF,aAGHv+B,GAAc9kD,KAAKkjF,aAAalqE,YAAYqxB,aAAe85C,IAC7DnkF,KAAKskF,oBAKXhC,EAAF39E,UAAA4/E,aAAE,SAAajjF,GACX,GAAIo3C,GAASp3C,EAAgC,OACzCL,EAAgCy3C,EAAOz3C,KAGvB,YAAhBy3C,EAAO15C,OACTiC,EAAiB,IAATA,EAAc,KAAOuoB,WAAWvoB,IAQtCjB,KAAKwkF,iBAAmBvjF,GAASuD,SAAS02B,gBAAkB55B,EAAMo3C,SACpE14C,KAAKwkF,eAAiBvjF,EACtBjB,KAAKwiD,UAAUvhD,GAEXjB,KAAKqkF,YACPrkF,KAAKqjF,cAKXf,EAAF39E,UAAAilD,aAAE,WACO5pD,KAAK4iF,oBAEC5iF,KAAKqkF,aACdrkF,KAAKwkF,eAAiBxkF,KAAKqkB,SAAS/jB,cAAcW,MAClDjB,KAAKsjF,iBACLtjF,KAAKujF,aAAY,IAJjBvjF,KAAK4iF,qBAAsB,GAcvBN,EAAV39E,UAAA4+E,YAAA,SAAsBkB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQzkF,KAAKu7D,YAA6C,SAA/Bv7D,KAAKu7D,WAAWmpB,aACjCD,EACFzkF,KAAKu7D,WAAWopB,uBAEhB3kF,KAAKu7D,WAAWmpB,WAAa,SAG/B1kF,KAAK0iF,wBAAyB,IAK1BJ,EAAV39E,UAAA8+E,uBACQzjF,KAAK0iF,yBACP1iF,KAAKu7D,WAAWmpB,WAAa,OAC7B1kF,KAAK0iF,wBAAyB,IAa1BJ,EAAV39E,UAAA2/E,2BACI,GAAMh6E,GAAQtK,KAAKkjF,aAAalqE,YAAY8kC,iBAAmB,EACzDyJ,EAAaC,EAA8Bl9C,EAC7CtK,KAAKkjF,aAAaj4C,QAASjrC,KAAKkjF,aAAap2C,cAE3C83C,EAAoBn9B,EACxBn9C,EAAQi9C,EA5Z4B,GA8ZpCvnD,KAAKkjF,aAAazB,gBA3ZiB,IA+ZrCzhF,MAAKkjF,aAAa1B,cAAcoD,IAO1BtC,EAAV39E,UAAAkgF,iDACUC,EAAc9kF,KAAKuiF,MAAMxlC,SAAS3qB,eAAenoB,KAAKC,EAAAA,KAAK,IAC3D66E,EAAgB/kF,KAAKkjF,aAAaj4C,QAAQhmC,QAAQgF,KACtD2pD,EAAAA,IAAI,WAAM,MAAA/zD,GAAKmlF,kBAAkBC,wBAGjClzC,EAAAA,MAAM,GAIR,OAAO9lC,GAAAA,MAAM64E,EAAaC,GACvB96E,KAGCuyC,EAAAA,UAAU,WAQR,MAPA38C,GAAKokF,mBACLpkF,EAAKqjF,aAAa3B,iBAEd1hF,EAAKuqC,WACPvqC,EAAgB,YAAEyrC,iBAGbzrC,EAAKqlF,sBAGdh7E,EAAAA,KAAK,IAGNhF,UAAU,SAAA5D,GAAS,MAAAzB,GAAKslF,kBAAkB7jF,MAIvCghF,EAAV39E,UAAAy+E,yBACQpjF,KAAK8wB,cACP9wB,KAAKwjF,aACLxjF,KAAK8wB,YAAYmB,UACjBjyB,KAAK8wB,YAAc,OAIfwxD,EAAV39E,UAAAq/E,iBAAA,SAA2B/iF,GACvB,GAAMmkF,GAAYplF,KAAKkjF,cAAgBljF,KAAKkjF,aAAar5D,YACvD7pB,KAAKkjF,aAAar5D,YAAY5oB,GAC9BA,EAIIokF,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CplF,MAAKu7D,WACPv7D,KAAKu7D,WAAW+pB,SAASrkF,MAAQokF,EAEjCrlF,KAAKqkB,SAAS/jB,cAAcW,MAAQokF,GAShC/C,EAAV39E,UAAAwgF,kBAAA,SAA4B7jF,GACpBA,GAASA,EAAMgtB,SACjBtuB,KAAKulF,6BAA6BjkF,EAAMgtB,QACxCtuB,KAAKgkF,iBAAiB1iF,EAAMgtB,OAAOrtB,OACnCjB,KAAKwiD,UAAUlhD,EAAMgtB,OAAOrtB,OAC5BjB,KAAKqkB,SAAS/jB,cAAcuX,QAC5B7X,KAAKkjF,aAAavB,iBAAiBrgF,EAAMgtB,SAG3CtuB,KAAKwjF,cAMClB,EAAV39E,UAAA4gF,6BAAA,SAAuCxI,GACnC/8E,KAAKkjF,aAAaj4C,QAAQ7gC,QAAQ,SAAA64C,GAC5BA,GAAU85B,GAAQ95B,EAAOn+B,UAC3Bm+B,EAAOgB,cAKLq+B,EAAV39E,UAAA2+E,oCACI,KAAKtjF,KAAKkjF,aACR,KAAMsC,IAGHxlF,MAAK8wB,YAaR9wB,KAAK8wB,YAAY6/C,YAAY19D,MAAOjT,KAAKylF,oBAZzCzlF,KAAKmyC,QAAU,GAAIh+B,GAAAA,eAAenU,KAAKkjF,aAAaj9E,SAAUjG,KAAKuT,mBACnEvT,KAAK8wB,YAAc9wB,KAAK60B,SAASqD,OAAOl4B,KAAKggD,qBAEzChgD,KAAKqY,iBACPrY,KAAK2iF,sBAAwB3iF,KAAKqY,eAAe5B,SAASvR,UAAU,WAC9DrF,EAAKuqC,WAAavqC,EAAKixB,aACzBjxB,EAAKixB,YAAY6/C,YAAY19D,MAAOpT,EAAK4lF,uBAS7CzlF,KAAK8wB,cAAgB9wB,KAAK8wB,YAAYnb,gBACxC3V,KAAK8wB,YAAYlb,OAAO5V,KAAKmyC,SAC7BnyC,KAAK2jF,4BAA8B3jF,KAAK6kF,6BAG1C,IAAMa,GAAU1lF,KAAKoqC,SAErBpqC,MAAKkjF,aAAa3B,iBAClBvhF,KAAKkjF,aAAaQ,QAAU1jF,KAAKgjF,kBAAmB,EAIhDhjF,KAAKoqC,WAAas7C,IAAY1lF,KAAKoqC,WACrCpqC,KAAKkjF,aAAa9oD,OAAOljB,QAIrBorE,EAAV39E,UAAAq7C,6BACI,MAAO,IAAIvoB,GAAAA,eACTC,iBAAkB13B,KAAKyzC,sBACvBJ,eAAgBrzC,KAAKswC,kBACrBr9B,MAAOjT,KAAKylF,iBACZ52E,UAAW7O,KAAKmW,QAIZmsE,EAAV39E,UAAA8uC,+BAyBI,MAxBAzzC,MAAKglF,kBAAoBhlF,KAAK60B,SAASjhB,WACpC++B,oBAAoB3yC,KAAK2lF,wBACzB9yC,wBAAuB,GACvB2nB,UAAS,GACT9mB,gBAEGK,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVngB,WAAY,kCAIXl0B,KAAKglF,mBAGN1C,EAAV39E,UAAAghF,gCACI,MAAI3lF,MAAK4lF,YACA5lF,KAAK4lF,YAAYthF,WAGnBtE,KAAKu7D,WAAav7D,KAAKu7D,WAAWmC,4BAA8B19D,KAAKqkB,UAGtEi+D,EAAV39E,UAAA8gF,0BACI,MAAOzlF,MAAKkjF,aAAalB,YAAchiF,KAAK6lF,iBAItCvD,EAAV39E,UAAAkhF,yBACI,MAAO7lF,MAAK2lF,uBAAuBrlF,cAAcmuB,wBAAwBxb,OAOnEqvE,EAAV39E,UAAAs/E,4BACIjkF,KAAKkjF,aAAalqE,YAAYoC,cAAcpb,KAAKkjF,aAAanB,sBAAwB,GAAK,IAIrFO,EAAV39E,UAAA0/E,oBACI,GAAM/xE,GAAUtS,KAAKqkB,SAAS/jB,aAC9B,QAAQgS,EAAQsrD,WAAatrD,EAAQ3R,WAAaX,KAAKyiF,sCA5jB3DzjF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oDACV3F,MACEsnF,sBAAuB,wBACvBx+E,cAAe,2CACfy+E,2BAA4B,uCAC5Bj4C,+BAAgC,mBAChC1mC,uBAAwB,qDACxBumC,mBAAoB,iEAGpBq4C,YAAa,iBACb92D,SAAU,eACVqvC,UAAW,uBACXpvC,YAAa,0BAEfvtB,SAAU,yBACV2F,WAAY86E,4CA5FdrjF,KAAE0I,EAAAA,aAZF1I,KAAEm5B,EAAAA,UAqBFn5B,KAAEyH,EAAAA,mBAHFzH,KAAEC,EAAAA,SARFD,KAAEE,EAAAA,oBA8KFF,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAfZ,MAAsBugF,QA5LtBljF,KAAQge,EAAAA,eAARvb,aAAAzC,KA6LesD,EAAAA,aA1JftD,KAAQyvC,GAARhtC,aAAAzC,KA2JesD,EAAAA,WA3JftD,KA2J2BinF,EAAAA,SAC3BjnF,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkC0E,EAAAA,cApKlCrH,KAAQG,EAAAA,mCAqIR+jF,eAAAlkF,KAAGO,EAAAA,MAAHoC,MAAS,qBAMTikF,cAAA5mF,KAAGO,EAAAA,MAAHoC,MAAS,gCAMTohF,wBAAA/jF,KAAGO,EAAAA,MAAHoC,MAAS,kBAMTukF,uBAAAlnF,KAAGO,EAAAA,MAAHoC,MAAS,8BAzLT2gF,iC8HAA,sBAmBAtjF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAU0sC,GAAiBhb,EAAAA,cAAexxB,GAAiBD,EAAAA,cAC3DM,SACEk+E,GACA/xC,GACA+yC,GACAL,GACAl/E,IAEFU,cAAe69E,GAAiBgB,GAAwBL,IACxD16E,WAAY46E,QA7BdgE,KCwBIlpE,GAAS,EAIbmpE,GAAA,yBA5BA,MAAAA,MA8BaC,GAC8BzmF,EAAcwmF,mBAuFvD,QAAFE,GAC4C7hF,EAC9B0N,EACAjS,EACAmwC,EAEAk2C,GANZ,GAAF1mF,GAOQC,EAPRC,KAAAC,OAAAA,WAC4CH,GAA5C4E,UAA4CA,EAC9B5E,EAAdsS,QAAcA,EACAtS,EAAdK,YAAcA,EACAL,EAAdwwC,eAAcA,EAEAxwC,EAAd0mF,UAAcA,EApEZ1mF,EAAF2mF,aAAgB,EAShB3mF,EAAA4mF,OAAiC,UAQjC5mF,EAAA6mF,UAA8B,EAM5B7mF,EAAF+T,SAA0D,cAwBxD/T,EAAF0tB,KAA8C,SAW5C1tB,EAAF6jD,IAAgBzmC,OAlHhB,MAsD8BvY,GAA9B4hF,EAAAxmF,GAKE2L,OAAFC,eACM46E,EADN3hF,UAAA,aAAE,WAC4B,MAAO3E,MAAKymF,YACxC,SAAUxlF,GACRjB,KAAKq6D,UAAUp5D,GACfjB,KAAKymF,OAASxlF,mCAKhBwK,OAAFC,eACM46E,EADN3hF,UAAA,eAAE,WACyB,MAAO3E,MAAK0mF,cACrC,SAAYC,GACV3mF,KAAK0mF,SAAW1oE,EAAAA,sBAAsB2oE,oCAWxCl7E,OAAFC,eACM46E,EADN3hF,UAAA,eAAE,WACwB,MAAO3E,MAAK6V,cACpC,SAAY5U,GACVjB,KAAK6V,SAAW5U,EAChBjB,KAAKwmF,YAAuB,MAATvlF,IAAiB,GAAGA,GAAQ6E,OAAOX,OAAS,EAC/DnF,KAAK4mF,sDAKPn7E,OAAFC,eACM46E,EADN3hF,UAAA,mBAAE,WAC4B,MAAO3E,MAAK6mF,kBACxC,SAAgBC,GACVA,IAAmB9mF,KAAK6mF,eAC1B7mF,KAAK+mF,2BAA2BD,EAAgB9mF,KAAK6mF,cACrD7mF,KAAK6mF,aAAeC,oCASxBr7E,OAAFC,eACM46E,EADN3hF,UAAA,cAAE,WACwB,MAAO3E,MAAKgnF,aACpC,SAAWL,GACT3mF,KAAKgnF,QAAUhpE,EAAAA,sBAAsB2oE,oCAoBvCL,EAAF3hF,UAAAsiF,QAAE,WACE,OAA2C,IAApCjnF,KAAK4T,SAAShE,QAAQ,UAI/B02E,EAAF3hF,UAAAuiF,QAAE,WACE,OAA4C,IAArClnF,KAAK4T,SAAShE,QAAQ,WAG/B02E,EAAF3hF,UAAAsD,YAAE,WACMjI,KAAKmnF,aAAennF,KAAKonF,eAC3BpnF,KAAKqwC,eAAekB,kBAAkBvxC,KAAKonF,cAAepnF,KAAKmnF,cAK3Db,EAAV3hF,UAAAiiF,8BAMI,MALK5mF,MAAKonF,cAGRpnF,KAAKonF,cAAcvhF,YAAc7F,KAAKy2B,QAFtCz2B,KAAKonF,cAAgBpnF,KAAKqnF,sBAIrBrnF,KAAKonF,eAINd,EAAV3hF,UAAA0iF,+BAEI,GAAMC,GAAWtnF,KAAKumF,WAAavmF,KAAKyE,UAClC8iF,EAAeD,EAAShiD,cAAc,OAwB5C,OArBAiiD,GAAa1xB,aAAa,KAAM,qBAAqB71D,KAAK0jD,KAC1D6jC,EAAa/hF,UAAU2Y,IAAI,qBAC3BopE,EAAa1hF,YAAc7F,KAAKy2B,QAE5Bz2B,KAAKmnF,aACPI,EAAa1xB,aAAa,aAAc71D,KAAKmnF,aAG/CnnF,KAAKE,YAAYI,cAAcklC,YAAY+hD,GAGN,kBAA1B/0E,uBACTxS,KAAKmS,QAAQM,kBAAkB,WAC7BD,sBAAsB,WACpB+0E,EAAa/hF,UAAU2Y,IAhBT,wBAoBlBopE,EAAa/hF,UAAU2Y,IApBL,oBAuBbopE,GAIDjB,EAAV3hF,UAAAoiF,2BAAA,SAAqCD,EAAwBU,GAEzD,GAAM/wD,GAAUz2B,KAAK4mF,oBAEjBY,IACFxnF,KAAKqwC,eAAekB,kBAAkB9a,EAAS+wD,GAG7CV,GACF9mF,KAAKqwC,eAAeqB,SAASjb,EAASqwD,IAKlCR,EAAV3hF,UAAA01D,UAAA,SAAoBotB,GACZA,IAAiBznF,KAAKymF,SACpBzmF,KAAKymF,QACPzmF,KAAKE,YAAYI,cAAckF,UAAU0Y,OAAO,aAAale,KAAKymF,QAEhEgB,GACFznF,KAAKE,YAAYI,cAAckF,UAAU2Y,IAAI,aAAaspE,oBAzKlEzoF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,aACVtC,QAAS,8BACTrD,MACEC,MAAS,YACTipF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,yBAC5BC,6BAA8B,oDAoElCnpF,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0B0E,EAAAA,cAvG1BrH,KAAEC,EAAAA,SAHFD,KAAE0I,EAAAA,aALF1I,KAAQw1C,EAAAA,gBAWRx1C,KAAEopF,EAAAA,+BAwCFviC,QAAA7mD,KAAGO,EAAAA,MAAHoC,MAAS,mBAST0mF,UAAArpF,KAAGO,EAAAA,MAAHoC,MAAS,qBAWTiS,WAAA5U,KAAGO,EAAAA,MAAHoC,MAAS,sBAGT80B,UAAAz3B,KAAGO,EAAAA,MAAHoC,MAAS,cAUTwlF,cAAAnoF,KAAGO,EAAAA,MAAHoC,MAAS,yBAWT4rB,OAAAvuB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGT2mF,SAAAtpF,KAAGO,EAAAA,MAAHoC,MAAS,qBA1GT2kF,GAsD8BD,gCCtD9B,sBAcArnF,KAAC4D,EAAAA,SAADjB,OACEkB,SACEM,EAAAA,WACAJ,IAEFK,SAAUkjF,IACV7iF,cAAe6iF,QApBjBiC,KCYaC,GAAwB,GAAIz2E,GAAAA,eAAoB,sBAK7D02E,GAAA,wBAWEzoF,KAAF6H,KAAoB,KAGlB7H,KAAFg8C,aAA0B,EAMxBh8C,KAAFg+B,cAA2B,EAGzBh+B,KAAFuU,UAA8B,KAO5BvU,KAAF6uE,mBAAgC,EAG9B7uE,KAAF2uE,WAAwB,EAlDxB,MAAA8Z,MCkBaC,IAIXC,iBAAkBh0E,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgBjC,EAAAA,OAAOkC,UAAW,sBACxCD,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAWykB,GAAmBmvD,QADtC,IACiDjvD,GAAgBkvD,qBAC7D9zE,EAAAA,WAAW,kBACPC,EAAAA,QAAWykB,GAAmBqvD,QADtC,IACiDnvD,GAAgBovD,uCCyD/D,QAAFC,GACY9oF,EACAkY,EACAyhB,EACRovD,EAC8BzkF,EAEvB0kF,GAPT,GAAFrpF,GAQIC,EARJC,KAAAC,OAAAA,WACYH,GAAZK,YAAYA,EACAL,EAAZuY,mBAAYA,EACAvY,EAAZg6B,kBAAYA,EAIDh6B,EAAXqpF,kBAAWA,EAxBTrpF,EAAFwzB,gBAAmD,OAGjDxzB,EAAFwvE,uBAA2B,GAAI94D,GAAAA,aAM/B1W,EAAAspF,4BAA4D,KAkBxDtpF,EAAK4E,UAAYD,EACjB3E,EAAKupF,wBAA0BH,EAC5BjyD,SAASC,EAAAA,YAAYoyD,OAAQpyD,EAAAA,YAAYqyD,MAAOryD,EAAAA,YAAYsyD,SAC5DrkF,UAAU,WACTrF,EAAK2pF,aAAa,oCACdP,EAAmBQ,UAAUxyD,EAAAA,YAAYoyD,SAC7CxpF,EAAK2pF,aAAa,mCACdP,EAAmBQ,UAAUxyD,EAAAA,YAAYqyD,QAC7CzpF,EAAK2pF,aAAa,oCACdP,EAAmBQ,UAAUxyD,EAAAA,YAAYsyD,aAvCrD,MAJ6C7kF,GAA7CskF,EAAAlpF,GAgDEkpF,EAAFrkF,UAAA2uB,sBAAE,SAAyBC,GAIvB,MAHAvzB,MAAK0pF,0BACL1pF,KAAK2pF,iBACL3pF,KAAKwvE,gCACExvE,KAAK0zB,cAAcJ,sBAAsBC,IAIlDy1D,EAAFrkF,UAAAgvB,qBAAE,SAAwBJ,GAItB,MAHAvzB,MAAK0pF,0BACL1pF,KAAK2pF,iBACL3pF,KAAKwvE,gCACExvE,KAAK0zB,cAAcC,qBAAqBJ,IAIjDy1D,EAAFrkF,UAAAovB,MAAE,WACO/zB,KAAKwY,aACRxY,KAAKqzB,gBAAkB,UACvBrzB,KAAKoY,mBAAmB8S,kBAK5B89D,EAAFrkF,UAAA6sB,KAAE,WACOxxB,KAAKwY,aACRxY,KAAKqzB,gBAAkB,SACvBrzB,KAAKoY,mBAAmBxB,iBAI5BoyE,EAAFrkF,UAAAsD,YAAE,WACEjI,KAAKopF,wBAAwBr4E,cAC7B/Q,KAAKwY,YAAa,GAGpBwwE,EAAFrkF,UAAAi5C,iBAAE,SAAiBt8C,GACO,WAAlBA,EAAM2V,QACRjX,KAAKw6B,gBACsB,YAAlBl5B,EAAM2V,SAAyBjX,KAAKkpF,kBAAkBva,WAC/D3uE,KAAKu6B,aAGPv6B,KAAKqvE,uBAAuBn4D,KAAK5V,IAGnC0nF,EAAFrkF,UAAA+qE,kBAAE,SAAkBpuE,GAChBtB,KAAKqvE,uBAAuBn4D,KAAK5V,IAG3B0nF,EAAVrkF,UAAA6kF,aAAA,SAAuBr1D,EAAkBhW,GACrC,GAAM3Y,GAAYxF,KAAKE,YAAYI,cAAckF,SACjD2Y,GAAM3Y,EAAU2Y,IAAIgW,GAAY3uB,EAAU0Y,OAAOiW,IAG3C60D,EAAVrkF,UAAA+kF,mCACI,GAAI1pF,KAAK0zB,cAAc/d,cACrB,KAAMye,OAAM,gFAIR40D,EAAVrkF,UAAAglF,0BACI,GAAMr3E,GAAuBtS,KAAKE,YAAYI,cACxC4zB,EAAal0B,KAAKkpF,kBAAkBh1D,UAEtCpqB,OAAMC,QAAQmqB,GAEhBA,EAAW9pB,QAAQ,SAAA+pB,GAAY,MAAA7hB,GAAQ9M,UAAU2Y,IAAIgW,KAC5CD,GACT5hB,EAAQ9M,UAAU2Y,IAAI+V,IAMlB80D,EAAVrkF,UAAA41B,sBACSv6B,KAAKs6B,aACRt6B,KAAKs6B,WAAat6B,KAAK65B,kBAAkB3B,OAAOl4B,KAAKE,YAAYI,gBAGnEN,KAAKs6B,WAAWS,gCAIViuD,EAAVrkF,UAAA61B,yBACI,GAAMi1C,GAAUzvE,KAAKmpF,2BAGjB1Z,IAAoC,kBAAlBA,GAAQ53D,OAC5B43D,EAAQ53D,QAGN7X,KAAKs6B,YACPt6B,KAAKs6B,WAAWiB,WAKZytD,EAAVrkF,UAAA6qE,mDACIxvE,MAAKmpF,4BAA8BnpF,KAAKyE,UAAsC,cAG1EzE,KAAKE,YAAYI,cAAcuX,OACjCtG,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAKK,YAAYI,cAAcuX,0BA1KlE7Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,6BACE8B,SAAU,8CACVC,QAAF,0nBACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE2Y,YAAFmxE,GAAAC,kBACEnqF,MACFC,MAAe,6BACTsrD,SAAN,KACI7iD,KAAJ,SACI0oE,aAAJ,OACIriC,oBAAJ,+BACIlZ,WAAY,kBACZu1D,iBAAJ,4BACIt1D,gBAAJ,mHA1CAt1B,KAAE6qF,EAAAA,mBAGF7qF,KAAEs5B,EAAAA,qBAiBFt5B,SAAmBqD,GAAnBZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cALArH,KAAQypF,MACRO,EAAA3pF,6EAmCA2pF,mDCjEA,sBAgBAhqF,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAyxB,EAAAA,cACAxxB,GACAC,EAAAA,cAEFI,SAAU4lF,GAAyBjmF,IACnCU,cAAeulF,IACfx0D,iBAAkBw0D,QAzBpBc,KCmBAC,GAAA,WAmBE,QAAFA,GACIl5D,EACQC,EAERo/C,GAJF,GAAFrwE,GAAAG,IAEYA,MAAZ8wB,YAAYA,EAVZ9wB,KAAA+wB,gBAAqC,GAAIpd,GAAAA,QAGzC3T,KAAAgxB,aAAkC,GAAIrd,GAAAA,QAUlC3T,KAAK6wB,kBAAoBA,EAGzBA,EAAkBw+C,uBAAuBplE,KACvC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM0gE,WAA0C,YAAlB1gE,EAAM2V,UACpD/M,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKmxB,aAAarlB,OAClB9L,EAAKmxB,aAAa/c,aAIpB4c,EAAkBw+C,uBAAuBplE,KACvC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM0gE,WAA0C,WAAlB1gE,EAAM2V,UACpD/M,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKixB,YAAYmB,UACjBpyB,EAAKkxB,gBAAgBplB,KAAK9L,EAAKwwE,SAC/BxwE,EAAKkxB,gBAAgB9c,aAGlB4c,EAAkBq4D,kBAAkBlrD,cACvC/xB,EAAAA,MACE6kB,EAAY4L,gBACZ5L,EAAYypC,gBAAgBtwD,KAAK3E,EAAAA,OAAO,SAAAhE,GAAS,MAAAA,GAAMsY,UAAY24B,EAAAA,WACnErtC,UAAU,WAAM,MAAArF,GAAKuxB,YAtE7B,MA8EE24D,GAAFplF,UAAAysB,QAAE,SAAQu2B,GAAR,GAAF9nD,GAAAG,IACSA,MAAK+wB,gBAAgBQ,SAExBvxB,KAAK6wB,kBAAkBw+C,uBAAuBplE,KAC5C3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,UAApBA,EAAM0gE,YACtB93D,EAAAA,KAAK,IACLhF,UAAU,WAAM,MAAArF,GAAKixB,YAAYy/C,mBAEnCvwE,KAAKqwE,QAAU1oB,EACf3nD,KAAK6wB,kBAAkBW,SAK3Bu4D,EAAFplF,UAAAwtB,eAAE,WACE,MAAOnyB,MAAK+wB,gBAAgBqB,gBAI9B23D,EAAFplF,UAAA0tB,YAAE,WACE,MAAOryB,MAAKgxB,aAAaoB,gBAM3B23D,EAAFplF,UAAA+3B,cAAE,WACE,MAAO18B,MAAK8wB,YAAY4L,iBAM1BqtD,EAAFplF,UAAA41D,cAAE,WACE,MAAOv6D,MAAK8wB,YAAYypC,iBAhH5BwvB,mBCyCE,QAAFC,GACcn1D,EACAE,EACwBk1D,EACZ/Z,GAHZlwE,KAAd60B,SAAcA,EACA70B,KAAd+0B,UAAcA,EACwB/0B,KAAtCiqF,mBAAsCA,EACZjqF,KAA1BkwE,UAA0BA,EApB1BlwE,KAAAkqF,2BAAsE,KAzBtE,MA4BEz+E,QAAFC,eAAMs+E,EAANrlF,UAAA,6BAAE,WACE,GAAMywB,GAASp1B,KAAKiqF,kBACpB,OAAO70D,GAASA,EAAO+0D,sBAAwBnqF,KAAKkqF,gCAGtD,SAA0BjpF,GACpBjB,KAAKiqF,mBACPjqF,KAAKiqF,mBAAmBE,sBAAwBlpF,EAEhDjB,KAAKkqF,2BAA6BjpF,mCAetC+oF,EAAFrlF,UAAAgxB,KAAE,SAA0Bi8C,EACTp8C,GADjB,GAAF31B,GAAAG,KAGU61B,EAAUg8C,EAAqBr8C,GAC/BQ,EAAah2B,KAAK22B,eAAed,GACjCe,EAAY52B,KAAKoqF,iBAAiBp0D,EAAYH,GAC9Cw0D,EAAM,GAAIN,IAAwBnzD,EAAWZ,EAAYh2B,KAAKkwE,UAEpE,IAAI0B,YAAkC1+D,GAAAA,YACpC0jB,EAAUjD,qBAAqB,GAAIxf,GAAAA,eAAkBy9D,EAAsB,MACzE/6C,UAAWhB,EAAQhuB,KACnByiF,eAAgBD,SAEb,CACL,GAAM92D,GAAS,GAAI+C,GAAAA,gBAAgBs7C,MAAwBvvE,GACrDrC,KAAK82B,gBAAgBjB,EAASw0D,IAC9BtzD,EAAaH,EAAUtD,sBAAsBC,EACnD82D,GAAI7zD,SAAWO,EAAWP,SAuB5B,MAnBA6zD,GAAIl4D,iBAAiBjtB,UAAU,WAEzBrF,EAAKsqF,uBAAyBE,IAChCxqF,EAAKsqF,sBAAwB,QAI7BnqF,KAAKmqF,uBAGPnqF,KAAKmqF,sBAAsBh4D,iBAAiBjtB,UAAU,WAAM,MAAAmlF,GAAIx5D,kBAAkBkD,UAClF/zB,KAAKmqF,sBAAsB/4D,WAG3Bi5D,EAAIx5D,kBAAkBkD,QAGxB/zB,KAAKmqF,sBAAwBE,EAEtBA,GAMTL,EAAFrlF,UAAAysB,QAAE,WACMpxB,KAAKmqF,uBACPnqF,KAAKmqF,sBAAsB/4D,WAOvB44D,EAAVrlF,UAAAylF,iBAAA,SAA2Bp0D,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW,GAAIqB,WACrEqyD,GAAsBjzD,MAGnBa,EACF,GAAIC,GAAAA,gBAAgB0yD,GAAyBxzD,EAAOtgB,iBAAkBghB,EAE1E,OAD4DF,GAAWpgB,OAAOygB,GAC1DG,UAOdwzD,EAAVrlF,UAAAgyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,eACxB5oB,UAAW2mB,EAAO3mB,UAClBmtC,YAAaxmB,EAAOwmB,YACpBy2B,oBAAqBj9C,EAAOq5C,kBAC5BJ,SAAU,OACVp7B,eAAgBrzC,KAAK60B,SAAS01D,iBAAiBC,QAC/C9yD,iBAAkB13B,KAAK60B,SAASjhB,WAC7B+jB,SACAK,qBACAC,OAAO,MAOZ,OAJIzC,GAAOomB,gBACTpkB,EAAcokB,cAAgBpmB,EAAOomB,eAGhC57C,KAAK60B,SAASqD,OAAOV,IAQtBwyD,EAAVrlF,UAAAmyB,gBAAA,SAA6BtB,EACA80D,GAEzB,GAAMr0D,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5Ew8C,EAAkB,GAAIt8C,WACzB2zD,GAAmBO,IACnB9B,GAAuBhzD,EAAO3tB,OAWjC,QARI2tB,EAAO3mB,WACLonB,GAAiBA,EAAal1B,IAA2Bic,EAAAA,eAAgB,OAC7E01D,EAAgBx5C,IAAIlc,EAAAA,gBAClB/b,MAAOu0B,EAAO3mB,UACd4H,OAAQtG,EAAAA,OAIL,GAAIgmB,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW29C,mBAhJ9D1zE,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY83E,2CAdzB9qF,KAAQm5B,EAAAA,UAERn5B,KAAkCq5B,EAAAA,WAiClCr5B,KAA0DgrF,EAA1DvoF,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBmiB,EAAAA,aAhCnBniB,KAAQm0E,EAAAA,SAAR1xE,aAAAzC,KAiCOsD,EAAAA,6LA7CP0nF,KjBoCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBzqF,GAAAF,KAArBE,YAAqBA,EAvDrB,MAAAyqF,MA0DaC,GAEL1mF,EAAWtE,EAAcD,EAAmBgrF,qBAiClD,QAAF1M,GAAc35E,EAMQC,EACApE,EAE0Cs8B,GAT9D,GAAF58B,GAUIC,EAVJC,KAAAC,KAUUsE,IAVVtE,IAMsBH,GAAtB0E,UAAsBA,EACA1E,EAAtBM,cAAsBA,EAE0CN,EAAhE48B,eAAgEA,EAjB9D58B,EAAFgrF,cAAoChrF,EAAKirF,mBAAmB,UAAW,gBAGrEjrF,EAAFkrF,aAAmClrF,EAAKirF,mBAAmB,kBAmBvD,KAAmB,GAAvBvgC,GAAA,EAAuBygC,EAAvBN,GAAuBngC,EAAvBygC,EAAA7lF,OAAuBolD,IAAwB,CAAtC,GAAMowB,GAAfqQ,EAAAzgC,EACU1qD,GAAKirF,mBAAmBnQ,IACzBr2E,EAAuC,cAAEkB,UAAU2Y,IAAIw8D,SAI5D96E,GAAKM,cAAcW,QAAQjB,EAAKK,aAAa,GAEzCL,EAAKgrF,gBACPhrF,EAAKgmD,MAAQ4kC,MAzBnB,MAV+B/lF,GAA/Bu5E,EAAAn+E,GAuCEm+E,EAAFt5E,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzC+9E,EAAFt5E,UAAAkT,MAAE,WACE7X,KAAK0kB,kBAAkB7M,SAGzBomE,EAAFt5E,UAAA+f,gBAAE,WACE,MAAO1kB,MAAKE,YAAYI,eAG1B29E,EAAFt5E,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAIpCs9E,EAAFt5E,UAAAmmF,mBAAE,WAAF,IAAqB,GAArBjrF,GAAAG,KAAAirF,KAAA1gC,EAAA,EAAqBA,EAArB39C,UAAAzH,OAAqBolD,IAAA0gC,EAArB1gC,GAAA39C,UAAA29C,EACI,OAAO0gC,GAAWrlF,KAAK,SAAAslF,GAAa,MAAArrF,GAAK6kB,kBAAkB8mC,aAAa0/B,qBA1E5ElsF,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iMACEvC,SAAU,YACVpD,MAGF8/D,aAAA,mBACMhuC,kCAAN,uCAEArqB,SAAA,mVACAC,QAAA;08LACErE,QAAF,WAAA,gBAAA,SACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhEAC,KAAE2D,EAAAA,eAJF3D,KAAQyD,OAAQhB,aAAhBzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,4BA6FA0tD,EAAA5+E,uDAXA4+E,uCAgFE95C,+FASFnkC,KAAAW,8BAEQW,EAAR48E,6BAGAC,EAAA18E,aACAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,gLAxCA3F,MAKM+jC,kBAAN,4JAIIjS,kCAAJ,uCAEAzuB,QAAA,WAAA,gBAAA,SACAoE,SAAA,mVACAC,QAAA,k8LACAxH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAo/E,EAAAp3D,eAAA,WAAA,QACA/nB,KAAAoD,EAAAA,kJA9JA+7E,EAAA9+E,gBAKAkB,WAAAvB,KAAAO,EAAAA,4CCbA,sBAcAP,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAG,GACAF,IAEFK,SACE66E,GACAE,GACAp7E,IAEFU,cACEw6E,GACAE,QA3BJ52D,KC2Da62D,GACT,GAAIrsE,GAAAA,eAA8C,qCASzCssE,IACX72E,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAqoE,MAC9Bn+C,OAAO,GAOTo+C,GAAA,yBA/EA,MAAAA,MAiFIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEWnwD,EAGArtB,GAHAjB,KAAXsuB,OAAWA,EAGAtuB,KAAXiB,MAAWA,EA1FX,MAAAw9E,oBAgNE,QAAFH,GACY93C,EAEJk4C,GAFI1+E,KAAZwmC,gBAAYA,EAnGZxmC,KAAA4pB,WAAsB,EACtB5pB,KAAAkiD,WAAsB,EACtBliD,KAAA6mC,WAAsB,EAepB7mC,KAAF6tB,8BAAwD,aAGtD7tB,KAAFyiD,WAA0B,aAkB1BziD,KAAAymC,MAAkB,2BAA2B+3C,KA8B3Cx+E,KAAF8tB,YAAmC,GAAIvX,GAAAA,aA2BrCvW,KAAFyW,OACM,GAAIF,GAAAA,aAOJvW,KAAK2+E,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,WAtNpF,MA2IElzE,QAAFC,eACM4yE,EADN35E,UAAA,YAAE,WACqB,MAAO3E,MAAKymC,WACjC,SAASxlC,GAAT,GAAFpB,GAAAG,IACIA,MAAKymC,MAAQxlC,EAETjB,KAAK4+E,gBACP5+E,KAAK4+E,eAAex0E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAO/e,KAAOziB,EAAK4mC,yCAM7Dh7B,OAAFC,eACM4yE,EADN35E,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4pB,eACtC,SAAa3oB,GACXjB,KAAK4pB,UAAY5L,EAAAA,sBAAsB/c,oCAIzCwK,OAAFC,eACM4yE,EADN35E,UAAA,aAAE,WAEE,GAAMmgB,GAAW9kB,KAAKgrC,gBAAkBhrC,KAAKgrC,gBAAgBlmB,WAE7D,OAAI9kB,MAAK8qC,SACAhmB,EAAS3Y,IAAI,SAAAk1B,GAAU,MAAAA,GAAOpgC,QAGhC6jB,EAAS,GAAKA,EAAS,GAAG7jB,UAAQoB,QAE3C,SAAU2iC,GACRhlC,KAAKwkD,qBAAqBxf,GAC1BhlC,KAAK8tB,YAAY5W,KAAKlX,KAAKiB,wCAW7BwK,OAAFC,eAAM4yE,EAAN35E,UAAA,gBAAE,WACE,GAAMmgB,GAAW9kB,KAAKgrC,gBAAgBlmB,QACtC,OAAO9kB,MAAK8qC,SAAWhmB,EAAYA,EAAS,IAAM,sCAIpDrZ,OAAFC,eACM4yE,EADN35E,UAAA,gBAAE,WAC0B,MAAO3E,MAAKkiD,eACtC,SAAajhD,GACXjB,KAAKkiD,UAAYlkC,EAAAA,sBAAsB/c,oCAIzCwK,OAAFC,eACM4yE,EADN35E,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,GAEnCjB,KAAK4+E,gBACP5+E,KAAK4+E,eAAex0E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAOiG,mDAiBjDg3C,EAAF35E,UAAAuP,SAAE,WACElU,KAAKgrC,gBAAkB,GAAI2Y,GAAAA,eAAgC3jD,KAAK8qC,aAAUzoC,IAAW,IAGvFi8E,EAAF35E,UAAAqD,mBAAE,kBACEyI,EAAAzQ,KAAKgrC,iBAAgB+Y,OAAzB73C,MAAAuE,EAAmCzQ,KAAK4+E,eAAet5E,OAAO,SAAA+7B,GAAU,MAAAA,GAAOhB,YAO7Ei+C,EAAF35E,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKiB,MAAQA,EACbjB,KAAKwmC,gBAAgB5vB,gBAIvB0nE,EAAF35E,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAK6tB,8BAAgCe,GAIvC0vD,EAAF35E,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GAIpB0vD,EAAF35E,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,GAIlBuvD,EAAF35E,UAAAqnB,iBAAE,WACE,GAAMlH,GAAW9kB,KAAK8kB,SAChBwJ,EAASxkB,MAAMC,QAAQ+a,GAAYA,EAASA,EAAS3f,OAAS,GAAK2f,EACnExjB,EAAQ,GAAIm9E,IAAqB,EAAUz+E,KAAKiB,MACtDjB,MAAK6tB,8BAA8BvsB,EAAML,OACzCjB,KAAKyW,OAAOS,KAAK5V,IASnBg9E,EAAF35E,UAAAk6E,kBAAE,SAAkBx9C,EAAyB0iB,EAAiB+C,OAA9D,KAAAA,IAA8DA,GAA9D,GAGS9mD,KAAK8qC,WAAY9qC,KAAK8kB,UAAauc,EAAOhB,UAC5CrgC,KAAgC,SAAEqgC,SAAU,GAG3C0jB,EACF/jD,KAAKgrC,gBAAgB+Y,OAAO1iB,GAE5BrhC,KAAKgrC,gBAAgBiZ,SAAS5iB,GAI5BylB,GACF9mD,KAAKgsB,mBAKPhsB,KAAK8tB,YAAY5W,KAAKlX,KAAKiB,QAI7Bq9E,EAAF35E,UAAAm6E,YAAE,SAAYz9C,GACV,MAAOrhC,MAAKgrC,gBAAgBic,WAAW5lB,IAIzCi9C,EAAF35E,UAAAo6E,cAAE,SAAc19C,GACZ,WAA8B,KAAnBrhC,KAAKg/E,YAIZh/E,KAAK8qC,UAAYhhC,MAAMC,QAAQ/J,KAAKg/E,WAC/Bh/E,KAAKg/E,UAAUp5E,KAAK,SAAA3E,GAAS,MAAgB,OAAhBogC,EAAOpgC,OAAiBA,IAAUogC,EAAOpgC,QAGxEogC,EAAOpgC,QAAUjB,KAAKg/E,YAIvBV,EAAV35E,UAAA6/C,qBAAA,SAA+BvjD,aAG3B,IAFAjB,KAAKg/E,UAAY/9E,EAEZjB,KAAK4+E,eAIV,GAAI5+E,KAAK8qC,UAAY7pC,EAAO,CAC1B,IAAK6I,MAAMC,QAAQ9I,GACjB,KAAMmzB,OAAM,qDAGdp0B,MAAK68E,kBACL57E,EAAMmJ,QAAQ,SAAC87C,GAAsB,MAAArmD,GAAKsmD,aAAaD,SAEvDlmD,MAAK68E,kBACL78E,KAAKmmD,aAAallD,IAKdq9E,EAAV35E,UAAAk4E,2BACI78E,KAAKgrC,gBAAgB8G,QACrB9xC,KAAK4+E,eAAex0E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAOhB,SAAU,KAIjDi+C,EAAV35E,UAAAwhD,aAAA,SAAuBllD,GACnB,GAAMolD,GAAsBrmD,KAAK4+E,eAAev+D,KAAK,SAAAghB,GACnD,MAAuB,OAAhBA,EAAOpgC,OAAiBogC,EAAOpgC,QAAUA,GAG9ColD,KACFA,EAAoBhmB,SAAU,EAC9BrgC,KAAKgrC,gBAAgB+Y,OAAOsC,oBAtPlCrnD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,0BACVoD,WACE82E,IACC72E,QAAS+2E,GAA8B92E,YAAa62E,IAEvD9/E,MACE0I,KAAQ,QACRzI,MAAS,0BACTsD,uBAAwB,WACxBk9E,qCAAsC,WACtCC,sDAAuD,6BAEzDt9E,SAAU,+DA5FZ5C,KAAEE,EAAAA,oBAmMFF,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBy8E,2BA7ExBQ,iBAAA5/E,KAAGoJ,EAAAA,gBAAHzG,MAAmBsU,EAAAA,WAAW,WAAM,MAAAkpE,SAGpCR,aAAA3/E,KAAGO,EAAAA,QAGH+iB,OAAAtjB,KAAGO,EAAAA,QAYH2qB,WAAAlrB,KAAGO,EAAAA,QAOH0B,QAAAjC,KAAGO,EAAAA,QAoBHuuB,cAAA9uB,KAAGwY,EAAAA,SASHszB,WAAA9rC,KAAGO,EAAAA,QAOHoB,WAAA3B,KAAGO,EAAAA,QAWHkX,SAAAzX,KAAGwY,EAAAA,UA7MH8mE,KA2VAc,GAAA,yBA3VA,MAAAA,MA4VaC,GACT1/E,EAAmBy/E,mBAwGrB,QAAFD,GAA0BG,EACJlnE,EACAlY,EACAC,EAEe0+D,EAEnB6f,GAPhB,GAAF7+E,GAQIC,EARJC,KAAAC,OAAAA,IACsBH,GAAtBuY,mBAAsBA,EACAvY,EAAtBK,YAAsBA,EACAL,EAAtBM,cAAsBA,EAjFtBN,EAAA0/E,mBAA8B,EAC9B1/E,EAAAghC,UAAqB,EAWnBhhC,EAAF2U,eAA4D,KA4D5D3U,EAAAgnC,WAA+B,EAG7BhnC,EAAF4W,OACM,GAAIF,GAAAA,YAYN,IAAMuoD,GAAiB33D,OAAO03D,SAC9Bh/D,GAAKU,SAAYu+D,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5Ej/D,EAAK2/E,kBAAoBF,EACzBz/E,EAAK8+E,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,aAjBlF,MA9EqCj6E,GAArCy6E,EAAAr/E,GA0BE2L,OAAFC,eAAMyzE,EAANx6E,UAAA,gBAAE,WAAyB,MAAU3E,MAAK8gB,GAA1C,2CAeErV,OAAFC,eACMyzE,EADNx6E,UAAA,kBAAE,WAEE,MAAO3E,MAAKw/E,kBAAoBx/E,KAAKw/E,kBAAkBb,WAAa3+E,KAAKy/E,iBAE3E,SAAex+E,GACbjB,KAAKy/E,YAAcx+E,mCAKrBwK,OAAFC,eACMyzE,EADNx6E,UAAA,eAAE,WAEE,MAAO3E,MAAKw/E,kBAAoBx/E,KAAKw/E,kBAAkBV,YAAY9+E,MAAQA,KAAK6gC,cAElF,SAAY5/B,GACV,GAAM+jC,GAAWhnB,EAAAA,sBAAsB/c,EAEnC+jC,KAAahlC,KAAK6gC,WACpB7gC,KAAK6gC,SAAWmE,EAEZhlC,KAAKw/E,mBACPx/E,KAAKw/E,kBAAkBX,kBAAkB7+E,KAAMA,KAAK6gC,UAGtD7gC,KAAKoY,mBAAmBxB,iDAK5BnL,OAAFC,eACMyzE,EADNx6E,UAAA,gBAAE,WAEE,MAAO3E,MAAK6mC,WAAc7mC,KAAKw/E,mBAAqBx/E,KAAKw/E,kBAAkB7+E,cAE7E,SAAaM,GAAkBjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,oCAwBtEk+E,EAAFx6E,UAAAuP,SAAE,WACElU,KAAKu/E,kBAAoBv/E,KAAKw/E,oBAAsBx/E,KAAKw/E,kBAAkB10C,SAC3E9qC,KAAKg1E,MAAQh1E,KAAKu/E,kBAAoB,QAAU,WAChDv/E,KAAK8gB,GAAK9gB,KAAK8gB,IAAM,qBAAqB09D,KAEtCx+E,KAAKu/E,oBACPv/E,KAAKsiB,KAAOtiB,KAAKw/E,kBAAkBl9D,MAGjCtiB,KAAKw/E,mBAAqBx/E,KAAKw/E,kBAAkBT,cAAc/+E,QACjEA,KAAKqgC,SAAU,GAGjBrgC,KAAKG,cAAcW,QAAQd,KAAKE,aAAa,IAG/Ci/E,EAAFx6E,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCi/E,EAAFx6E,UAAAkT,MAAE,WACE7X,KAAK0/E,eAAep/E,cAAcuX,SAIpCsnE,EAAFx6E,UAAAg7E,eAAE,WACE,GAAMC,KAAa5/E,KAAKu/E,oBAA4Bv/E,KAAK6gC,QAErD++C,KAAe5/E,KAAK6gC,WACtB7gC,KAAK6gC,SAAW++C,EACZ5/E,KAAKw/E,oBACPx/E,KAAKw/E,kBAAkBX,kBAAkB7+E,KAAMA,KAAK6gC,UAAU,GAC9D7gC,KAAKw/E,kBAAkB/8B,eAI3BziD,KAAKyW,OAAOS,KAAK,GAAIunE,IAAsBz+E,KAAMA,KAAKiB,SAQxDk+E,EAAFx6E,UAAA2iC,cAAE,WAGEtnC,KAAKoY,mBAAmBxB,+BAtK5B5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACE8B,SAAU,ykBACVC,QAAF,glFACExH,cAAFC,EAAAA,kBAAmCC,KACjCgD,SAAF,kBACE/C,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,iBACErD,MACFqhF,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCC,gDAAJ,4BACIvhF,MAAJ,oBAEI8jC,kBAAJ,qIAuFAvjC,KAAuC0I,EAAAA,aAtbvC1I,KAAE2D,EAAAA,eAIF3D,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAXA3C,SAAQqD,GAARZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAy8E,SAmcAe,EAAA9/E,wHA7EAqgF,iBAAA1gF,KAAQsV,EAAAA,UAAR3S,MAAA,YAKAmf,KAAA9hB,KAAAO,EAAAA,QAKA+iB,OAAAtjB,KAAAO,EAAAA,QASA0B,QAAAjC,KAAAO,EAAAA,QAGAgB,WAAAvB,KAAAO,EAAAA,QAGAo/E,aAAA3/E,KAAQO,EAAAA,QAGR8gC,UAAArhC,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAUAkX,SAAAzX,KAAAwY,EAAAA,UA2BA2nE,mCClcA,sBAaAngF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBE,IAC3BG,SAAUL,GAAiBu7E,GAAsBa,IACjD17E,cAAe66E,GAAsBa,QAhBvCc,iCCAA,sBAqBAjhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACV3F,MAAOC,MAAS,wBAvBlByhF,iCAAA,sBA+BAlhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mDACV3F,MACEC,MAAS,sBAlCb0hF,iCAAA,sBA2CAnhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4DACV3F,MACEC,MAAS,yBA9Cb2hF,gCAiEEpgF,KAAFqgF,MAAoC,QAjEpC,sBAuDArhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACVvC,SAAU,iBACVpD,MACEC,MAAS,mBACT6hF,qCAAsC,yCAK1CD,QAAArhF,KAAGO,EAAAA,SAjEHghF,iCAAA,sBAwEAvhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACV3F,MAAOC,MAAS,uBA1ElB+hF,iCAAA,sBAkFAxhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mCACV3F,MAAOC,MAAS,sBApFlBgiF,iCAAA,sBA4FAzhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2CACV3F,MAAOC,MAAS,yBA9FlBiiF,iCAAA,sBAsGA1hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4CACV3F,MAAOC,MAAS,yBAxGlBkiF,iCAAA,sBAgHA3hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2CACV3F,MAAOC,MAAS,yBAlHlBmiF,iCAAA,sBA0HA5hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4CACV3F,MAAOC,MAAS,yBA5HlBoiF,iCAAA,sBAoIA7hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qCACV3F,MAAOC,MAAS,uBAtIlBqiF,iCA+JA,sBATA9hF,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACEvC,SAAU,UACVqE,SAAU,8EACVC,QAAF,01EACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MAAFC,MAAA,gBAGAsiF,iCAcA,yWALAriF,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEP,MAAQC,MAAV,uBAGAuiF,iCAcA,0YAHAxiF,MAAAC,MAAA,4BAGAwiF,iCC3LA,sBA4BAjiF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SACE29E,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACA/9E,IAEFU,cACEs9E,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBa5H,GACT,GAAIvnE,GAAAA,eAAuC,6BX0B3CguB,GAAe,EAKf84C,GAAyB,EAOhBQ,IACX7xE,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAA2hE,MAC9Bz3C,OAAO,OASPu3C,KAAF,EAEEQ,QAAF,EAEEC,UAAF,EAEEF,cAAF,EANAR,IAAAA,GAAEC,MAAF,OAEAD,GAAAA,GAAES,SAAF,UAEAT,GAAAA,GAAEU,WAAF,YAEAV,GAAAA,GAAEQ,eAAF,eAIA,IAAAS,IAAA,yBAnFA,MAAAA,MA4FAyI,GAAA,WACE,QAAFA,GAAqBjhF,GAAAF,KAArBE,YAAqBA,EA7FrB,MAAAihF,MA+FaC,GAML1hF,EAAcwE,EAAWvE,EAAmBC,EAAcuhF,KAAmB,0BA8FnF,QAAFvJ,GAActzE,EACQ8T,EACAjY,EACAgS,EACe5R,EAEX82E,EACsC56C,GAP9D,GAAF58B,GAQIC,EARJC,KAAAC,KAQUsE,IARVtE,WACsBH,GAAtBuY,mBAAsBA,EACAvY,EAAtBM,cAAsBA;kBACAN,EAAtBsS,QAAsBA,EAGItS,EAA1Bw3E,aAA0BA,EACsCx3E,EAAhE48B,eAAgEA,EA9D9D58B,EAAF0U,UAA2C,GAKzC1U,EAAF2U,eAA4D,KAE5D3U,EAAA8gC,UAA8B,mBAAkBZ,GAG9ClgC,EAAFihB,GAAwBjhB,EAAK8gC,UAY3B9gC,EAAF+mB,cAA+C,QAG7C/mB,EAAFyiB,KAAiC,KAG/BziB,EAAF4W,OACM,GAAIF,GAAAA,aAGR1W,EAAFy3E,oBAAkE,GAAI/gE,GAAAA,aAepE1W,EAAF4iD,WAA0B,aAE1B5iD,EAAA03E,uBAA2C,GAE3C13E,EAAA23E,mBAAqDC,GAAqBC,KAE1E73E,EAAAguB,8BAAgE,aA6ChEhuB,EAAAghC,UAA8B,EAc9BhhC,EAAAgnC,WAA+B,EAwB/BhnC,EAAA83E,gBAAoC,EAvEhC93E,EAAKU,SAAWC,SAASD,IAAa,EAEtCV,EAAKM,cAAcW,QAAQwD,GAAY,GAAMY,UAAU,SAAA+7B,GAChDA,GAMH1vB,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAK4iD,mBA8C1C,MA/HiC/9C,GAAjCkzE,EAAA93E,GAoBE2L,OAAFC,eAAMksE,EAANjzE,UAAA,eAAE,WAAwB,OAAU3E,KAAK8gB,IAAM9gB,KAAK2gC,WAApD,0CAGEl1B,OAAFC,eACMksE,EADNjzE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAAkBjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,oCA6DtE22E,EAAFjzE,UAAAkzE,mBAAE,WACE73E,KAAK83E,0BAGPF,EAAFjzE,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAMzCuL,OAAFC,eACMksE,EADNjzE,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACNA,GAASjB,KAAKqgC,UAChBrgC,KAAK6gC,SAAW5/B,EAChBjB,KAAKoY,mBAAmBxB,iDAS5BnL,OAAFC,eACMksE,EADNjzE,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GACPA,GAASjB,KAAKW,WAChBX,KAAK6mC,UAAY5lC,EACjBjB,KAAKoY,mBAAmBxB,iDAW5BnL,OAAFC,eACMksE,EADNjzE,UAAA,qBAAE,WAC+B,MAAO3E,MAAK23E,oBAC3C,SAAkB12E,GAChB,GAAM82E,GAAU92E,GAASjB,KAAK23E,cAC9B33E,MAAK23E,eAAiB12E,EAElB82E,IACE/3E,KAAK23E,eACP33E,KAAKg4E,sBAAsBP,GAAqBQ,eAEhDj4E,KAAKg4E,sBACHh4E,KAAKqgC,QAAUo3C,GAAqBS,QAAUT,GAAqBU,WAEvEn4E,KAAKs3E,oBAAoBpgE,KAAKlX,KAAK23E,kDAKvCC,EAAFjzE,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAIpCi3E,EAAFjzE,UAAA09B,mBAAE,WAMEriC,KAAKoY,mBAAmB8S,iBAI1B0sD,EAAFjzE,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKqgC,UAAYp/B,GAInB22E,EAAFjzE,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAK6tB,8BAAgCe,GAIvCgpD,EAAFjzE,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GAIpBgpD,EAAFjzE,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,GAGlB6oD,EAAFjzE,UAAAyzE,gBAAE,WACE,MAAOp4E,MAAKqgC,QAAU,OAAUrgC,KAAKq4E,cAAgB,QAAU,SAGzDT,EAAVjzE,UAAAqzE,sBAAA,SAAgCM,GAC5B,GAAIC,GAAWv4E,KAAKw3E,mBAChBllE,EAAuBtS,KAAKE,YAAYI,aAE5C,IAAIi4E,IAAaD,IAGbt4E,KAAKu3E,uBAAuBpyE,OAAS,GACvCmN,EAAQ9M,UAAU0Y,OAAOle,KAAKu3E,wBAGhCv3E,KAAKu3E,uBAAyBv3E,KAAKw4E,0CAC/BD,EAAUD,GACdt4E,KAAKw3E,mBAAqBc,EAEtBt4E,KAAKu3E,uBAAuBpyE,OAAS,GAAG,CAC1CmN,EAAQ9M,UAAU2Y,IAAIne,KAAKu3E,uBAG3B,IAAMkB,GAAiBz4E,KAAKu3E,sBAE5Bv3E,MAAKmS,QAAQM,kBAAkB,WAC7Bsf,WAAW,WACTzf,EAAQ9M,UAAU0Y,OAAOu6D,IACxB,SAKDb,EAAVjzE,UAAAqnB,4BACI,GAAM1qB,GAAQ,GAAIo3E,GAClBp3E,GAAMgtB,OAAStuB,KACfsB,EAAM++B,QAAUrgC,KAAKqgC,QAErBrgC,KAAK6tB,8BAA8B7tB,KAAKqgC,SACxCrgC,KAAKyW,OAAOS,KAAK5V,IAInBs2E,EAAFjzE,UAAA08B,OAAE,WACErhC,KAAKqgC,SAAWrgC,KAAKqgC,SAUvBu3C,EAAFjzE,UAAAy8B,cAAE,SAAc9/B,GAAd,GAAFzB,GAAAG,IAQIsB,GAAMo5B,kBAGD16B,KAAKW,UAAkC,SAAtBX,KAAKq3E,aAkBfr3E,KAAKW,UAAkC,SAAtBX,KAAKq3E,eAGhCr3E,KAAKmhC,cAAc7gC,cAAc+/B,QAAUrgC,KAAKqgC,QAChDrgC,KAAKmhC,cAAc7gC,cAAc+3E,cAAgBr4E,KAAKq4E,gBApBlDr4E,KAAKq4E,eAAuC,UAAtBr4E,KAAKq3E,cAE7B9lE,QAAQC,UAAUC,KAAK,WACrB5R,EAAK83E,gBAAiB,EACtB93E,EAAKy3E,oBAAoBpgE,KAAKrX,EAAK83E,kBAIvC33E,KAAKqhC,SACLrhC,KAAKg4E,sBACDh4E,KAAK6gC,SAAW42C,GAAqBS,QAAUT,GAAqBU,WAKxEn4E,KAAKgsB,qBAUT4rD,EAAFjzE,UAAAkT,MAAE,WACE7X,KAAKG,cAAci7B,SAASp7B,KAAKmhC,cAAe,aAGlDy2C,EAAFjzE,UAAAg0E,oBAAE,SAAoBr3E,GAIlBA,EAAMo5B,mBAGAk9C,EAAVjzE,UAAA6zE,0CACA,SAAMD,EAAgCD,GAElC,GAA4B,mBAAxBt4E,KAAKy8B,eACP,MAAO,EAGT,IAAIm8C,GAAqB,EAEzB,QAAQL,GACN,IAAKd,IAAqBC,KAGxB,GAAIY,IAAab,GAAqBS,QACpCU,EAAa,wBACR,CAAA,GAAIN,GAAYb,GAAqBQ,cAG1C,MAAO,EAFPW,GAAa,0BAIf,KACF,KAAKnB,IAAqBU,UACxBS,EAAaN,IAAab,GAAqBS,QAC3C,oBAAsB,yBAC1B,MACF,KAAKT,IAAqBS,QACxBU,EAAaN,IAAab,GAAqBU,UAC3C,oBAAsB,uBAC1B,MACF,KAAKV,IAAqBQ,cACxBW,EAAaN,IAAab,GAAqBS,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBU,GAStBhB,EAAVjzE,UAAAmzE,kCACI,IAAKe,GAAwB,CAC3B,GAAMC,GACF94E,KAAKE,YAAYI,cAAcylD,cAAc,wBAAwBjkB,aAAe,CACxF+2C,IAAyBC,EAAc,EAEzC94E,KAAK+4E,OAAOC,OAASH,mBAjWzB75E,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACE8B,SAAU,q7CACVC,QAAF,isMACEtE,SAAF,cACEpD,MACFC,MAAA,eACM6jC,OAAN,KACIC,kBAAJ,OACI02C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACI9oD,kCAAJ,uCAEA/oB,WAAA8xE,IACAx3E,QAAA,gBAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAlHAC,KAAE2D,EAAAA,eAFF3D,KAAEC,EAAAA,SALFD,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAYA3C,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA23E,QAmLAt6E,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAAAuD,EAAAA,OAAmCZ,MAAnC4uB,EAAAA,4BAGAqnD,EAAAv4E,wHA9DAyhB,KAAA9hB,KAAAO,EAAAA,QAKAojC,WAAA3jC,KAAAO,EAAAA,QAKAqnB,gBAAQ5nB,KAARO,EAAAA,QAMA+iB,OAAAtjB,KAAAO,EAAAA,QAMAkX,SAAAzX,KAAAwY,EAAAA,SAGA8/D,sBAAAt4E,KAAAwY,EAAAA,SAGAvW,QAAAjC,KAAAO,EAAAA,QAIA4hC,gBAAAniC,KAAAsV,EAAAA,UAAA3S,MAAA,WAGAo3E,SAAA/5E,KAAAsV,EAAAA,UAAA3S,MAAA43E,MAGAl5C,UAAArhC,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAiDA84E,gBAAGr5E,KAAHO,EAAAA,SA8BAq4E,OClPa4B,IACXhyE,QAAS2zD,EAAAA,cACT1zD,YAAawO,EAAAA,WAAW,WAAM,MAAAwjE,MAC9Bt5C,OAAO,8EArBT,MAmCkDz7B,GAAlD+0E,EAAA35E,kBANAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8HAEVoD,WAAYiyE,IACZh7E,MAAOk7E,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBA36E,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DE,SAAUw0E,GAAa6B,GAA8B12E,IACrDU,cAAem0E,GAAa6B,QAnB9BG,KCoDAC,GAAA,WACE,QAAFA,GAEWvrD,EAEAxJ,EAEAgiC,sBAJA9mD,KAAXsuB,OAAWA,EAEAtuB,KAAX8kB,SAAWA,EAEA9kB,KAAX8mD,YAAWA,EA3DX,MAAA+yB,MAiEAC,GAAA,WACE,QAAFA,GAAqB55E,GAAAF,KAArBE,YAAqBA,EAlErB,MAAA45E,MAqEaC,GAEL71E,EAAWvE,EAAmBC,EAAck6E,KAAe,WAE7DE,IAAwB,8CAzE9B,sBA+EAh7E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mCACV3F,MAAOC,MAAS,uBAjFlB0vE,iCAAA,sBAyFAnvE,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gDACV3F,MAAOC,MAAS,8BA3FlB2vE,oBAgOE,QAAFpB,GAAqB9sE,EACCiS,EACR+xB,EAC+CzjC,GAH3D,GAAFZ,GAIIC,EAJJC,KAAAC,KAIUE,IAJVF,WAAqBH,GAArBK,YAAqBA,EACCL,EAAtBsS,QAAsBA,EAnGtBtS,EAAAa,0BAAqC,EAMnCb,EAAFo6E,gBAWEp6E,EAAFq6E,WAAuB,EAGrBr6E,EAAFs6E,oBAAgC,EAsB9Bt6E,EAAF6mC,WAAiC,EAuB/B7mC,EAAFu6E,aAAmC,EAUjCv6E,EAAFw6E,YAAkC,EAGhCx6E,EAAFysB,SAAsB,GAAI3Y,GAAAA,QAGxB9T,EAAF0sB,QAAqB,GAAI5Y,GAAAA,QAGvB9T,EAAFyvC,gBACM,GAAI/4B,GAAAA,aAGR1W,EAAFy6E,UAA6D,GAAI/jE,GAAAA,aAG/D1W,EAAFmkD,QAA2D,GAAIztC,GAAAA,aAa3D1W,EAAK06E,oBAEL16E,EAAK26E,YAAc,GAAIC,IAAe56E,EAAMsS,EAASjS,EAAagkC,GAClErkC,EAAK26E,YAAYn6E,mBAAmBH,EAAYI,eAE5CG,IAEFZ,EAAKa,2BAA6BD,EAAcE,SAChDd,EAAKo6E,cACHp5E,UAAWJ,EAAcI,UACzBD,qBAAsBH,EAAcG,yBAhP5C,MAuH6B8D,GAA7BsoE,EAAAltE,GAmBE2L,OAAFC,eAAMshE,EAANroE,UAAA,sBAAE,WACE,MAAO3E,MAAKW,UAAYX,KAAKmoC,eAAiBnoC,KAAKU,0DAmBrD+K,OAAFC,eACMshE,EADNroE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK0mC,eACtC,SAAazlC,GACXjB,KAAK0mC,UAAY1oB,EAAAA,sBAAsB/c,GACvCjB,KAAKsvC,gBAAgBp4B,MACnBoX,OAAQtuB,KACR8mD,aAAa,EACbhiC,SAAU7jB,qCAMdwK,OAAFC,eACMshE,EADNroE,UAAA,aAAE,WAEE,WAAsBtC,IAAfrC,KAAKqpB,OACRrpB,KAAKqpB,OACLrpB,KAAKE,YAAYI,cAAcuF,iBAErC,SAAU5E,GAAcjB,KAAKqpB,OAASpoB,mCAStCwK,OAAFC,eACMshE,EADNroE,UAAA,kBAAE,WAC4B,MAAO3E,MAAKo6E,aAAep6E,KAAKm6E,wBAC5D,SAAel5E,GACbjB,KAAKo6E,YAAcp8D,EAAAA,sBAAsB/c,oCAO3CwK,OAAFC,eACMshE,EADNroE,UAAA,iBAAE,WAC2B,MAAO3E,MAAKq6E,gBACvC,SAAcp5E,GACZjB,KAAKq6E,WAAar8D,EAAAA,sBAAsB/c,oCAqB1CwK,OAAFC,eAAMshE,EAANroE,UAAA,oBAAE,WACE,MAAO3E,MAAK8sE,WAAa9sE,KAAK8kB,SAASqe,WAAa,sCAwBtD6pC,EAAFroE,UAAA41E,kBAAE,WAEE,IAAmB,GAAvBhwB,GAAA,EAAuBmwB,EAAvBV,GAAuBzvB,EAAvBmwB,EAAAv1E,OAAuBolD,IAAsB,CAApC,GAAMowB,GAAfD,EAAAnwB,EACM,IAAIvqD,KAAKE,YAAYI,cAAckrD,aAAamvB,IAC9C36E,KAAKE,YAAYI,cAAcs6E,QAAQlrE,gBAAkBirE,EAEzD,WADC36E,MAAKE,YAAwC,cAAEsF,UAAU2Y,IAAIw8D,GAIjE36E,KAAKE,YAAwC,cAAEsF,UAAU2Y,IAAI,sBAGhE6uD,EAAFroE,UAAAsD,YAAE,WACEjI,KAAKs6E,UAAUpjE,MAAM2jE,KAAM76E,OAC3BA,KAAKw6E,YAAYM,wBAInB9N,EAAFroE,UAAAo/C,OAAE,WACE/jD,KAAK0mC,WAAY,EACjB1mC,KAAKsvC,gBAAgBp4B,MACnBoX,OAAQtuB,KACR8mD,aAAa,EACbhiC,UAAU,KAKdkoD,EAAFroE,UAAAs/C,SAAE,WACEjkD,KAAK0mC,WAAY,EACjB1mC,KAAKsvC,gBAAgBp4B,MACnBoX,OAAQtuB,KACR8mD,aAAa,EACbhiC,UAAU,KAKdkoD,EAAFroE,UAAAo2E,qBAAE,WACE/6E,KAAK0mC,WAAY,EAEjB1mC,KAAKsvC,gBAAgBp4B,MACnBoX,OAAQtuB,KACR8mD,aAAa,EACbhiC,UAAU,KAKdkoD,EAAFroE,UAAAq2E,eAAE,SAAel0B,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACI9mD,KAAK0mC,WAAa1mC,KAAK8kB,SAEvB9kB,KAAKsvC,gBAAgBp4B,MACnBoX,OAAQtuB,KACR8mD,YAANA,EACMhiC,SAAU9kB,KAAK0mC,YAGV1mC,KAAK8kB,UAIdkoD,EAAFroE,UAAAkT,MAAE,WACO7X,KAAKk6E,YACRl6E,KAAKE,YAAYI,cAAcuX,QAC/B7X,KAAKssB,SAAS3gB,MAAMkvE,KAAM76E,QAE5BA,KAAKk6E,WAAY,GASnBlN,EAAFroE,UAAAuZ,OAAE,WACMle,KAAKi7E,WACPj7E,KAAKgkD,QAAQ9sC,MAAM2jE,KAAM76E,QAK7BgtE,EAAFroE,UAAA4a,aAAE,SAAaje,GACPtB,KAAKW,SACPW,EAAMC,iBAEND,EAAMo5B,mBAKVsyC,EAAFroE,UAAAgV,eAAE,SAAerY,GACb,IAAItB,KAAKW,SAIT,OAAQW,EAAMsY,SACZ,IAAKshE,GAAAA,OACL,IAAKC,GAAAA,UAEHn7E,KAAKke,SAEL5c,EAAMC,gBACN,MACF,KAAK2Y,GAAAA,MAECla,KAAK8sE,YACP9sE,KAAKg7E,gBAAe,GAItB15E,EAAMC,mBAKZyrE,EAAFroE,UAAA8oE,MAAE,WAAA,GAAF5tE,GAAAG,IAKIA,MAAKmS,QAAQ4qC,SACV3qB,eACAnoB,KAAKC,EAAAA,KAAK,IACVhF,UAAU,WACTrF,EAAKsS,QAAQ8I,IAAI,WACfpb,EAAKq6E,WAAY,EACjBr6E,EAAK0sB,QAAQ5gB,MAAMkvE,KAAMh7E,wBAnRnCb,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yDACVtC,QAAS,QAAS,WAAY,iBAC9BD,SAAU,UACVpD,MACEC,MAAS,WACT8jC,kBAAmB,uBACnBr7B,KAAQ,SACRk0E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7BxgC,kBAAmB,mBACnBh5C,uBAAwB,sBACxBkoD,uBAAwB,eACxB9nD,UAAW,uBACXgtB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDArGdlwB,KAAE0I,EAAAA,aAKF1I,KAAEC,EAAAA,SATFD,KAAQoD,EAAAA,WAwNRpD,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkCa,2BA9ElCg5E,SAAAx8E,KAAGu/B,EAAAA,aAAH58B,MAAgBwsE,MAGhBsN,eAAAz8E,KAAGu/B,EAAAA,aAAH58B,MAAgBysE,MAGhBsN,aAAA18E,KAAGu/B,EAAAA,aAAH58B,MAAgBsU,EAAAA,WAAW,WAAM,MAAAi4D,SAGjCppD,WAAA9lB,KAAGO,EAAAA,QAaH0B,QAAAjC,KAAGO,EAAAA,QAeHutE,aAAA9tE,KAAGO,EAAAA,QAUH07E,YAAAj8E,KAAGO,EAAAA,QAcH+vC,kBAAAtwC,KAAGwY,EAAAA,SAIH8iE,YAAAt7E,KAAGwY,EAAAA,SAGHwsC,UAAAhlD,KAAGwY,EAAAA,UAzNHw1D,GAuH6B+M,kBA0R3B,QAAF7L,GAAwByN,GAAA37E,KAAxB27E,YAAwBA,EAjZxB,MAoZEzN,GAAFvpE,UAAA4a,aAAE,SAAaje,GACPtB,KAAK27E,YAAYV,WACnBj7E,KAAK27E,YAAYz9D,SAQnB5c,EAAMo5B,kCArBV17B,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACV3F,MACEC,MAAS,yCACT0D,UAAW,gEAIfnD,KAAqCguE,MAjZrCkB,KCiBaH,GACT,GAAIh8D,GAAAA,eAAuC,6BnB6B/C6pE,GAAA,WACE,QAAFA,GAAqBj6B,EACAC,EACAC,EAEAC,GAJA9hD,KAArB2hD,0BAAqBA,EACA3hD,KAArB4hD,YAAqBA,EACA5hD,KAArB6hD,iBAAqBA,EAEA7hD,KAArB8hD,UAAqBA,EApDrB,MAAA85B,MAsDaC,GACT75B,EAAgB45B,IAIhB77C,GAAe,EAGnB+7C,GAAA,WACE,QAAFA,GAEWxtD,EAEArtB,GAFAjB,KAAXsuB,OAAWA,EAEAtuB,KAAXiB,MAAWA,EAnEX,MAAA66E,qBA8UE,QAAFlP,GAAwB1sE,EACFkY,EACYjC,EACRyrC,EACAC,EACZF,EAE2BG,GAPvC,GAAFjiD,GAQIC,EARJC,KAAAC,KAQU2hD,EAA2BC,EAAaC,EAAkBC,IARpE9hD,WAAwBH,GAAxBK,YAAwBA,EACFL,EAAtBuY,mBAAsBA,EACYvY,EAAlCsW,KAAkCA,EAKOtW,EAAzCiiD,UAAyCA,EAzOvCjiD,EAAFijD,YAAiC,gBAOjCjjD,EAAAk8E,wBAAmD,KAGnDl8E,EAAA2Y,WAAuB,GAAI7E,GAAAA,QAkBzB9T,EAAFyiD,KAAiB,iBAAiBviB,KAMhClgC,EAAFm8E,UAAc,EAMZn8E,EAAFo8E,cAAiC,KAM/Bp8E,EAAF4iD,WAAe,aAGb5iD,EAAF2iD,UAAoC,aAqBpC3iD,EAAAqiD,WAA+B,EAgB/BriD,EAAAsiD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCpDxiD,EAAF+gC,WAAiC,EAgD/B/gC,EAAFgnC,WAAiC,EAG/BhnC,EAAFgtE,gBAA0E,aAexEhtE,EAAFu6E,aAAmC,EA6BjCv6E,EAAF4W,OACM,GAAIF,GAAAA,aAOR1W,EAAFiuB,YAAsD,GAAIvX,GAAAA,aAclD1W,EAAKiiD,YACPjiD,EAAKiiD,UAAUsB,cAAgBvjD,KAZrC,MAtOiC6E,GAAjCkoE,EAAA9sE,GA4DE2L,OAAFC,eAAMkhE,EAANjoE,UAAA,gBAAE,WACE,MAAO3E,MAAK8qC,SAAW9qC,KAAKgrC,gBAAgBlmB,SAAW9kB,KAAKgrC,gBAAgBlmB,SAAS,oCAIvFrZ,OAAFC,eAAMkhE,EAANjoE,UAAA,YAAE,WAA4B,MAAO3E,MAAKstC,MAAQ,KAAO,2CAMvD7hC,OAAFC,eACMkhE,EADNjoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAKkiD,eACtC,SAAajhD,GACXjB,KAAKkiD,UAAYlkC,EAAAA,sBAAsB/c,oCASzCwK,OAAFC,eACMkhE,EADNjoE,UAAA,mBAAE,WACmD,MAAO3E,MAAKmiD,kBAC/D,SAAgBvzB,GACd5uB,KAAKmiD,aAAevzB,EAChB5uB,KAAKgrC,iBAEPhrC,KAAKyjD,wDASTh4C,OAAFC,eACMkhE,EADNjoE,UAAA,aAAE,WACmB,MAAO3E,MAAKqpB,YAC/B,SAAUpoB,GACRjB,KAAK0uB,WAAWztB,GAChBjB,KAAKqpB,OAASpoB,mCAQhBwK,OAAFC,eAAMkhE,EAANjoE,UAAA,UAAE,WACE,MAAO3E,MAAKk8E,WAAal8E,KAAKk8E,WAAWp7D,GAAK9gB,KAAKsiD,sCAOrD72C,OAAFC,eACMkhE,EADNjoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,GACvCjB,KAAKsjD,aAAa33C,wCAQpBF,OAAFC,eACMkhE,EADNjoE,UAAA,mBAAE,WAEE,MAAO3E,MAAKk8E,WAAal8E,KAAKk8E,WAAWpyC,YAAc9pC,KAAKqjD,kBAE9D,SAAgBpiD,GACdjB,KAAKqjD,aAAepiD,EACpBjB,KAAKsjD,aAAa33C,wCAKpBF,OAAFC,eAAMkhE,EAANjoE,UAAA,eAAE,WACE,MAAQ3E,MAAKk8E,YAAcl8E,KAAKk8E,WAAWhP,SAAYltE,KAAKm8E,mDAO9D1wE,OAAFC,eAAMkhE,EAANjoE,UAAA,aAAE,WACE,QAAS3E,KAAKk8E,YAAcl8E,KAAKk8E,WAAW5uC,QAAgC,IAAtBttC,KAAK+sE,MAAM5nE,wCAOnEsG,OAAFC,eAAMkhE,EAANjoE,UAAA,wBAAE,WAAkC,OAAQ3E,KAAKstC,OAASttC,KAAKktE,yCAM7DzhE,OAAFC,eACMkhE,EADNjoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK8hD,YAAc9hD,KAAK8hD,UAAUnhD,SAAWX,KAAK6mC,eACnF,SAAa5lC,GAAb,GAAFpB,GAAAG,IACIA,MAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,GAEnCjB,KAAK+sE,OACP/sE,KAAK+sE,MAAM3iE,QAAQ,SAAAywE,GAAQ,MAAAA,GAAKl6E,SAAWd,EAAKgnC,6CAYpDp7B,OAAFC,eACMkhE,EADNjoE,UAAA,kBAAE,WAC4B,MAAO3E,MAAKo6E,iBACxC,SAAen5E,GAAf,GAAFpB,GAAAG,IACIA,MAAKo6E,YAAcp8D,EAAAA,sBAAsB/c,GAErCjB,KAAK+sE,OACP/sE,KAAK+sE,MAAM3iE,QAAQ,SAAAywE,GAAQ,MAAAA,GAAKV,mBAAqBt6E,EAAKu6E,+CAK9D3uE,OAAFC,eACMkhE,EADNjoE,UAAA,gBAAE,SACa1D,GACXjB,KAAKi8E,cAAgBh7E,EACrBjB,KAAKg8E,UAAY/6E,mCAInBwK,OAAFC,eAAMkhE,EAANjoE,UAAA,4BAAE,WACE,MAAOsH,GAAAA,MAAXC,UAAA,GAAoBlM,KAAK+sE,MAAM5gE,IAAI,SAAA0uE,GAAQ,MAAAA,GAAKvrC,oDAI9C7jC,OAAFC,eAAMkhE,EAANjoE,UAAA,wBAAE,WACE,MAAOsH,GAAAA,MAAXC,UAAA,GAAoBlM,KAAK+sE,MAAM5gE,IAAI,SAAA0uE,GAAQ,MAAAA,GAAKvuD,6CAI9C7gB,OAAFC,eAAMkhE,EAANjoE,UAAA,uBAAE,WACE,MAAOsH,GAAAA,MAAXC,UAAA,GAAoBlM,KAAK+sE,MAAM5gE,IAAI,SAAA0uE,GAAQ,MAAAA,GAAKtuD,4CAI9C9gB,OAAFC,eAAMkhE,EAANjoE,UAAA,yBAAE,WACE,MAAOsH,GAAAA,MAAXC,UAAA,GAAoBlM,KAAK+sE,MAAM5gE,IAAI,SAAA0uE,GAAQ,MAAAA,GAAKP,8CA+B9C1N,EAAFjoE,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKgZ,YAAc,GAAIwB,GAAAA,gBAAyBxa,KAAK+sE,OAClDryD,WACAgsC,0BACAjsC,0BAA0Bza,KAAKmW,KAAOnW,KAAKmW,KAAKlV,MAAQ,OAI3DjB,KAAKgZ,YAAYujC,OAAOtyC,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,WACjErF,EAAKm8E,WAAa,EAClBjqD,WAAW,WAAM,MAAAlyB,GAAKm8E,UAAYn8E,EAAKo8E,eAAiB,MAI1Dj8E,KAAK+sE,MAAM9nE,QAAQgF,KAAKsL,EAAAA,UAAU,MAAOqF,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,WAC7ErF,EAAKu8E,cAGLv8E,EAAK4jD,uBAGL5jD,EAAKw8E,kBAGLx8E,EAAKy8E,gCAELz8E,EAAKyjD,aAAa33C,UAItBihE,EAAFjoE,UAAAuP,SAAE,WACElU,KAAKgrC,gBAAkB,GAAI2Y,GAAAA,eAAwB3jD,KAAK8qC,aAAUzoC,IAAW,GAC7ErC,KAAKsjD,aAAa33C,QAGpBihE,EAAFjoE,UAAA+4B,UAAE,WACM19B,KAAK8hD,WAIP9hD,KAAKmkD,oBAITyoB,EAAFjoE,UAAAsD,YAAE,WACEjI,KAAKwY,WAAW7M,OAChB3L,KAAKwY,WAAWvE,WAChBjU,KAAKsjD,aAAarvC,WAElBjU,KAAKu8E,sBAKP3P,EAAFjoE,UAAA4oE,cAAE,SAAciP,GACZx8E,KAAKk8E,WAAaM,GAOpB5P,EAAFjoE,UAAAqoC,kBAAE,SAAkBC,GAAiBjtC,KAAKktC,iBAAmBD,EAAIE,KAAK,MAGpEy/B,EAAFjoE,UAAA+pB,WAAE,SAAWztB,GACLjB,KAAK+sE,OACP/sE,KAAKwkD,qBAAqBvjD,GAAO,IAKrC2rE,EAAFjoE,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAKwiD,UAAY5zB,GAInBg+C,EAAFjoE,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GAIpBg+C,EAAFjoE,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,EAChB/uB,KAAKsjD,aAAa33C,QAOpBihE,EAAFjoE,UAAAyoC,iBAAE,SAAiB9rC,GACVtB,KAAKy8E,oBAAoBn7E,IAC5BtB,KAAK6X,SAQT+0D,EAAFjoE,UAAAkT,MAAE,WACM7X,KAAKW,UAMLX,KAAKk8E,YAAcl8E,KAAKk8E,WAAWhP,UAE5BltE,KAAK+sE,MAAM5nE,OAAS,GAC7BnF,KAAKgZ,YAAYc,qBACjB9Z,KAAKsjD,aAAa33C,SAElB3L,KAAK08E,cACL18E,KAAKsjD,aAAa33C,UAKtBihE,EAAFjoE,UAAA+3E,YAAE,WACM18E,KAAKk8E,YACPl8E,KAAKk8E,WAAWrkE,SAOpB+0D,EAAFjoE,UAAAs+D,SAAE,SAAS3hE,GACP,GAAMo3C,GAASp3C,EAA2B,MAGtCA,GAAMsY,UAAYuhE,EAAAA,WAAan7E,KAAK28E,cAAcjkC,IACpD14C,KAAKgZ,YAAYgB,oBACjB1Y,EAAMC,kBACGm3C,GAAUA,EAAOlzC,UAAUC,SAAS,cACzCnE,EAAMsY,UAAYC,EAAAA,MACpB7Z,KAAKgZ,YAAYc,qBACjBxY,EAAMC,kBACGD,EAAMsY,UAAYG,EAAAA,KAC3B/Z,KAAKgZ,YAAYgB,oBACjB1Y,EAAMC,kBAENvB,KAAKgZ,YAAYoB,UAAU9Y,GAG7BtB,KAAKsjD,aAAa33C,SAQZihE,EAAZjoE,UAAA03E,gBAAE,WAEEr8E,KAAKg8E,UAAYh8E,KAAKi8E,gBAAwC,IAAtBj8E,KAAK+sE,MAAM5nE,QAAgB,EAAI,IAO/DynE,EAAZjoE,UAAA23E,8BAAE,WACE,GAAoC,MAAhCt8E,KAAK+7E,yBAAmC/7E,KAAK+sE,MAAM5nE,OAAQ,CAC7D,GAAMy3E,GAAejrE,KAAKE,IAAI7R,KAAK+7E,wBAAyB/7E,KAAK+sE,MAAM5nE,OAAS,EAChFnF,MAAKgZ,YAAYoC,cAAcwhE,GAGjC58E,KAAK+7E,wBAA0B,MASzBnP,EAAVjoE,UAAAwW,cAAA,SAAwB7Q,GACpB,MAAOA,IAAS,GAAKA,EAAQtK,KAAK+sE,MAAM5nE,QAGlCynE,EAAVjoE,UAAAg4E,cAAA,SAAwBrqE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQ0+B,SAASthC,cAA2B,CAEzD,OADS,EACKzO,MAGhB,OAAO,GAGT2rE,EAAFjoE,UAAA6/C,qBAAE,SAAqBvjD,EAAY6lD,GAAjC,GAAFjnD,GAAAG,IAII,QAJJ,KAAA8mD,IAAmCA,GAAnC,GACI9mD,KAAK68E,kBACL78E,KAAK+sE,MAAM3iE,QAAQ,SAAAywE,GAAQ,MAAAA,GAAK52B,aAE5Bn6C,MAAMC,QAAQ9I,GAChBA,EAAMmJ,QAAQ,SAAA87C,GAAgB,MAAArmD,GAAKsmD,aAAaD,EAAcY,KAC9D9mD,KAAKomD,kBACA,CACL,GAAM02B,GAAoB98E,KAAKmmD,aAAallD,EAAO6lD,EAI/Cg2B,IACEh2B,GACF9mD,KAAKgZ,YAAYoC,cAAc0hE,KAU/BlQ,EAAVjoE,UAAAwhD,aAAA,SAAuBllD,EAAY6lD,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAMg2B,GAAoB98E,KAAK+sE,MAAM1sD,KAAK,SAAAw6D,GACxC,MAAqB,OAAdA,EAAK55E,OAAiBpB,EAAKsiD,aAAa04B,EAAK55E,MAAQA,IAQ9D,OALI67E,KACFh2B,EAAcg2B,EAAkB/B,uBAAyB+B,EAAkB/4B,SAC3E/jD,KAAKgrC,gBAAgB+Y,OAAO+4B,IAGvBA,GAGDlQ,EAAVjoE,UAAA8+C,0CAGIlyC,SAAQC,UAAUC,KAAK,YACjB5R,EAAKiiD,WAAajiD,EAAKwpB,UACzBxpB,EAAK2kD,qBAAqB3kD,EAAKiiD,UAAYjiD,EAAKiiD,UAAU7gD,MAAQpB,EAAKwpB,QAAQ,GAC/ExpB,EAAKyjD,aAAa33C,WAShBihE,EAAVjoE,UAAAk4E,gBAAA,SAA0BE,GACtB/8E,KAAKgrC,gBAAgB8G,QACrB9xC,KAAK+sE,MAAM3iE,QAAQ,SAAAywE,GACbA,IAASkC,GACXlC,EAAK52B,aAGTjkD,KAAKsjD,aAAa33C,QAOZihE,EAAVjoE,UAAAyhD,iCACQpmD,MAAKkiD,YACPliD,KAAKgrC,gBAAgB8G,QAErB9xC,KAAK+sE,MAAM3iE,QAAQ,SAAAywE,GACbA,EAAK/1D,UACPjlB,EAAKmrC,gBAAgB+Y,OAAO82B,KAGhC76E,KAAKsjD,aAAa33C,SAKdihE,EAAVjoE,UAAAuiD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEv9C,MAAMC,QAAQ/J,KAAK8kB,UACP9kB,KAAK8kB,SAAS3Y,IAAI,SAAA0uE,GAAQ,MAAAA,GAAK55E,QAE/BjB,KAAK8kB,SAAW9kB,KAAK8kB,SAAS7jB,MAAQmmD,EAEtDpnD,KAAKqpB,OAASg+B,EACdrnD,KAAKyW,OAAOS,KAAK,GAAI4kE,IAAkB97E,KAAMqnD,IAC7CrnD,KAAK8tB,YAAY5W,KAAKmwC,GACtBrnD,KAAKwiD,UAAU6E,GACfrnD,KAAKoY,mBAAmBxB,gBAI1Bg2D,EAAFjoE,UAAA8oE,MAAE,WAAA,GAAF5tE,GAAAG,IACSA,MAAKm8E,mBACRn8E,KAAKgZ,YAAYoC,eAAe,GAG7Bpb,KAAKW,WACJX,KAAKk8E,WAKPnqD,WAAW,WACJlyB,EAAKqtE,SACRrtE,EAAKm9E,mBAKTh9E,KAAKg9E,mBAMXpQ,EAAFjoE,UAAAq4E,eAAE,WACEh9E,KAAKyiD,aACLziD,KAAKoY,mBAAmBxB,eACxB5W,KAAKsjD,aAAa33C,QAGZihE,EAAVjoE,UAAAy3E,uBACIp8E,KAAKu8E,qBACLv8E,KAAKi9E,sBACLj9E,KAAKk9E,0BACLl9E,KAAKm9E,yBAGCvQ,EAAVjoE,UAAA43E,8BACQv8E,KAAKo9E,yBACPp9E,KAAKo9E,uBAAuBrsE,cAC5B/Q,KAAKo9E,uBAAyB,MAG5Bp9E,KAAKq9E,wBACPr9E,KAAKq9E,sBAAsBtsE,cAC3B/Q,KAAKq9E,sBAAwB,MAG3Br9E,KAAKs9E,6BACPt9E,KAAKs9E,2BAA2BvsE,cAChC/Q,KAAKs9E,2BAA6B,MAGhCt9E,KAAKu9E,0BACPv9E,KAAKu9E,wBAAwBxsE,cAC7B/Q,KAAKu9E,wBAA0B,OAK3B3Q,EAAVjoE,UAAAu4E,6CACIl9E,MAAKs9E,2BAA6Bt9E,KAAKw9E,qBAAqBt4E,UAAU,SAAA5D,GACpEA,EAAMgtB,OAAOxJ,SACTjlB,EAAKmrC,gBAAgB+Y,OAAOziD,EAAMgtB,QAClCzuB,EAAKmrC,gBAAgBiZ,SAAS3iD,EAAMgtB,QAGnCzuB,EAAKirC,UACRjrC,EAAKktE,MAAM3iE,QAAQ,SAAAywE,IACZh7E,EAAKmrC,gBAAgBic,WAAW4zB,IAASA,EAAK/1D,UACjD+1D,EAAK52B,aAKP3iD,EAAMwlD,aACRjnD,EAAKqnD,uBAMH0lB,EAAVjoE,UAAAs4E,yCACIj9E,MAAKo9E,uBAAyBp9E,KAAKy9E,iBAAiBv4E,UAAU,SAAA5D,GAC5D,GAAIo8E,GAAoB79E,EAAKktE,MAAMzxD,UAAU1L,QAAQtO,EAAMu5E,KAEvDh7E,GAAKsb,cAAcuiE,IACrB79E,EAAKmZ,YAAYC,sBAAsBykE,GAEzC79E,EAAKyjD,aAAa33C,SAGpB3L,KAAKq9E,sBAAwBr9E,KAAK29E,gBAAgBz4E,UAAU,WAC1DrF,EAAK4tE,QACL5tE,EAAKyjD,aAAa33C,UAIdihE,EAAVjoE,UAAAw4E,2CACIn9E,MAAKu9E,wBAA0Bv9E,KAAK49E,kBAAkB14E,UAAU,SAAA5D,GAC9D,GAAMu5E,GAAOv5E,EAAMu5E,KACb6C,EAAY79E,EAAKktE,MAAMzxD,UAAU1L,QAAQtO,EAAMu5E,KAKjDh7E,GAAKsb,cAAcuiE,IAAc7C,EAAKX,YACxCr6E,EAAKk8E,wBAA0B2B,MAM7B9Q,EAAVjoE,UAAA83E,oBAAA,SAA8Bn7E,GAG1B,IAFA,GAAIu8E,GAAiBv8E,EAAkC,OAEhDu8E,GAAkBA,IAAmB79E,KAAKE,YAAYI,eAAe,CAC1E,GAAIu9E,EAAer4E,UAAUC,SAAS,YACpC,OAAO,CAGTo4E,GAAiBA,EAAe/K,cAGlC,OAAO,GAIDlG,EAAVjoE,UAAAw3E,2BACI,MAAOn8E,MAAK+sE,MAAMnnE,KAAK,SAAAi1E,GAAQ,MAAAA,GAAKX,4BAprBxCl7E,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACE8B,SAAU,qEACVrE,SAAU,cACVpD,MACF+jC,kBAAyB,8BACnBsL,0BAAN,2BACIJ,uBAAJ,sBACI1rC,uBAAJ,sBACI2rC,sBAAJ,aACIE,8BAAJ,WACItmC,cAAJ,OACIw2E,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClCpuD,0BAAJ,kBACInxB,MAAJ,gBACIwwB,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACImT,OAAQ,QAEZ/6B,YAAAC,QAAA6mC,GAAA5mC,YAAAmlE,IACA1mE,QAAA;srFACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FA9EAC,KAAEge,EAAAA,eAAFvb,aAAAzC,KAAAsD,EAAAA,aAJAtD,KAAEuvC,EAAAA,OAAF9sC,aAAAzC,KAAAsD,EAAAA,aAPAtD,KAAQwvC,EAAAA,mBAAR/sC,aAAAzC,KAAAsD,EAAAA,aAsBAtD,KAA6DinB,KAA7DjnB,KAA8B0vC,EAAAA,UAA9BjtC,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAA2vC,EAAAA,UAAAi+B,EAAkDvtE,6EA2IlD8vC,cAAAnwC,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAAO,EAAAA,QAYAojC,WAAA3jC,KAAAO,EAAAA,QAeAuqC,cAAG9qC,KAAHO,EAAAA,QAoBAoB,WAAA3B,KAAGO,EAAAA,QAYHstE,kBAAA7tE,KAAAO,EAAAA,MAAAoC,MAAA,sBAiCAmrE,aAAA9tE,KAAAO,EAAAA,QAYAgB,WAAAvB,KAAAO,EAAAA,QAMAkX,SAAAzX,KAAAwY,EAAAA,SAWAsW,cAAA9uB,KAAAwY,EAAAA,SA2BAu1D,QAAA/tE,KAAAoJ,EAAAA,gBAAAzG,MAAAqrE,OAWAJ,OCpTI7sC,GAAe,gBAyEjB,QAAFktC,GACc/sE,EACiCqwC,GADjCvwC,KAAdE,YAAcA,EACiCF,KAA/CuwC,gBAA+CA,EApD7CvwC,KAAFktE,SAAqB,EAkBnBltE,KAAFmtE,YAAwB,EAOtBntE,KAAFotE,kBAC8CptE,KAAKuwC,gBAAgB68B,kBAGjEptE,KAAFqtE,QAC6C,GAAI92D,GAAAA,aAG/CvW,KAAF8pC,YAAiC,GAG/B9pC,KAAF8gB,GAAwB,uBAAuBif,KAM/C//B,KAAA6mC,WAA+B,EAW3B7mC,KAAKmhC,cAAgBnhC,KAAKE,YAA6C,cApG3E,MAmDEuL,QAAFC,eACMuhE,EADNtoE,UAAA,gBAAE,SACa1D,GACPA,IACFjB,KAAKstE,UAAYrsE,EACjBjB,KAAKstE,UAAUC,cAAcvtE,wCAOjCyL,OAAFC,eACMuhE,EADNtoE,UAAA,iBAAE,WAC2B,MAAO3E,MAAKmtE,gBACvC,SAAclsE,GAAkBjB,KAAKmtE,WAAanvD,EAAAA,sBAAsB/c,oCAsBxEwK,OAAFC,eACMuhE,EADNtoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,WAAc7mC,KAAKstE,WAAattE,KAAKstE,UAAU3sE,cACrF,SAAaM,GAAkBjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,oCAItEwK,OAAFC,eAAMuhE,EAANtoE,UAAA,aAAE,WAAuB,OAAQ3E,KAAKmhC,cAAclgC,uCAWlDgsE,EAAFtoE,UAAAoP,YAAE,WACE/T,KAAKstE,UAAUhqB,aAAa33C,QAI9BshE,EAAFtoE,UAAAs+D,SAAE,SAAS3hE,GACPtB,KAAKwtE,aAAalsE,IAIpB2rE,EAAFtoE,UAAA8oE,MAAE,WACMztE,KAAK0tE,WACP1tE,KAAKwtE,eAEPxtE,KAAKktE,SAAU,EAEVltE,KAAKstE,UAAUJ,SAClBltE,KAAKstE,UAAUG,QAEjBztE,KAAKstE,UAAUhqB,aAAa33C,QAG9BshE,EAAFtoE,UAAAgpE,OAAE,WACE3tE,KAAKktE,SAAU,EACfltE,KAAKstE,UAAUhqB,aAAa33C,QAI9BshE,EAAFtoE,UAAA6oE,aAAE,SAAalsE,IACNtB,KAAKmhC,cAAclgC,OAAWK,GACjCtB,KAAKstE,UAAUrK,SAAS3hE,GAErBA,IAAStB,KAAK4tE,gBAAgBtsE,EAAMsY,WACvC5Z,KAAKqtE,QAAQn2D,MAAO6W,MAAO/tB,KAAKmhC,cAAelgC,MAAOjB,KAAKmhC,cAAclgC,QAErEK,GACFA,EAAMC,mBAKZ0rE,EAAFtoE,UAAAk5D,SAAE,WAEE79D,KAAKstE,UAAUhqB,aAAa33C,QAI9BshE,EAAFtoE,UAAAkT,MAAE,WACE7X,KAAKmhC,cAActpB,SAIbo1D,EAAVtoE,UAAAipE,gBAAA,SAA0Bh0D,GACtB,GAAMi0D,GAAa7tE,KAAKotE,iBACxB,OAAOtjE,OAAMC,QAAQ8jE,GAAcA,EAAWj+D,QAAQgK,IAAY,EAAIi0D,EAAW70C,IAAIpf,mBA/HzF5a,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACVvC,SAAU,gCACVpD,MACEC,MAAS,mCACT0wB,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXsvC,UAAW,aACXj8B,OAAQ,KACRyY,kBAAmB,mBACnB+yB,qBAAsB,sBACtBpgC,sBAAuB,iHAjC3B1uC,KAAmB0I,EAAAA,aA0FnB1I,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYosE,2BAhDZC,WAAAhvE,KAAGO,EAAAA,MAAHoC,MAAS,qBAWT+rE,YAAA1uE,KAAGO,EAAAA,MAAHoC,MAAS,2BAUTyrE,oBAAApuE,KAAGO,EAAAA,MAAHoC,MAAS,mCAIT0rE,UAAAruE,KAAGwY,EAAAA,OAAH7V,MAAU,0BAIVmoC,cAAA9qC,KAAGO,EAAAA,QAGHuhB,KAAA9hB,KAAGO,EAAAA,QAGHoB,WAAA3B,KAAGO,EAAAA,SAtFH0tE,KCgBMgB,IACJrB,GACAI,GACAC,GACAiB,GACAC,GACAC,IAUFC,IACQjB,mBAAoBnzD,EAAAA,oCAjC5B,sBAyBAjb,KAAC4D,EAAAA,SAADjB,OACEyB,QAAS6qE,GACTxqE,aAAcwqE,GACd1mE,WACE0e,IAEEze,QAASumE,GACTO,SAAQ,SAhCdC,KCiCAC,GAAA,wBAcExuE,KAAFkH,KAAsB,SAGpBlH,KAAFk0B,WAAmC,GAGjCl0B,KAAFg8C,aAA0B,EAGxBh8C,KAAF47C,cAA2B,GAGzB57C,KAAFg+B,cAA2B,EAGzBh+B,KAAFiT,MAAmB,GAGjBjT,KAAFof,OAAoB,GASlBpf,KAAFyuE,SAA+B,OAS7BzuE,KAAF6H,KAAoB,KAMlB7H,KAAF0uE,gBAAoC,KAGlC1uE,KAAFuU,UAA8B,KAG5BvU,KAAF2uE,WAAwB,EAMtB3uE,KAAF4uE,cAA2B,EAUzB5uE,KAAF6uE,mBAAgC,EA/GhC,MAAAL,MCgBMM,IAIJl6D,EAAAA,MAAM,aAAcjC,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,gBAClDD,EAAAA,MAAM,QAASjC,EAAAA,OAAOkC,UAAW,UACjCE,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BrC,EAAAA,OAAOkC,UAAW,OAAQqe,QAAS,MACvCne,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCrC,EAAAA,OAAOugB,QAAS,OAIxD67C,IAKXC,gBAAiBr6D,EAAAA,QAAQ,kBAAmBm6D,IAG5CG,YAAat6D,EAAAA,QAAQ,cAAem6D,oBCyDpC,QAAFI,GACYhvE,EACA25B,EACAzhB,EAC8B3T,EAE/BoxB,GANT,GAAFh2B,GAQIC,EARJC,KAAAC,OAAAA,WACYH,GAAZK,YAAYA,EACAL,EAAZg6B,kBAAYA,EACAh6B,EAAZuY,mBAAYA,EAC8BvY,EAA1C4E,UAA0CA,EAE/B5E,EAAXg2B,QAAWA,EApBXh2B,EAAAsvE,qCAAqE,KAGnEtvE,EAAFuvE,OAAsC,QAGpCvvE,EAAFwvE,uBAA2B,GAAI94D,GAAAA,aAG7B1W,EAAFyvE,gBAAmC,OAfnC,MAFwC5qE,GAAxCwqE,EAAApvE,GAqCEovE,EAAFvqE,UAAA2uB,sBAAE,SAAyBC,GAMvB,MALIvzB,MAAK0zB,cAAc/d,eACrB45D,IAGFvvE,KAAKwvE,gCACExvE,KAAK0zB,cAAcJ,sBAAsBC,IAOlD27C,EAAFvqE,UAAAgvB,qBAAE,SAAwBJ,GAMtB,MALIvzB,MAAK0zB,cAAc/d,eACrB45D,IAGFvvE,KAAKwvE,gCACExvE,KAAK0zB,cAAcC,qBAAqBJ,IAIzC27C,EAAVvqE,UAAA41B,sBACSv6B,KAAKs6B,aACRt6B,KAAKs6B,WAAat6B,KAAK65B,kBAAkB3B,OAAOl4B,KAAKE,YAAYI,gBAM/DN,KAAK61B,QAAQ84C,WACf3uE,KAAKs6B,WAAWS,gCAKZm0C,EAAVvqE,UAAA61B,yBACI,GAAMi1C,GAAUzvE,KAAKmvE,oCAGjBnvE,MAAK61B,QAAQ+4C,cAAgBa,GAAoC,kBAAlBA,GAAQ53D,OACzD43D,EAAQ53D,QAGN7X,KAAKs6B,YACPt6B,KAAKs6B,WAAWiB,WAKZ2zC,EAAVvqE,UAAA6qE,mDACQxvE,MAAKyE,YACPzE,KAAKmvE,qCAAuCnvE,KAAKyE,UAAsC,cAGnFzE,KAAKE,YAAYI,cAAcuX,OAIjCtG,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAKK,YAAYI,cAAcuX,YAMlEq3D,EAAFvqE,UAAAi5C,iBAAE,SAAiBt8C,GACO,UAAlBA,EAAM2V,QACRjX,KAAKu6B,aACsB,SAAlBj5B,EAAM2V,SACfjX,KAAKw6B,gBAGPx6B,KAAKqvE,uBAAuBn4D,KAAK5V,IAInC4tE,EAAFvqE,UAAA+qE,kBAAE,SAAkBpuE,GAChBtB,KAAKqvE,uBAAuBn4D,KAAK5V,IAInC4tE,EAAFvqE,UAAAgrE,oBAAE,WACE3vE,KAAKovE,OAAS,OAIdpvE,KAAKoY,mBAAmBxB,+BApJ5B5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,uBACE8B,SAAU,8CACVC,QAAF,4oCACExH,cAAFC,EAAAA,kBAAAC,uFAKEJ,MACFC,MAAe,uBACTsrD,SAAN,KACI6lB,aAAJ,OACIpnC,YAAJ,MACIlhC,cAAJ,eACIkmC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACIgiC,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDA/wE,KAAEE,EAAAA,oBAmBFF,SAAmBqD,GAAnBZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cAdArH,KAAEwvE,MAeFU,EAAA7vE,6EA2CA6vE,uBCtDIlO,GAAW,EAKfgP,GAAA,WAmBE,QAAFA,GACYl/C,EACDm/C,EAEPC,EACSpvD,OAAb,KAAAA,IAAAA,EAAA,cAAwCkgD,KALtC,IAAFnhE,GAAAG,IACYA,MAAZ8wB,YAAYA,EACD9wB,KAAXiwE,mBAAWA,EAGEjwE,KAAb8gB,GAAaA,EAnBX9gB,KAAFg+B,aAAsCh+B,KAAKiwE,mBAAmBp6C,QAAQmI,aAGtEh+B,KAAAgxB,aAAkC,GAAIrd,GAAAA,QAGtC3T,KAAAmwE,aAAkC,GAAIx8D,GAAAA,QAGtC3T,KAAAowE,cAAmC,GAAIz8D,GAAAA,QAanCs8D,EAAmBvsB,IAAM5iC,EAGzBmvD,EAAmBZ,uBAAuBplE,KACxC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM0gE,WAA0C,UAAlB1gE,EAAM2V,UACpD/M,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKmxB,aAAarlB,OAClB9L,EAAKmxB,aAAa/c,aAIpBg8D,EAAmBZ,uBAAuBplE,KACxC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM0gE,WAA0C,SAAlB1gE,EAAM2V,UACpD/M,EAAAA,KAAK,IACLhF,UAAU,WAAM,MAAArF,GAAKixB,YAAYmB,YAEnCnB,EAAYqG,cAAcjyB,UAAU,WAClCrF,EAAKuwE,cAAczkE,KAAK9L,EAAKwwE,SAC7BxwE,EAAKuwE,cAAcn8D,WACnBpU,EAAKswE,aAAaxkE,KAAK9L,EAAKwwE,SAC5BxwE,EAAKswE,aAAal8D,WAClBpU,EAAKs6D,kBAAiB,KACtBt6D,EAAKixB,YAAYmB,YAGnBnB,EAAYypC,gBACTtwD,KAAK3E,EAAAA,OAAO,SAAAhE,GAAS,MAAAA,GAAMsY,UAAY24B,EAAAA,SAAW1yC,EAAKm+B,gBACvD94B,UAAU,WAAM,MAAArF,GAAK46B,UAjF5B,MAwFEu1C,GAAFrrE,UAAA81B,MAAE,SAAM61C,GAAN,GAAFzwE,GAAAG,IACIA,MAAKqwE,QAAUC,EAGftwE,KAAKiwE,mBAAmBZ,uBAAuBplE,KAC7C3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,UAApBA,EAAM0gE,YACtB93D,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKuwE,cAAczkE,KAAK2kE,GACxBzwE,EAAKuwE,cAAcn8D,WACnBpU,EAAKixB,YAAYy/C,mBAGnBvwE,KAAKiwE,mBAAmBN,uBAM1BK,EAAFrrE,UAAA0tB,YAAE,WACE,MAAOryB,MAAKgxB,aAAaoB,gBAM3B49C,EAAFrrE,UAAAu1D,YAAE,WACE,MAAOl6D,MAAKmwE,aAAa/9C,gBAM3B49C,EAAFrrE,UAAA6rE,aAAE,WACE,MAAOxwE,MAAKowE,cAAch+C,gBAM5B49C,EAAFrrE,UAAA+3B,cAAE,WACE,MAAO18B,MAAK8wB,YAAY4L,iBAM1BszC,EAAFrrE,UAAA41D,cAAE,WACE,MAAOv6D,MAAK8wB,YAAYypC,iBAO1ByV,EAAFrrE,UAAA2mC,eAAE,SAAe13B,GACb,GAAI8+B,GAAW1yC,KAAKywE,sBAgBpB,OAdI78D,KAAaA,EAASZ,MAAQY,EAASmkB,OACzCnkB,EAASZ,KAAO0/B,EAAS1/B,KAAKY,EAASZ,MAAQ0/B,EAAS3a,MAAMnkB,EAASmkB,OAEvE2a,EAAS1a,qBAGPpkB,IAAaA,EAAS0Z,KAAO1Z,EAASqkB,QACxCrkB,EAAS0Z,IAAMolB,EAASplB,IAAI1Z,EAAS0Z,KAAOolB,EAASza,OAAOrkB,EAASqkB,QAErEya,EAASg+B,mBAGX1wE,KAAK8wB,YAAYwa,iBAEVtrC,MAQTgwE,EAAFrrE,UAAAgsE,WAAE,SAAW19D,EAAoBmM,GAG7B,WAHJ,KAAAnM,IAAaA,EAAb,QAAA,KAAAmM,IAAiCA,EAAjC,IACIpf,KAAKywE,uBAAuBx9D,MAAMA,GAAOmM,OAAOA,GAChDpf,KAAK8wB,YAAYwa,iBACVtrC,MAQTgwE,EAAFrrE,UAAAisE,UAAE,WACE,MAAO5wE,MAAKqyB,eAQd29C,EAAFrrE,UAAAksE,YAAE,WACE,MAAO7wE,MAAKwwE,gBAINR,EAAVrrE,UAAA8rE,gCACI,MAAOzwE,MAAK8wB,YAAYwiB,YAAsD,kBAnMlF08B,KCoCac,GAAkB,GAAI/+D,GAAAA,eAAoB,iBAG1Cg/D,GACT,GAAIh/D,GAAAA,eAAgC,8BAG3Bi/D,GACT,GAAIj/D,GAAAA,eAAqC,8BAchCk/D,IACXzpE,QAASwpE,GACT9vD,MAAOiX,EAAAA,SACP/W,WAAY8vD,iBA8CZ,QAAFzW,GACc5lC,EACAE,EACYm7C,EACoC3/B,EACZD,EACZ6gC,EACxBC,GAPZ,GAAFvxE,GAAAG,IACcA,MAAd60B,SAAcA,EACA70B,KAAd+0B,UAAcA,EACY/0B,KAA1BkwE,UAA0BA,EACoClwE,KAA9DuwC,gBAA8DA,EACZvwC,KAAlDswC,gBAAkDA,EACZtwC,KAAtCmxE,cAAsCA,EACxBnxE,KAAdoxE,kBAAcA,EA5CdpxE,KAAAqxE,2BACArxE,KAAAsxE,2BAAgD,GAAI39D,GAAAA,QACpD3T,KAAAuxE,wBAA6C,GAAI59D,GAAAA,QACjD3T,KAAAwxE,oBAAgC,GAAI74C,KA8BlC34B,KAAFyxE,eAA8CzuB,EAAAA,MAAY,WAAM,MAAAnjD,GAAK6xE,YAAYvsE,OAC3EtF,EAAK8xE,gBACL9xE,EAAK8xE,gBAAgB1nE,KAAKsL,EAAAA,cAAUlT,OAzG1C,MA4EEoJ,QAAFC,eAAM+uD,EAAN91D,UAAA,mBAAE,WACE,MAAO3E,MAAKmxE,cAAgBnxE,KAAKmxE,cAAcO,YAAc1xE,KAAKqxE,yDAIpE5lE,OAAFC,eAAM+uD,EAAN91D,UAAA,mBAAE,WACE,MAAO3E,MAAKmxE,cAAgBnxE,KAAKmxE,cAAc9+C,YAAcryB,KAAKuxE,yDAQpE9lE,OAAFC,eAAM+uD,EAAN91D,UAAA,iBAAE,WACE,MAAO3E,MAAKqyB,6CAGd5mB,OAAFC,eAAM+uD,EAAN91D,UAAA,uBAAE,WACE,GAAMywB,GAASp1B,KAAKmxE,aACpB,OAAO/7C,GAASA,EAAOu8C,gBAAkB3xE,KAAKsxE,4DA2BhD7W,EAAF91D,UAAAgxB,KAAE,SAA0Bi8C,EAClBp8C,GADR,GAAF31B,GAAAG,IAKI,IAFAw1B,EAASq8C,EAAqBr8C,EAAQx1B,KAAKuwC,iBAAmB,GAAIi+B,KAE9Dh5C,EAAO1U,IAAM9gB,KAAK8xE,cAAct8C,EAAO1U,IACzC,KAAMsT,OAAM,mBAAmBoB,EAAO1U,GAA5C,kDAGI,IAAMkV,GAAah2B,KAAK22B,eAAenB,GACjCw5C,EAAkBhvE,KAAK+xE,uBAAuB/7C,EAAYR,GAC1Dw8C,EAAYhyE,KAAKiyE,qBAA2BL,EACA5C,EACAh5C,EACAR,EAWlD,OARKx1B,MAAK0xE,YAAYvsE,QACpBnF,KAAKkyE,+CAGPlyE,KAAK0xE,YAAY9nE,KAAKooE,GACtBA,EAAU9X,cAAch1D,UAAU,WAAM,MAAArF,GAAKsyE,kBAAkBH,KAC/DhyE,KAAKqyB,YAAY1mB,KAAKqmE,GAEfA,GAMTvX,EAAF91D,UAAAytE,SAAE,WACEpyE,KAAKqyE,cAAcryE,KAAK0xE,cAO1BjX,EAAF91D,UAAAmtE,cAAE,SAAchxD,GACZ,MAAO9gB,MAAK0xE,YAAYrxD,KAAK,SAAAiyD,GAAU,MAAAA,GAAOxxD,KAAOA,KAGvD25C,EAAF91D,UAAAsD,YAAE,WAGEjI,KAAKqyE,cAAcryE,KAAKqxE,0BAQlB5W,EAAV91D,UAAAgyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgBx3B,KAAKggD,kBAAkBxqB,EAC7C,OAAOx1B,MAAK60B,SAASqD,OAAOV,IAQtBijC,EAAV91D,UAAAq7C,kBAAA,SAA4BuyB,GACxB,GAAM39D,GAAQ,GAAI6iB,GAAAA,eAChBC,iBAAkB13B,KAAK60B,SAASjhB,WAAW+jB,SAC3C0b,eAAgBk/B,EAAal/B,gBAAkBrzC,KAAKswC,kBACpDpc,WAAYq+C,EAAar+C,WACzB8nB,YAAau2B,EAAav2B,YAC1BntC,UAAW0jE,EAAa1jE,UACxByyC,SAAUixB,EAAajxB,SACvBxsC,UAAWy9D,EAAaz9D,UACxB25D,SAAU8D,EAAa9D,SACvB+D,UAAWD,EAAaC,UACxBC,oBAAqBF,EAAa1D,mBAOpC,OAJI0D,GAAa32B,gBACfhnC,EAAMgnC,cAAgB22B,EAAa32B,eAG9BhnC,GASD6lD,EAAV91D,UAAAotE,uBAAA,SAAiCv+B,EAAqBhe,GAClD,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW,GAAIqB,WACrEo4C,GAAiBh5C,MAEda,EACF,GAAIC,GAAAA,gBAAgB44C,GAAoB15C,EAAOtgB,iBAAkBghB,EAGrE,OAFqBsd,GAAQ59B,OAA2BygB,GAEpCG,UAYdikC,EAAV91D,UAAAstE,qBACA,SAAML,EACA5C,EACAh5C,EACAR,GAIF,GAAMw8C,GACF,GAAIhC,IAAmBh6C,EAAYg5C,EAAiBhvE,KAAKkwE,UAAW16C,EAAO1U,GAW/E,IARI0U,EAAOwmB,aACThmB,EAAW0G,gBAAgBx3B,UAAU,WAC9B8sE,EAAUh0C,cACbg0C,EAAUv3C,UAKZm3C,YAAkC1+D,GAAAA,YACpC87D,EAAgBr7C,qBACd,GAAIxf,GAAAA,eAAkBy9D,EAAsB,MACnC/6C,UAAWrB,EAAO3tB,KAAMmqE,UAFzCA,SAGW,CACL,GAAM97C,GAAWl2B,KAAK82B,gBAAmBtB,EAAQw8C,EAAWhD,GACtDj4C,EAAai4C,EAAgB17C,sBAC/B,GAAIgD,GAAAA,gBAAgBs7C,MAAwBvvE,GAAW6zB,GAC3D87C,GAAU7X,kBAAoBpjC,EAAWP,SAO3C,MAJAw7C,GACGrB,WAAWn7C,EAAOviB,MAAOuiB,EAAOpW,QAChCksB,eAAe9V,EAAO5hB,UAElBo+D,GAWDvX,EAAV91D,UAAAmyB,gBACA,SAAMtB,EACAw8C,EACAhD,GAEF,GAAM/4C,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAM5Ew8C,EAAkB,GAAIt8C,WACzB84C,GAAoBF,IACpB8B,GAAiBt7C,EAAO3tB,OACxBmoE,GAAcgC,IAWjB,QARIx8C,EAAO3mB,WACLonB,GAAiBA,EAAal1B,IAA2Bic,EAAAA,eAAgB,OAC7E01D,EAAgBx5C,IAAIlc,EAAAA,gBAClB/b,MAAOu0B,EAAO3mB,UACd4H,OAAQtG,EAAAA,OAIL,GAAIgmB,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW29C,IAOpDjY,EAAV91D,UAAAwtE,kBAAA,SAA4BH,GACxB,GAAM1nE,GAAQtK,KAAK0xE,YAAY9hE,QAAQoiE,EAEnC1nE,IAAS,IACXtK,KAAK0xE,YAAYrgE,OAAO/G,EAAO,GAI1BtK,KAAK0xE,YAAYvsE,SACpBnF,KAAKwxE,oBAAoBpnE,QAAQ,SAACuoE,EAAergE,GAC3CqgE,EACFrgE,EAAQujD,aAAa,cAAe8c,GAEpCrgE,EAAQijD,gBAAgB,iBAI5Bv1D,KAAKwxE,oBAAoB1/B,QACzB9xC,KAAK2xE,gBAAgBhmE,UAQnB8uD,EAAV91D,UAAAutE,wDACI,GAAMU,GAAmB5yE,KAAKoxE,kBAAkByB,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAc3oE,SAEvCa,EAAI+nE,EAAS5tE,OAAS,EAAG6F,GAAK,EAAGA,IAAK,CAC7C,GAAIgoE,GAAUD,EAAS/nE,EAEnBgoE,KAAYJ,GACO,WAArBI,EAAQhiC,UACa,UAArBgiC,EAAQhiC,UACPgiC,EAAQxnB,aAAa,eAEtBxrD,KAAKwxE,oBAAoBt4C,IAAI85C,EAASA,EAAQC,aAAa,gBAC3DD,EAAQnd,aAAa,cAAe,WAOpC4E,EAAV91D,UAAA0tE,cAAA,SAAwBa,GAGpB,IAFA,GAAIloE,GAAIkoE,EAAQ/tE,OAET6F,KAKLkoE,EAAQloE,GAAGyvB,wBA9SjBz7B,KAAC+hB,EAAAA,iDA1DD/hB,KAAEm5B,EAAAA,UAYFn5B,KAAEq5B,EAAAA,WALFr5B,KAAQm0E,EAAAA,SAAR1xE,aAAAzC,KA6FOsD,EAAAA,aACPtD,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0BovE,QAC1B/xE,SAAAqD,GAAAZ,aAAAzC,KAAOuD,EAAAA,OAAPZ,MAAcqvE,QACdhyE,KAAqDy7D,EAArDh5D,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBmiB,EAAAA,aArGnBniB,KAAEo0E,EAAAA,oBAZF3Y,KCqBI4Y,GAAmB,gBAuBrB,QAAFC,GACuBtB,EACX9xE,EACA85D,GAFWh6D,KAAvBgyE,UAAuBA,EACXhyE,KAAZE,YAAYA,EACAF,KAAZg6D,QAAYA,EAVVh6D,KAAFuU,UAA2C,eArC3C,MAiDE++D,GAAF3uE,UAAAuP,SAAE,WACOlU,KAAKgyE,YAMRhyE,KAAKgyE,UAAYuB,EAAiBvzE,KAAKE,YAAaF,KAAKg6D,QAAQ0X,eAIrE4B,EAAF3uE,UAAAoP,YAAE,SAAY9O,GACV,GAAMuuE,GAAgBvuE,EAA1B,iBAAqDA,EAArD,qBAEQuuE,KACFxzE,KAAKswE,aAAekD,EAActtB,8BAtCxClnD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mDACVvC,SAAU,iBACVpD,MACE2D,UAAW,gCACXorC,oBAAqB,YACrBvuC,KAAQ,kDAdZA,KAAQgxE,GAARvuE,aAAAzC,KA2BKsD,EAAAA,aA9BLtD,KAAE0I,EAAAA,aAEF1I,KAAQy7D,wBAoBRlmD,YAAAvV,KAAGO,EAAAA,MAAHoC,MAAS,gBAGT2uE,eAAAtxE,KAAGO,EAAAA,MAAHoC,MAAS,sBAET8xE,kBAAAz0E,KAAGO,EAAAA,MAAHoC,MAAS,qBA1CT2xE,mBAmFE,QAAFI,GACwB9Z,EACZ15D,EACA85D,GAFYh6D,KAAxB45D,WAAwBA,EACZ55D,KAAZE,YAAYA,EACAF,KAAZg6D,QAAYA,EALVh6D,KAAF8gB,GAAgB,oBAAoBuyD,KAjFpC,MAwFEK,GAAF/uE,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,IACSA,MAAK45D,aACR55D,KAAK45D,WAAa2Z,EAAiBvzE,KAAKE,YAAaF,KAAKg6D,QAAQ0X,cAGhE1xE,KAAK45D,YACProD,QAAQC,UAAUC,KAAK,WACrB,GAAMmlB,GAAY/2B,EAAK+5D,WAAWqW,kBAE9Br5C,KAAcA,EAAU04C,kBAC1B14C,EAAU04C,gBAAkBzvE,EAAKihB,sBA1B3C9hB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACVvC,SAAU,iBACVpD,MACEC,MAAS,mBACT6jC,OAAQ,8CA3DZtjC,KAAQgxE,GAARvuE,aAAAzC,KAkEKsD,EAAAA,aArELtD,KAAE0I,EAAAA,aAEF1I,KAAQy7D,wBAgER35C,KAAA9hB,KAAGO,EAAAA,SAjFHm0E,iCAAA,sBA6GA10E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,+DACV3F,MAAOC,MAAS,0BA/GlBk1E,iCAAA,sBAwHA30E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,+DACV3F,MAAOC,MAAS,0BA1HlBm1E,iCCAA,sBAuBA50E,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAyxB,EAAAA,cACAvxB,EAAAA,aACAD,IAEFK,SACE8rE,GACAoE,GACAI,GACAC,GACAC,GACA7wE,IAEFU,cACEyrE,GACAoE,GACAI,GACAE,GACAD,IAEFpsE,WACEkzD,GACAwW,IAEFz8C,iBAAkB06C,QAjDpB5P,KCYauU,GAAuBC,EAAAA,+FAZpC,MA+ByCpvE,GAAzCqvE,EAAAj0E,GACE2L,OAAFC,eACMqoE,EADNpvE,UAAA,0BAAE,WACmC,MAAO3E,MAAKg0E,aAC/C,SAAuB/yE,GAAiBjB,KAAKg0E,QAAU/yE,mCAEvDwK,OAAFC,eACMqoE,EADNpvE,UAAA,0BAAE,WACmC,MAAO3E,MAAKi0E,aAC/C,SAAuBhzE,GAAiBjB,KAAKi0E,QAAUhzE,mCAEvDwK,OAAFC,eACMqoE,EADNpvE,UAAA,mBAAE,WAC6B,MAAO3E,MAAKs7B,aACzC,SAAgBr6B,GAAkBjB,KAAKs7B,QAAUr6B,mCAEjDwK,OAAFC,eACMqoE,EADNpvE,UAAA,2BAAE,WACqC,MAAO3E,MAAKs7B,aACjD,SAAwBr6B,GAAkBjB,KAAKs7B,QAAUr6B,kDA3B3DjC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,wDACVvC,SAAU,sBACVC,QAAS,qBAAsB,sBAC/BrD,MACEC,MAAS,qCAGTy1E,KAAQ,IACR3V,UAAW,6CAIf4V,qBAAAn1E,KAAGO,EAAAA,QAIH60E,qBAAAp1E,KAAGO,EAAAA,QAIH80E,cAAAr1E,KAAGO,EAAAA,MAAHoC,MAAS,kBAIT2yE,sBAAAt1E,KAAGO,EAAAA,SA5CHw0E,GA+ByCF,ICd5B3V,GACT,GAAInsD,GAAAA,eAA6B,4BCoB/BwiE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEx0C,GAAe,EAInBy0C,GAAA,WACE,QAAFA,GAAqB7yB,EACAC,EACAC,EAEAC,GAJA9hD,KAArB2hD,0BAAqBA,EACA3hD,KAArB4hD,YAAqBA,EACA5hD,KAArB6hD,iBAAqBA,EAEA7hD,KAArB8hD,UAAqBA,EA3DrB,MAAA0yB,MA6DaC,GACTzyB,EAAgBwyB,mBAiKlB,QAAFE,GACcx0E,EACAqE,EAEiBu9C,EACfF,EACAC,EACZF,EACsDgzB,EAC9CC,EACR/1C,GAVF,GAAFh/B,GAYIC,EAZJC,KAAAC,KAYU2hD,EAA2BC,EAAaC,EAAkBC,IAZpE9hD,IACcH,GAAdK,YAAcA,EACAL,EAAd0E,UAAcA,EAEiB1E,EAA/BiiD,UAA+BA,EAKnBjiD,EAAZ+0E,iBAAYA,EA3IV/0E,EAAFyiD,KAAmB,aAAaviB,KAO9BlgC,EAAFg1E,WAAc,EAGZh1E,EAAFi1E,iBAAoB,EAMlBj1E,EAAFqtE,SAAqB,EAMnBrtE,EAAFyjD,aAAyC,GAAI3vC,GAAAA,QAM3C9T,EAAFijD,YAAwB,YAMtBjjD,EAAFk1E,YAAe,EAuBbl1E,EAAFgnC,WAAwB,EAwBtBhnC,EAAF+gC,WAAwB,EAgBtB/gC,EAAFm1E,MAAoB,OAsBpBn1E,EAAAo1E,WAAsB,EAEpBp1E,EAAFq1E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACA5vE,OAAO,SAAA6vE,GAAK,MAAAC,GAAAA,yBAAyBp8C,IAAIm8C,IAgBzC,IAAM7iE,GAAUzS,EAAKK,YAAYI,oBAIjCT,GAAKw1E,oBAAsBV,GAAsBriE,EAEjDzS,EAAKy1E,qBAAuBz1E,EAAKoB,MAGjCpB,EAAKihB,GAAKjhB,EAAKihB,GAKXvc,EAAUqsC,KACZ/R,EAAOpsB,kBAAkB,WACvBvS,EAAYI,cAAcywC,iBAAiB,QAAS,SAACzvC,GACnD,GAAIi0E,GAAKj0E,EAAgC,MACpCi0E,GAAGt0E,OAAUs0E,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhC71E,EAAKg1E,WAAah1E,EAAK0E,UAAUO,UACjCjF,EAAKi1E,gBAAqD,WAAnCxiE,EAAQ0+B,SAASthC,cAEpC7P,EAAKi1E,kBACPj1E,EAAKijD,YAAc,EAA+BhY,SAAW,6BACA,uBAhRnE,MA2F8BpmC,GAA9BgwE,EAAA50E,GA0CE2L,OAAFC,eACMgpE,EADN/vE,UAAA,gBAAE,WAEE,MAAI3E,MAAK8hD,WAAyC,OAA5B9hD,KAAK8hD,UAAUnhD,SAC5BX,KAAK8hD,UAAUnhD,SAEjBX,KAAK6mC,eAEd,SAAa5lC,GACXjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,GAInCjB,KAAKktE,UACPltE,KAAKktE,SAAU,EACfltE,KAAKsjD,aAAa33C,yCAStBF,OAAFC,eACMgpE,EADN/vE,UAAA,UAAE,WACmB,MAAO3E,MAAK0jD,SAC/B,SAAOziD,GAAiBjB,KAAK0jD,IAAMziD,GAASjB,KAAKsiD,sCAajD72C,OAAFC,eACMgpE,EADN/vE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAAkBjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,oCAItEwK,OAAFC,eACMgpE,EADN/vE,UAAA,YAAE,WACqB,MAAO3E,MAAKg1E,WACjC,SAAS/zE,GACPjB,KAAKg1E,MAAQ/zE,GAAS,OACtBjB,KAAK21E,iBAKA31E,KAAK41E,eAAiBR,EAAAA,yBAAyBp8C,IAAIh5B,KAAKg1E,SAC1Dh1E,KAAKE,YAA6C,cAAElB,KAAOgB,KAAKg1E,wCAYrEvpE,OAAFC,eACMgpE,EADN/vE,UAAA,aAAE,WACsB,MAAO3E,MAAKq1E,oBAAoBp0E,WACtD,SAAUA,GACJA,IAAUjB,KAAKiB,QACjBjB,KAAKq1E,oBAAoBp0E,MAAQA,EACjCjB,KAAKsjD,aAAa33C,yCAKtBF,OAAFC,eACMgpE,EADN/vE,UAAA,gBAAE,WAC0B,MAAO3E,MAAKi1E,eACtC,SAAah0E,GAAkBjB,KAAKi1E,UAAYj3D,EAAAA,sBAAsB/c,oCAiEtEyzE,EAAF/vE,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,IACQA,MAAKuE,UAAUO,WACjB9E,KAAK40E,iBAAiB9zE,QAAQd,KAAKE,YAAYI,eAAe4E,UAAU,SAAA5D,GACtEzB,EAAKk1E,WAAazzE,EAAMu0E,aACxBh2E,EAAKyjD,aAAa33C,UAKxB+oE,EAAF/vE,UAAAoP,YAAE,WACE/T,KAAKsjD,aAAa33C,QAGpB+oE,EAAF/vE,UAAAsD,YAAE,WACEjI,KAAKsjD,aAAarvC,WAEdjU,KAAKuE,UAAUO,WACjB9E,KAAK40E,iBAAiBvzE,eAAerB,KAAKE,YAAYI,gBAI1Do0E,EAAF/vE,UAAA+4B,UAAE,WACM19B,KAAK8hD,WAIP9hD,KAAKmkD,mBAMPnkD,KAAK81E,0BAIPpB,EAAF/vE,UAAAkT,MAAE,WAAgB7X,KAAKE,YAAYI,cAAcuX,SAG/C68D,EAAF/vE,UAAAka,cAAE,SAAck3D,GACRA,IAAc/1E,KAAKktE,SAAYltE,KAAKg2E,WACtCh2E,KAAKktE,QAAU6I,EACf/1E,KAAKsjD,aAAa33C,SAItB+oE,EAAF/vE,UAAAk5D,SAAE,aAWU6W,EAAZ/vE,UAAAmxE,uBAAE,WACE,GAAM9wC,GAAWhlC,KAAKE,YAAYI,cAAcW,KAE5CjB,MAAKs1E,uBAAyBtwC,IAChChlC,KAAKs1E,qBAAuBtwC,EAC5BhlC,KAAKsjD,aAAa33C,SAKZ+oE,EAAZ/vE,UAAAgxE,cAAE,WACE,GAAIpB,GAAwB3kE,QAAQ5P,KAAKg1E,QAAU,EACjD,KAAMiB,GAAgCj2E,KAAKg1E,QAKrCN,EAAZ/vE,UAAAuxE,cAAE,WACE,MAAOl2E,MAAKk1E,sBAAsBtlE,QAAQ5P,KAAKg1E,QAAU,GAIjDN,EAAZ/vE,UAAAwxE,YAAE,WAEE,GAAIC,GAAYp2E,KAAKE,YAA6C,cAAEk2E,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZ/vE,UAAAixE,YAAE,WACE,MAAiE,aAA1D51E,KAAKE,YAAYI,cAAc0wC,SAASthC,eAOjDjE,OAAFC,eAAMgpE,EAAN/vE,UAAA,aAAE,WACE,QAAQ3E,KAAKk2E,iBAAoBl2E,KAAKE,YAAYI,cAAcW,OAAUjB,KAAKm2E,eAC1En2E,KAAK+0E,6CAOZtpE,OAAFC,eAAMgpE,EAAN/vE,UAAA,wBAAE,WACE,GAAI3E,KAAK80E,gBAAiB,CAIxB,GAAMwB,GAAgBt2E,KAAKE,YAA8C,aAEzE,OAAOo2E,GAAcxrC,WAAa9qC,KAAKstC,SAAWgpC,EAAcrrC,QAAQ,GAAGzmB,OACvExkB,KAAKktE,QAET,MAAOltE,MAAKktE,UAAYltE,KAAKstC,uCAQjConC,EAAF/vE,UAAAqoC,kBAAE,SAAkBC,GAAiBjtC,KAAKktC,iBAAmBD,EAAIE,KAAK,MAMpEunC,EAAF/vE,UAAAyoC,iBAAE,WAIOptC,KAAKktE,SACRltE,KAAK6X,wBAvVX7Y,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4HAEVvC,SAAU,WACVpD,MAIEC,MAAS,oDACT83E,2BAA4B,YAG5B/tC,YAAa,KACbslC,qBAAsB,cACtBxP,aAAc,WACdkY,aAAc,WACdC,kBAAmB,uCACnB5oC,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBve,SAAU,uBACVD,UAAW,sBACXsvC,UAAW,cAEbh3D,YAAaC,QAAS6mC,GAAqB5mC,YAAaitE,4CA3E1D11E,KAAE0I,EAAAA,aALF1I,KAAgCoD,EAAAA,WAehCpD,KAA4B0vC,EAAAA,UAA5BjtC,aAAAzC,KA2MKsD,EAAAA,WA3MLtD,KA2MiB2vC,EAAAA,SA3MjB3vC,KAAuCuvC,EAAAA,OAAvC9sC,aAAAzC,KA4MKsD,EAAAA,aA5MLtD,KAAQwvC,EAAAA,mBAAR/sC,aAAAzC,KA6MKsD,EAAAA,aAzMLtD,KAAEinB,KA2MFjnB,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiB2vC,EAAAA,OAAjB3vC,KAAyBuD,EAAAA,OAAzBZ,MAAgCu8D,QA7NhCl/D,KAAQ03E,EAAAA,kBAOR13E,KAAEC,EAAAA,4BAoHF0B,WAAA3B,KAAGO,EAAAA,QAuBHuhB,KAAA9hB,KAAGO,EAAAA,QASHuqC,cAAA9qC,KAAGO,EAAAA,QAMHojC,WAAA3jC,KAAGO,EAAAA,QAMHP,OAAAA,KAAGO,EAAAA,QAgBH6vC,oBAAApwC,KAAGO,EAAAA,QAMH0B,QAAAjC,KAAGO,EAAAA,QAUHy2E,WAAAh3E,KAAGO,EAAAA,SAjNHm1E,GA2F8BD,gCC3F9B,sBAiBAz1E,KAAC4D,EAAAA,SAADjB,OACE8B,cAAeixE,GAAUX,IACzBlxE,SACEC,EAAAA,aACA6zE,EAAAA,gBACAnnC,IAEFpsC,SACEuzE,EAAAA,gBAGAnnC,GACAklC,GACAX,IAEFxsE,WAAY0e,QAhCd2wD,gCCmBE52E,KAAFiF,QAAoC,GAAI0O,GAAAA,QAGtC3T,KAAF62E,cAA0B,WAGxB72E,KAAF82E,kBAA8B,gBAG5B92E,KAAF0qE,eAA2B,iBAGzB1qE,KAAF8qE,eAA2B,aAGzB9qE,KAAF2qE,cAA0B,gBAGxB3qE,KAAF+qE,cAA0B,YAGxB/qE,KAAF6qE,mBAA+B,oBAG7B7qE,KAAFgrE,mBAA+B,gBAG7BhrE,KAAFyqE,uBAAmC,cAGjCzqE,KAAFwqE,2BAAuC,wBAjDvC,sBAaAxrE,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,8GAbzB6tD,KpBwBAoI,GAAA,WACE,QAAFA,GAAqBhnE,EACA81E,EACAxiE,EACA+mB,GAHAt7B,KAArBiB,MAAqBA,EACAjB,KAArB+2E,aAAqBA,EACA/2E,KAArBuU,UAAqBA,EACAvU,KAArBs7B,QAAqBA,EA5BrB,MAAA2sC,oBAoFE,QAAFzI,GAAsBt/D,EAA8CiS,GAA9CnS,KAAtBE,YAAsBA,EAA8CF,KAApEmS,QAAoEA,EAjBlEnS,KAAFkkE,QAAqB,EAGnBlkE,KAAFmkE,wBAAoC,EAGlCnkE,KAAFokE,WAAwB,EAMtBpkE,KAAFqkE,gBAA6B,EAG3BrkE,KAAFskE,oBAAiE,GAAI/tD,GAAAA,aAArE,MAIEipD,GAAF76D,UAAAqyE,aAAE,SAAalP,IACN9nE,KAAKmkE,wBAA2B2D,EAAKxsC,UAG1Ct7B,KAAKskE,oBAAoBptD,KAAK4wD,EAAK7mE,QAIrCwK,OAAFC,eAAM8zD,EAAN76D,UAAA,uBAAE,WACE,MAAO3E,MAAKk0E,MAAQl0E,KAAKk0E,KAAK/uE,QAAUnF,KAAKk0E,KAAK,GAAG/uE,OACjDnF,KAAKkkE,QAAUlkE,KAAKk0E,KAAK,GAAG/uE,OAAS,mCAG3Cq6D,EAAF76D,UAAAsyE,cAAE,SAAchrB,EAAkBwC,GAC9B,GAAIyoB,GAAajrB,EAAWjsD,KAAKkkE,QAAUzV,CAO3C,OAJIxC,KACFirB,GAAcl3E,KAAKm3E,iBAGdD,GAAcl3E,KAAKokE,YAI5B5E,EAAF76D,UAAAqiE,iBAAE,WAAA,GAAFnnE,GAAAG,IACIA,MAAKmS,QAAQM,kBAAkB,WAC7B5S,EAAKsS,QAAQ4qC,SAAS3qB,eAAenoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC3D,GAAMk/D,GACFvkE,EAAKK,YAAYI,cAAcylD,cAAc,4BAE7Cqe,IACFA,EAAWvsD,4BAlFrB7Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,y4CACVC,QAAF,40BACE1H,MACFC,MAAA,oBACMyI,KAAN,OACIkwE,gBAAJ,QAEAx1E,SAAA,kBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BAygE,EAAAngE;yBAoCA0kE,aAAA/kE,KAAQO,EAAAA,QAGRykE,gBAAAhlE,KAAAO,EAAAA,QAGA0kE,wBAAQjlE,KAARO,EAAAA,QAGA2kE,UAAAllE,KAAAO,EAAAA,QAGA4kE,yBAAAnlE,KAAAO,EAAAA,QAGA6kE,aAAAplE,KAAAO,EAAAA,QAGA8kE,kBAAArlE,KAAAO,EAAAA,QAGA+kE,sBAAAtlE,KAAAwY,EAAAA,UASAgoD,mBCkDE,QAAFC,GAAsBrnD,EACsCkjD,EAC3B5C,EACCviD,GAC9B,GAJkBnW,KAAtBoY,mBAAsBA,EACsCpY,KAA5Ds7D,aAA4DA,EAC3Bt7D,KAAjC04D,aAAiCA,EACC14D,KAAlCmW,KAAkCA,EAnChCnW,KAAFukE,eAA8D,GAAIhuD,GAAAA,aAGhEvW,KAAFwkE,eAA0D,GAAIjuD,GAAAA,aAG5DvW,KAAFykE,iBAAyD,GAAIluD,GAAAA,cA8BpDvW,KAAK04D,aACR,KAAMC,GAA2B,cAEnC,KAAK34D,KAAKs7D,aACR,KAAM3C,GAA2B,mBAGnC,IAAM+L,GAAiB1kE,KAAK04D,aAAaiM,oBACnCC,EAAiB5kE,KAAK04D,aAAamM,kBAAkB,UACrDC,EAAe9kE,KAAK04D,aAAamM,kBAAkB,QAGrDE,EAAWD,EAAa34D,IAAI,SAAC64D,EAAMh6D,GACrC,OAAQg6D,KAAdA,EAAoBC,OAAQL,EAAe55D,KAEvChL,MAAKklE,UAAYH,EAAS3/D,MAAMs/D,GAAgBS,OAAOJ,EAAS3/D,MAAM,EAAGs/D,IAEzE1kE,KAAKolE,YAAcplE,KAAK04D,aAAa2M,QA5CzC,MAnDE55D,QAAFC,eACM+zD,EADN96D,UAAA,kBAAE,WACsB,MAAO3E,MAAKolE,iBAClC,SAAenkE,GACb,GAAMqkE,GAAgBtlE,KAAKolE,YACrBG,EACFvlE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,KAAWjB,KAAK04D,aAAa2M,OACxFrlE,MAAKolE,YAAcplE,KAAK04D,aAAa8M,UAAUD,EAAWvlE,KAAKylE,QAASzlE,KAAK0lE,SACxE1lE,KAAK2lE,qBAAqBL,EAAetlE,KAAKolE,cACjDplE,KAAK4lE,yCAMTn6D,OAAFC,eACM+zD,EADN96D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,IACxEjB,KAAK6lE,cAAgB7lE,KAAK8lE,uBAAuB9lE,KAAK0mC,4CAKxDj7B,OAAFC,eACM+zD,EADN96D,UAAA,eAAE,WAC0B,MAAO3E,MAAK+lE,cACtC,SAAY9kE,GACVjB,KAAK+lE,SAAW/lE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAKzEwK,OAAFC,eACM+zD,EADN96D,UAAA,eAAE,WAC0B,MAAO3E,MAAKgmE,cACtC,SAAY/kE,GACVjB,KAAKgmE,SAAWhmE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAgEzEw+D,EAAF96D,UAAAqD,mBAAE,WACEhI,KAAK4lE,SAIPnG,EAAF96D,UAAAshE,cAAE,SAAc5M,GACZ,GAAIr5D,KAAK6lE,eAAiBxM,EAAM,CAC9B,GAAM6M,GAAelmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAC9CC,EAAgBrmE,KAAK04D,aAAa4N,SAAStmE,KAAKomE,YAChDG,EAAevmE,KAAK04D,aAAa8N,WAAWN,EAAcG,EAAehN,EAE/Er5D,MAAKukE,eAAertD,KAAKqvD,GAG3BvmE,KAAKwkE,eAAettD,QAItBuoD,EAAF96D,UAAA8hE,2BAAE,SAA2BnlE,GAKzB,GAAMgkE,GAAgBtlE,KAAKolE,YACrBxtC,EAAQ53B,KAAK4qC,QAEnB,QAAQtpC,EAAMsY,SACZ,IAAKiT,GAAAA,WACH7sB,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,YAAaxtC,EAAQ,GAAK,EACnF,MACF,KAAK7K,GAAAA,YACH/sB,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,YAAaxtC,GAAS,EAAI,EACnF,MACF,KAAK9K,GAAAA,SACH9sB,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,aAAc,EACvE,MACF,KAAKp4C,GAAAA,WACHhtB,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,YAAa,EACtE,MACF,KAAKvrD,GAAAA,KACH7Z,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,YACrD,EAAIplE,KAAK04D,aAAaiO,QAAQ3mE,KAAKolE,aACvC,MACF,KAAKrrD,GAAAA,IACH/Z,KAAKomE,WAAapmE,KAAK04D,aAAagO,gBAAgB1mE,KAAKolE,YACpDplE,KAAK04D,aAAakO,kBAAkB5mE,KAAKolE,aACxCplE,KAAK04D,aAAaiO,QAAQ3mE,KAAKolE,aACrC,MACF,KAAK14C,GAAAA,QACH1sB,KAAKomE,WAAa9kE,EAAMyjD,OACpB/kD,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,aAAc,GACtDplE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,aAAc,EAC3D,MACF,KAAKx4C,GAAAA,UACH5sB,KAAKomE,WAAa9kE,EAAMyjD,OACpB/kD,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YAAa,GACrDplE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,YAAa,EAC1D,MACF,KAAKnrD,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANKla,KAAK+mE,aAAc/mE,KAAK+mE,WAAW/mE,KAAKolE,eAC3CplE,KAAKimE,cAAcjmE,KAAK04D,aAAaiO,QAAQ3mE,KAAKolE,cAClDplE,KAAKwkE,eAAettD,OAEpB5V,EAAMC,kBAGV,SAEE,OAGAvB,KAAK04D,aAAa4D,YAAYgJ,EAAetlE,KAAKomE,aACpDpmE,KAAKykE,iBAAiBvtD,KAAKlX,KAAKomE,YAGlCpmE,KAAKgnE,mBAEL1lE,EAAMC,kBAIRk+D,EAAF96D,UAAAihE,MAAE,WACE5lE,KAAK6lE,cAAgB7lE,KAAK8lE,uBAAuB9lE,KAAK8kB,UACtD9kB,KAAKinE,WAAajnE,KAAK8lE,uBAAuB9lE,KAAK04D,aAAa2M,SAChErlE,KAAKknE,YACDlnE,KAAK04D,aAAayO,cAAc,SAASnnE,KAAK04D,aAAa4N,SAAStmE,KAAKomE,aACpEgB,mBAET,IAAIC,GAAernE,KAAK04D,aAAa8N,WAAWxmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAC3EpmE,KAAK04D,aAAa4N,SAAStmE,KAAKomE,YAAa,EACjDpmE,MAAKsnE,kBAhNa,EAiNGtnE,KAAK04D,aAAa6O,aAAaF,GAC/CrnE,KAAK04D,aAAaiM,qBAlNL,EAoNlB3kE,KAAKwnE,mBACLxnE,KAAKoY,mBAAmBxB,gBAI1B6oD,EAAF96D,UAAAqiE,iBAAE,WACEhnE,KAAKynE,iBAAiBT,oBAIhBvH,EAAV96D,UAAA6iE,4BACI,GAAME,GAAc1nE,KAAK04D,aAAakO,kBAAkB5mE,KAAKomE,YACvDuB,EAAY3nE,KAAK04D,aAAakP,cACpC5nE,MAAK6nE,WACL,KAAK,GAAI78D,GAAI,EAAG88D,EAAO9nE,KAAKsnE,iBAAkBt8D,EAAI08D,EAAa18D,IAAK88D,IAAQ,CAlO1D,GAmOZA,IACF9nE,KAAK6nE,OAAOj+D,SACZk+D,EAAO,EAET,IAAMzO,GAAOr5D,KAAK04D,aAAa8N,WACzBxmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAC/BpmE,KAAK04D,aAAa4N,SAAStmE,KAAKomE,YAAap7D,EAAI,GACjDswB,EAAUt7B,KAAK+nE,kBAAkB1O,GACjC9kD,EAAYvU,KAAK04D,aAAaqF,OAAO1E,EAAMr5D,KAAKs7D,aAAa0C,QAAQgK,cAC3EhoE,MAAK6nE,OAAO7nE,KAAK6nE,OAAO1iE,OAAS,GAC5ByE,KAAK,GAAIq+D,IAAgBj9D,EAAI,EAAG28D,EAAU38D,GAAIuJ,EAAW+mB,MAK1DmkC,EAAV96D,UAAAojE,kBAAA,SAA4B1O,GACxB,QAASA,KACHr5D,KAAK+mE,YAAc/mE,KAAK+mE,WAAW1N,OACnCr5D,KAAKylE,SAAWzlE,KAAK04D,aAAa4D,YAAYjD,EAAMr5D,KAAKylE,UAAY,MACrEzlE,KAAK0lE,SAAW1lE,KAAK04D,aAAa4D,YAAYjD,EAAMr5D,KAAK0lE,UAAY,IAOrEjG,EAAV96D,UAAAmhE,uBAAA,SAAiCzM,GAC7B,MAAOA,IAAQr5D,KAAK2lE,qBAAqBtM,EAAMr5D,KAAKomE,YAChDpmE,KAAK04D,aAAaiO,QAAQtN,GAAQ,MAIhCoG,EAAV96D,UAAAghE,qBAAA,SAA+BuC,EAAcC,GACzC,SAAUD,IAAMC,GAAMnoE,KAAK04D,aAAa4N,SAAS4B,IAAOloE,KAAK04D,aAAa4N,SAAS6B,IACzEnoE,KAAK04D,aAAayN,QAAQ+B,IAAOloE,KAAK04D,aAAayN,QAAQgC,KAO/D1I,EAAV96D,UAAAy3D,oBAAA,SAA8BprD,GAC1B,MAAQhR,MAAK04D,aAAauF,eAAejtD,IAAQhR,KAAK04D,aAAa0E,QAAQpsD,GAAQA,EAAM,MAInFyuD,EAAV96D,UAAAimC,kBACI,MAAO5qC,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,sBA3QlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACE8B,SAAU,kkBACVrE,SAAU,eACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAC,KAAE27D,GAAFl5D,aAAAzC,KAAAsD,EAAAA,aA8GAtD,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAAsD,EAAAA,cAnGAm9D,EAAApgE,sEAwBAomE,UAAAzmE,KAAAO,EAAAA,QAcAmmE,UAAA1mE,KAAAO,EAAAA,QASAwnE,aAAA/nE,KAAAO,EAAAA,QAQAglE,iBAAAvlE,KAAAwY,EAAAA,SAQAgtD,iBAAAxlE,KAAAwY,EAAAA,SAGAitD,mBAAAzlE,KAAAwY,EAAAA,SAGAiwD,mBAAAzoE,KAAAsV,EAAAA,UAAA3S,MAAA69D,OAMAC,mBCUE,QAAFE,GAAsBvnD,EACWsgD,EACCviD,GAC9B,GAHkBnW,KAAtBoY,mBAAsBA,EACWpY,KAAjC04D,aAAiCA,EACC14D,KAAlCmW,KAAkCA,EAtBhCnW,KAAFukE,eAAuD,GAAIhuD,GAAAA,aAGzDvW,KAAF86D,aAAqD,GAAIvkD,GAAAA,aAGvDvW,KAAFykE,iBAAyD,GAAIluD,GAAAA,cAiBpDvW,KAAK04D,aACR,KAAMC,GAA2B,cAGnC34D,MAAKolE,YAAcplE,KAAK04D,aAAa2M,QAlBzC,MApDE55D,QAAFC,eACMi0D,EADNh7D,UAAA,kBAAE,WACsB,MAAO3E,MAAKolE,iBAClC,SAAenkE,GACb,GAAIqkE,GAAgBtlE,KAAKolE,YACnBG,EACFvlE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,KAAWjB,KAAK04D,aAAa2M,OACxFrlE,MAAKolE,YAAcplE,KAAK04D,aAAa8M,UAAUD,EAAWvlE,KAAKylE,QAASzlE,KAAK0lE,SACzE/zD,KAAKg6B,MAAM3rC,KAAK04D,aAAayN,QAAQb,GA1BjB,KA2BpB3zD,KAAKg6B,MAAM3rC,KAAK04D,aAAayN,QAAQnmE,KAAKolE,aA3BtB,KA4BtBplE,KAAK4lE,yCAMTn6D,OAAFC,eACMi0D,EADNh7D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,IACxEjB,KAAKooE,cAAgBpoE,KAAK0mC,WAAa1mC,KAAK04D,aAAayN,QAAQnmE,KAAK0mC,4CAKxEj7B,OAAFC,eACMi0D,EADNh7D,UAAA,eAAE,WAC0B,MAAO3E,MAAK+lE,cACtC,SAAY9kE,GACVjB,KAAK+lE,SAAW/lE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAKzEwK,OAAFC,eACMi0D,EADNh7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKgmE,cACtC,SAAY/kE,GACVjB,KAAKgmE,SAAWhmE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAsCzE0+D,EAAFh7D,UAAAqD,mBAAE,WACEhI,KAAK4lE,SAIPjG,EAAFh7D,UAAAihE,MAAE,WAAA,GAAF/lE,GAAAG,IACIA,MAAKqoE,WAAaroE,KAAK04D,aAAayN,QAAQnmE,KAAK04D,aAAa2M,QAC9D,IAAIiD,GAAatoE,KAAK04D,aAAayN,QAAQnmE,KAAKolE,aAC5CmD,EAAeD,EApGK,EAqGxBtoE,MAAKwoE,SACL,KAAK,GAAIx9D,GAAI,EAAGoiD,KAAoBpiD,EAtGZ,GAsG8BA,IACpDoiD,EAAIxjD,KAAK0+D,EAAaC,EAAev9D,GArGhB,GAsGjBoiD,EAAIjoD,SACNnF,KAAKwoE,OAAO5+D,KAAKwjD,EAAIjhD,IAAI,SAAAs8D,GAAQ,MAAA5oE,GAAK6oE,mBAAmBD,MACzDrb,KAGJptD,MAAKoY,mBAAmBxB,gBAI1B+oD,EAAFh7D,UAAAgkE,cAAE,SAAcF,GACZzoE,KAAK86D,aAAa5jD,KAAKlX,KAAK04D,aAAa8N,WAAWiC,EAAM,EAAG,GAC7D,IAAIG,GAAQ5oE,KAAK04D,aAAa4N,SAAStmE,KAAKomE,YACxCsB,EACA1nE,KAAK04D,aAAakO,kBAAkB5mE,KAAK04D,aAAa8N,WAAWiC,EAAMG,EAAO,GAClF5oE,MAAKukE,eAAertD,KAAKlX,KAAK04D,aAAa8N,WAAWiC,EAAMG,EACxDj3D,KAAKE,IAAI7R,KAAK04D,aAAaiO,QAAQ3mE,KAAKomE,YAAasB,MAI3D/H,EAAFh7D,UAAA8hE,2BAAE,SAA2BnlE,GAKzB,GAAMgkE,GAAgBtlE,KAAKolE,YACrBxtC,EAAQ53B,KAAK4qC,QAEnB,QAAQtpC,EAAMsY,SACZ,IAAKiT,GAAAA,WACH7sB,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YAAaxtC,EAAQ,GAAK,EACpF,MACF,KAAK7K,GAAAA,YACH/sB,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YAAaxtC,GAAS,EAAI,EACpF,MACF,KAAK9K,GAAAA,SACH9sB,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,aAzIvC,EA0InB,MACF,KAAKp4C,GAAAA,WACHhtB,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YA5IvC,EA6InB,MACF,KAAKvrD,GAAAA,KACH7Z,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,aACrDplE,KAAK04D,aAAayN,QAAQnmE,KAAKolE,aAlJhB,GAmJpB,MACF,KAAKrrD,GAAAA,IACH/Z,KAAKomE,WAAapmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YArJtC,GAsJDplE,KAAK04D,aAAayN,QAAQnmE,KAAKolE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAK14C,GAAAA,QACH1sB,KAAKomE,WACDpmE,KAAK04D,aAAamO,iBACd7mE,KAAKolE,YAAa9jE,EAAMyjD,QAAS,KA3JrB,GA4JpB,MACF,KAAKn4B,GAAAA,UACH5sB,KAAKomE,WACDpmE,KAAK04D,aAAamO,iBACd7mE,KAAKolE,YAAa9jE,EAAMyjD,OAAS8jB,IAhKrB,GAiKpB,MACF,KAAK5uD,GAAAA,MACL,IAAKC,GAAAA,MACHla,KAAK2oE,cAAc3oE,KAAK04D,aAAayN,QAAQnmE,KAAKolE,aAClD,MACF,SAEE,OAGAplE,KAAK04D,aAAa4D,YAAYgJ,EAAetlE,KAAKomE,aACpDpmE,KAAKykE,iBAAiBvtD,KAAKlX,KAAKomE,YAGlCpmE,KAAKgnE,mBAEL1lE,EAAMC,kBAGRo+D,EAAFh7D,UAAAmkE,eAAE,WACE,MAAO9oE,MAAK04D,aAAayN,QAAQnmE,KAAKomE,YArLd,IAyL1BzG,EAAFh7D,UAAAqiE,iBAAE,WACEhnE,KAAKynE,iBAAiBT,oBAIhBrH,EAAVh7D,UAAA+jE,mBAAA,SAA6BD,GACzB,GAAIM,GAAW/oE,KAAK04D,aAAasQ,YAAYhpE,KAAK04D,aAAa8N,WAAWiC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAU/oE,KAAKipE,kBAAkBR,KAItE9I,EAAVh7D,UAAAskE,kBAAA,SAA4BR,GAExB,OAAapmE,KAATomE,GAA+B,OAATA,GACrBzoE,KAAK0lE,SAAW+C,EAAOzoE,KAAK04D,aAAayN,QAAQnmE,KAAK0lE,UACtD1lE,KAAKylE,SAAWgD,EAAOzoE,KAAK04D,aAAayN,QAAQnmE,KAAKylE,SACzD,OAAO,CAIT,KAAKzlE,KAAK+mE,WACR,OAAO,CAMT,KAAK,GAHCmC,GAAclpE,KAAK04D,aAAa8N,WAAWiC,EAAM,EAAG,GAGjDpP,EAAO6P,EAAalpE,KAAK04D,aAAayN,QAAQ9M,IAASoP,EAC9DpP,EAAOr5D,KAAK04D,aAAagO,gBAAgBrN,EAAM,GAC/C,GAAIr5D,KAAK+mE,WAAW1N,GAClB,OAAO,CAIX,QAAO,GAODsG,EAAVh7D,UAAAy3D,oBAAA,SAA8BprD,GAC1B,MAAQhR,MAAK04D,aAAauF,eAAejtD,IAAQhR,KAAK04D,aAAa0E,QAAQpsD,GAAQA,EAAM,MAInF2uD,EAAVh7D,UAAAimC,kBACI,MAAO5qC,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,sBA/NlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,odACVrE,SAAU,mBACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAC,KAAEge,EAAAA,eAAFvb,aAAAzC,KAAAsD,EAAAA,cAUAq9D,EAAAtgE,sEAuBAomE,UAAAzmE,KAAAO,EAAAA,QAeAmmE,UAAA1mE,KAAAO,EAAAA,QASAwnE,aAAA/nE,KAAAO,EAAAA,QAQAglE,iBAAAvlE,KAAAwY,EAAAA,SAQAsjD,eAAA97D,KAAAwY,EAAAA,SAGAitD,mBAAAzlE,KAAAwY,EAAAA,SAGAiwD,mBAAAzoE,KAAAsV,EAAAA,UAAA3S,MAAA69D,OAMAG,mBCYE,QAAFD,GAAsBtnD,EACsCkjD,EAC3B5C,EACCviD,GAC9B,GAJkBnW,KAAtBoY,mBAAsBA,EACsCpY,KAA5Ds7D,aAA4DA,EAC3Bt7D,KAAjC04D,aAAiCA,EACC14D,KAAlCmW,KAAkCA,EA7BhCnW,KAAFukE,eAAuD,GAAIhuD,GAAAA,aAGzDvW,KAAF+6D,cAAsD,GAAIxkD,GAAAA,aAGxDvW,KAAFykE,iBAAyD,GAAIluD,GAAAA,cAwBpDvW,KAAK04D,aACR,KAAMC,GAA2B,cAEnC,KAAK34D,KAAKs7D,aACR,KAAM3C,GAA2B,mBAGnC34D,MAAKolE,YAAcplE,KAAK04D,aAAa2M,QA5BzC,MAnDE55D,QAAFC,eACMg0D,EADN/6D,UAAA,kBAAE,WACsB,MAAO3E,MAAKolE,iBAClC,SAAenkE,GACb,GAAIqkE,GAAgBtlE,KAAKolE,YACnBG,EACFvlE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,KAAWjB,KAAK04D,aAAa2M,OACxFrlE,MAAKolE,YAAcplE,KAAK04D,aAAa8M,UAAUD,EAAWvlE,KAAKylE,QAASzlE,KAAK0lE,SACzE1lE,KAAK04D,aAAayN,QAAQb,KAAmBtlE,KAAK04D,aAAayN,QAAQnmE,KAAKolE,cAC9EplE,KAAK4lE,yCAMTn6D,OAAFC,eACMg0D,EADN/6D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,IACxEjB,KAAKmpE,eAAiBnpE,KAAKopE,uBAAuBppE,KAAK0mC,4CAKzDj7B,OAAFC,eACMg0D,EADN/6D,UAAA,eAAE,WAC0B,MAAO3E,MAAK+lE,cACtC,SAAY9kE,GACVjB,KAAK+lE,SAAW/lE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAKzEwK,OAAFC,eACMg0D,EADN/6D,UAAA,eAAE,WAC0B,MAAO3E,MAAKgmE,cACtC,SAAY/kE,GACVjB,KAAKgmE,SAAWhmE,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,qCAgDzEy+D,EAAF/6D,UAAAqD,mBAAE,WACEhI,KAAK4lE,SAIPlG,EAAF/6D,UAAA0kE,eAAE,SAAeT,GACb,GAAMU,GACAtpE,KAAK04D,aAAa8N,WAAWxmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAAawC,EAAO,EAEtF5oE,MAAK+6D,cAAc7jD,KAAKoyD,EAExB,IAAM5B,GAAc1nE,KAAK04D,aAAakO,kBAAkB0C,EAExDtpE,MAAKukE,eAAertD,KAAKlX,KAAK04D,aAAa8N,WACvCxmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAAawC,EAC5Cj3D,KAAKE,IAAI7R,KAAK04D,aAAaiO,QAAQ3mE,KAAKomE,YAAasB,MAI3DhI,EAAF/6D,UAAA8hE,2BAAE,SAA2BnlE,GAKzB,GAAMgkE,GAAgBtlE,KAAKolE,YACrBxtC,EAAQ53B,KAAK4qC,QAEnB,QAAQtpC,EAAMsY,SACZ,IAAKiT,GAAAA,WACH7sB,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,YAAaxtC,EAAQ,GAAK,EACrF,MACF,KAAK7K,GAAAA,YACH/sB,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,YAAaxtC,GAAS,EAAI,EACrF,MACF,KAAK9K,GAAAA,SACH9sB,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,aAAc,EACzE,MACF,KAAKp4C,GAAAA,WACHhtB,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,YAAa,EACxE,MACF,KAAKvrD,GAAAA,KACH7Z,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,aACtDplE,KAAK04D,aAAa4N,SAAStmE,KAAKolE,aACrC,MACF,KAAKrrD,GAAAA,IACH/Z,KAAKomE,WAAapmE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKolE,YACvD,GAAKplE,KAAK04D,aAAa4N,SAAStmE,KAAKolE,aACzC,MACF,KAAK14C,GAAAA,QACH1sB,KAAKomE,WACDpmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YAAa9jE,EAAMyjD,QAAU,IAAM,EAC/E,MACF,KAAKn4B,GAAAA,UACH5sB,KAAKomE,WACDpmE,KAAK04D,aAAamO,iBAAiB7mE,KAAKolE,YAAa9jE,EAAMyjD,OAAS,GAAK,EAC7E,MACF,KAAK9qC,GAAAA,MACL,IAAKC,GAAAA,MACHla,KAAKqpE,eAAerpE,KAAK04D,aAAa4N,SAAStmE,KAAKolE,aACpD,MACF,SAEE,OAGAplE,KAAK04D,aAAa4D,YAAYgJ,EAAetlE,KAAKomE,aACpDpmE,KAAKykE,iBAAiBvtD,KAAKlX,KAAKomE,YAGlCpmE,KAAKgnE,mBAEL1lE,EAAMC,kBAIRm+D,EAAF/6D,UAAAihE,MAAE,WAAA,GAAF/lE,GAAAG,IACIA,MAAKmpE,eAAiBnpE,KAAKopE,uBAAuBppE,KAAK8kB,UACvD9kB,KAAKupE,YAAcvpE,KAAKopE,uBAAuBppE,KAAK04D,aAAa2M,SACjErlE,KAAKwpE,WAAaxpE,KAAK04D,aAAasQ,YAAYhpE,KAAKomE,WAErD,IAAIqD,GAAazpE,KAAK04D,aAAayO,cAAc,QAEjDnnE,MAAK0pE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKv9D,IAAI,SAAAihD,GAAO,MAAAA,GAAIjhD,IACvE,SAAAy8D,GAAS,MAAA/oE,GAAK8pE,oBAAoBf,EAAOa,EAAWb,QACxD5oE,KAAKoY,mBAAmBxB,gBAI1B8oD,EAAF/6D,UAAAqiE,iBAAE,WACEhnE,KAAKynE,iBAAiBT,oBAOhBtH,EAAV/6D,UAAAykE,uBAAA,SAAiC/P,GAC7B,MAAOA,IAAQr5D,KAAK04D,aAAayN,QAAQ9M,IAASr5D,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAC7EpmE,KAAK04D,aAAa4N,SAASjN,GAAQ,MAIjCqG,EAAV/6D,UAAAglE,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIr1D,GAAYvU,KAAK04D,aAAaqF,OAC9B/9D,KAAK04D,aAAa8N,WAAWxmE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,YAAawC,EAAO,GAChF5oE,KAAKs7D,aAAa0C,QAAQ6L,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUxC,oBAAqB7yD,EAAWvU,KAAK8pE,mBAAmBlB,KAIvElJ,EAAV/6D,UAAAmlE,mBAAA,SAA6BlB,GAEzB,GAAMN,GAAatoE,KAAK04D,aAAayN,QAAQnmE,KAAKomE,WAElD,QAAc/jE,KAAVumE,GAAiC,OAAVA,GACvB5oE,KAAK+pE,4BAA4BzB,EAAYM,IAC7C5oE,KAAKgqE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAK5oE,KAAK+mE,WACR,OAAO,CAMT,KAAK,GAHCM,GAAernE,KAAK04D,aAAa8N,WAAW8B,EAAYM,EAAO,GAG5DvP,EAAOgO,EAAcrnE,KAAK04D,aAAa4N,SAASjN,IAASuP,EAC7DvP,EAAOr5D,KAAK04D,aAAagO,gBAAgBrN,EAAM,GAClD,GAAIr5D,KAAK+mE,WAAW1N,GAClB,OAAO,CAIX,QAAO,GAODqG,EAAV/6D,UAAAolE,4BAAA,SAAsCtB,EAAcG,GAChD,GAAI5oE,KAAK0lE,QAAS,CAChB,GAAMuE,GAAUjqE,KAAK04D,aAAayN,QAAQnmE,KAAK0lE,SACzCwE,EAAWlqE,KAAK04D,aAAa4N,SAAStmE,KAAK0lE,QAEjD,OAAO+C,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODxK,EAAV/6D,UAAAqlE,6BAAA,SAAuCvB,EAAcG,GACjD,GAAI5oE,KAAKylE,QAAS,CAChB,GAAM0E,GAAUnqE,KAAK04D,aAAayN,QAAQnmE,KAAKylE,SACzC2E,EAAWpqE,KAAK04D,aAAa4N,SAAStmE,KAAKylE,QAEjD,OAAOgD,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAOD1K,EAAV/6D,UAAAy3D,oBAAA,SAA8BprD,GAC1B,MAAQhR,MAAK04D,aAAauF,eAAejtD,IAAQhR,KAAK04D,aAAa0E,QAAQpsD,GAAQA,EAAM,MAInF0uD,EAAV/6D,UAAAimC,kBACI,MAAO5qC,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,sBA9QlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACE8B,SAAU,0hBACVrE,SAAU,cACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAC,KAAE27D,GAAFl5D,aAAAzC,KAAAsD,EAAAA,aAkGAtD,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAAsD,EAAAA,cAvFAo9D,EAAQrgE,sEAkBRomE,UAAAzmE,KAAAO,EAAAA,QAcAmmE,UAAA1mE,KAAAO,EAAAA,QASAwnE,aAAA/nE,KAAAO,EAAAA,QAQAglE,iBAAAvlE,KAAAwY,EAAAA,SAQAujD,gBAAA/7D,KAAAwY,EAAAA,SAGAitD,mBAAAzlE,KAAAwY,EAAAA,SAGAiwD,mBAAAzoE,KAAAsV,EAAAA,UAAA3S,MAAA69D,OAMAE,mBCpDE,QAAFE,GAAsBn+C,EACsC4oD,EAC1B3R,EAC0B4C,EAC9CllD,GAJQpW,KAAtByhB,MAAsBA,EACsCzhB,KAA5DqqE,SAA4DA,EAC1BrqE,KAAlC04D,aAAkCA,EAC0B14D,KAA5Ds7D,aAA4DA,EAGxDt7D,KAAKqqE,SAAS/mB,aAAap+C,UAAU,WAAM,MAAAkR,GAAkBQ,iBA5CjE,MAgDEnL,QAAFC,eAAMk0D,EAANj7D,UAAA,wBAAE,WACE,GAAiC,SAA7B3E,KAAKqqE,SAASC,YAChB,MAAOtqE,MAAK04D,aACPqF,OAAO/9D,KAAKqqE,SAASjE,WAAYpmE,KAAKs7D,aAAa0C,QAAQuM,gBACvDnD,mBAEX,IAAiC,QAA7BpnE,KAAKqqE,SAASC,YAChB,MAAOtqE,MAAK04D,aAAasQ,YAAYhpE,KAAKqqE,SAASjE,WAErD,IAAMkC,GAAatoE,KAAK04D,aAAayN,QAAQnmE,KAAKqqE,SAASjE,WAK3D,OAJwBpmE,MAAK04D,aAAasQ,YACtChpE,KAAK04D,aAAa8N,WAAW8B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BtoE,KAAK04D,aAAasQ,YACrChpE,KAAK04D,aAAa8N,WAAW8B,EFrCT,GEqCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvF78D,OAAFC,eAAMk0D,EAANj7D,UAAA,yBAAE,WACE,MAAoC,SAA7B3E,KAAKqqE,SAASC,YACjBtqE,KAAKyhB,MAAM+oD,2BAA6BxqE,KAAKyhB,MAAMgpD,wDAIzDh/D,OAAFC,eAAMk0D,EAANj7D,UAAA,uBAAE,WACE,OACEikE,MAAS5oE,KAAKyhB,MAAMipD,eACpBjC,KAAQzoE,KAAKyhB,MAAMkpD,cACnBC,aAAc5qE,KAAKyhB,MAAMopD,oBACzB7qE,KAAKqqE,SAASC,8CAIlB7+D,OAAFC,eAAMk0D,EAANj7D,UAAA,uBAAE,WACE,OACEikE,MAAS5oE,KAAKyhB,MAAMqpD,eACpBrC,KAAQzoE,KAAKyhB,MAAMspD,cACnBH,aAAc5qE,KAAKyhB,MAAMupD,oBACzBhrE,KAAKqqE,SAASC,8CAIlB1K,EAAFj7D,UAAAsmE,qBAAE,WACEjrE,KAAKqqE,SAASC,YAA2C,SAA7BtqE,KAAKqqE,SAASC,YAAyB,aAAe,SAIpF1K,EAAFj7D,UAAAumE,gBAAE,WACElrE,KAAKqqE,SAASjE,WAA0C,SAA7BpmE,KAAKqqE,SAASC,YACrCtqE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKqqE,SAASjE,YAAa,GAC3DpmE,KAAK04D,aAAamO,iBACd7mE,KAAKqqE,SAASjE,WAAyC,QAA7BpmE,KAAKqqE,SAASC,aAAyB,GF1ErD,KE+E1B1K,EAAFj7D,UAAAwmE,YAAE,WACEnrE,KAAKqqE,SAASjE,WAA0C,SAA7BpmE,KAAKqqE,SAASC,YACrCtqE,KAAK04D,aAAaoO,kBAAkB9mE,KAAKqqE,SAASjE,WAAY,GAC1DpmE,KAAK04D,aAAamO,iBACd7mE,KAAKqqE,SAASjE,WACmB,QAA7BpmE,KAAKqqE,SAASC,YAAwB,EFpF9B,KEyF1B1K,EAAFj7D,UAAAymE,gBAAE,WACE,OAAKprE,KAAKqqE,SAAS5E,WAGXzlE,KAAKqqE,SAAS5E,UACjBzlE,KAAKqrE,YAAYrrE,KAAKqqE,SAASjE,WAAYpmE,KAAKqqE,SAAS5E,WAIhE7F,EAAFj7D,UAAA2mE,YAAE,WACE,OAAQtrE,KAAKqqE,SAAS3E,UACjB1lE,KAAKqrE,YAAYrrE,KAAKqqE,SAASjE,WAAYpmE,KAAKqqE,SAAS3E,UAIxD9F,EAAVj7D,UAAA0mE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7BxrE,KAAKqqE,SAASC,YACTtqE,KAAK04D,aAAayN,QAAQoF,IAAUvrE,KAAK04D,aAAayN,QAAQqF,IACjExrE,KAAK04D,aAAa4N,SAASiF,IAAUvrE,KAAK04D,aAAa4N,SAASkF,GAErC,QAA7BxrE,KAAKqqE,SAASC,YACTtqE,KAAK04D,aAAayN,QAAQoF,IAAUvrE,KAAK04D,aAAayN,QAAQqF,GAGhE75D,KAAKg6B,MAAM3rC,KAAK04D,aAAayN,QAAQoF,GFjHpB,KEkHpB55D,KAAKg6B,MAAM3rC,KAAK04D,aAAayN,QAAQqF,GFlHjB,oBEK5BxsE,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,0vBACVrE,SAAU,oBACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAhBAC,KAAQ27D,GAARl5D,aAAAzC,KAAAsD,EAAAA,aAsBAtD,SAAsEqD,GAAWZ,aAAjFzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAiCZ,MAAjC88D,QAzBAz/D,KAAQE,EAAAA,qBAdR0gE,qDAuQA5/D,KAAA04D,aAAAA,EAAE14D,KAAFs7D,aAAAA,EACkCt7D,KAAlCoY,mBAAAA,kQAHA,KAAAugD,GAAA,cAQA,KAAA34D,KAAYs7D,aACZ,KAAA3C,GAAA,mBAGA34D,MAAAo2C,aAAA30B,EAAAxc,QAAAC,UAAA,WACAkT,EAAAxB,eAEQ/W,EAARyjD,aAAA33C,SA7CA,MAgDAF,QAAOC,eAAP6zD,EAAA56D,UAAA,WAxGA5D,+HAGAI,YAAA,EACAC,cAAA,kDAOAL,iIAGAI,YAAA,EACAC,cAAA,iDAIAL,+HAGAI,YAAA,EACAC,cAAA,iDAIAL,+HAGAI,YAAA,EACAC,cAAA,oMAsCApB,KAAAsjD,aAAA33C,QAEAxK,YAAA,EACAC,cAAA,qDAIAL,6EACAf,KAAAyrE,sBAAA,GAEAtqE,YAAA,EACAC,cAAA,yHA2BApB,KAAAomE,WAAApmE,KAAA66D,SAAA76D,KAAA04D,aAAA2M,QAEIrlE,KAAK0rE,aAAT1rE,KAAA2rE,iFAMA3rE,KAAAyrE,sBAAA,EACQzrE,KAAK4rE,uFAMb5rE,KAAAsjD,aAAArvC,gDAKA,GAAAwC,GAAoCxR,EAApC,SAAAA,EAAA,SAAAA,EAAA,iCAGQ,GAAR4mE,GAAmB7rE,KAAnB8rE,kFAQA9rE,KAAOsjD,aAAP33C,4IAWA,SAAA3L,KAAAsqE,YAAAtqE,KAAA+rE,qEACA/jE,yGAOAhI,KAAAukE,eAAArtD,KAAAmiD,8RAqBAr5D,KAAAsqE,YAAAuB,0OAeAtM,EAAA99D,6iCA9NAyE,QAAA,67CACE1H,MACFC,MAAA,gBAEEmD,SAAF,cACElD,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAwgE,EAAAx4C,eAAA,WAAA,QACA/nB,KAAA6gE,iJA/IAN,EAAQlgE,gBA2PR2sE,kBAAAhtE,KAAAO,EAAAA,QAzQAs7D,UAAA77D,KAAAO,EAAAA,6DAgKAkmE,UAAAzmE,KAAAO,EAAAA,QAeAmmE,UAAA1mE,KAAGO,EAAAA,QAQHwnE,aAAA/nE,KAAAO,EAAAA,QAGAglE,iBAAGvlE,KAAHwY,EAAAA,SAQAsjD,eAAA97D,KAAQwY,EAAAA,SAQRujD,gBAAG/7D,KAAHwY,EAAAA,SAQAgtD,iBAAAxlE,KAAAwY,EAAAA,SAGAu0D,YAAA/sE,KAAAsV,EAAAA,UAAS3S,MAAT89D,MAMAwM,WAAAjtE,KAAAsV,EAAAA,UAAA3S,MAAA+9D,MAMAwM,gBAAAltE,KAAGsV,EAAAA,UAAH3S,MAAAg+D,OAMAJ,KCnOa4M,IAKX/9B,eAAgBz5B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZugB,QAAS,EACTre,UAAW,mBAEbE,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoCrC,EAAAA,OACvEugB,QAAS,EACTre,UAAW,kBAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBrC,EAAAA,OAAOugB,QAAS,QAIlEk5C,eAAgBz3D,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOugB,QAAS,KAC9Bte,EAAAA,MAAM,QAASjC,EAAAA,OAAOugB,QAAS,KAI/Bne,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDjBahCq3D,GAAgB,EAGP3R,GACT,GAAI3oD,GAAAA,eAAqC,kCAQhC+tD,IACXt4D,QAASkzD,GACTx5C,MAAOiX,EAAAA,SACP/W,WAAYkrD,IAKdC,GAAA,WACE,QAAFA,GAAqBrsE,GAAAF,KAArBE,YAAqBA,EA3ErB,MAAAqsE,MA6EaC,GACTtoE,EAAWqoE,mBAwCb,QAAFtS,GAAc31D,GACd,MAAIxE,GAAJC,KAAAC,KAAUsE,IAAVtE,KATA,MAJ6C0E,GAA7Cu1D,EAAAn6D,GAgBEm6D,EAAFt1D,UAAAC,gBAAE,WACE5E,KAAKysE,UAAUb,kCApCnB5sE,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,yBACE8B,SAAU,wjBACVC,QAAF,shBACE1H,MACFC,MAAA,yBACMiuE,oBAAN,UACIC,uCAAJ,sBAEAp1D,YACA40D,GAAA/9B,eACA+9B,GAAAC,gBAEAxqE,SAAA,uBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,sEA7EAo4D,EAAA56D,0DAqFA46D;kBAoKAj6D,KAAA60B,SAAAA,EAAsB70B,KAAtBmS,QAAsBA,EACAnS,KAAtBuT,kBAAAA,EACsBvT,KAAtBswC,gBAAAA,EACsBtwC,KAAtB04D,aAAAA,EAC8D14D,KAA9DmW,KAAAA,EACkCnW,KAAlCyE,UAA8CA,kbAP9C,KAAAk0D,GAA8C,eA3D9C,MAuEAltD,QAAAC,eAAAktD,EAAAj0D,UAAA,WA3IA5D,+FAIAm4B,0FAGA/3B,YAAA,EACAC,cAAA,+CAOAL,oCAAAf,KAAA64D,iBAAA74D,KAAA64D,iBAAAC,uBAAAz2D,KAGA62B,+BAGA/3B,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,kDAIAL,qEAAAf,KAAA64D,iBAAAl4D,WAAAX,KAAA6mC,WAGA3N,gBAEA,GAAA8L,GAAAhnB,EAAAA,sBAAA/c,wBACUjB,KAAV6mC,UAAA7B,EAEQhlC,KAAR+4D,gBAAAptD,KAAAq5B,KAGA7jC,YAAA,EACAC,cAAA,gDA0BAL,8FAEEK,cAAF,mDAOAL,gGACEK,cAAF,kDAIAL,wEACAI,YAAA,EACAC,cAAA,kDAGAL,wEACAI,YAAA,EACAC,cAAA,qDAAAL,gFAGAI,YAAA,EACAC,cAAA,oDA0CApB,KAAAg5D,mBAAAjoD,cACI/Q,KAAK+4D,gBAAT9kD,WACQjU,KAARi5D,YACQj5D,KAARi5D,UAAAhnC,UAEQjyB,KAAKk5D,mBAAb,sCAOA,GAAA1tC,GAAAxrB,KAAA0mC,2BACA1mC,KAAA04D,aAAAS,SAAA3tC,EAAAxrB,KAAA0mC,YACQ1mC,KAARo5D,iBAAAztD,KAAA0tD,qLAoBA,IAAAr5D,KAAA64D,iBAAA,KAAAzkC,OAAA,8DAEAp0B,MAAA64D,iBAAA9qC,EACA/tB,KAAAg5D,mBACQh5D,KAAR64D,iBAAAS,aAAAp0D,UAAA,SAAAjE,GAAA,MAAApB,GAAA6mC,UAAAzlC,mEAQA,IAAAjB,KAAA64D,iBACA,KAAAzkC,OAAA,+DAEMp0B,MAANyE,YACAzE,KAAAu5D,0BAAAv5D,KAAAyE,UAAAy2B,eAEAl7B,KAAAw5D,QAAAx5D,KAAAy5D,gBAAAz5D,KAAA05D,eACA15D,KAAA07B,SAAA,EAEI17B,KAAK25D,aAATziD,gDAMA,IAAAlX,KAAA07B,QAAA,CAEM17B,KAANi5D,WAAAj5D,KAAAi5D,UAAAtjD,eACA3V,KAAAi5D,UAAAljD,SAEM/V,KAAK45D,aACX55D,KAAA45D,WAAAn/B,QACQz6B,KAAK45D,WAAb,MAEM55D,KAAK65D,iBAAX75D,KAAA65D,gBAAAtgB,YACAv5C,KAAA65D,gBAAA9jD,QAGA,IAAA+jD,GAAA,oCAKUj6D,EAAKk6D,aAAf7iD,OACQrX,EAAK05D,0BAAb,MAGAv5D,MAAAu5D,2BACA,kBAAAv5D,MAAAu5D,0BAAA1hD,6DAWAiiD,+FAYA95D,KAAA45D,WAAA55D,KAAAg6D,QAAArkC,KAAAskC,IACAprD,UAAA7O,KAAAmW,KAAAnW,KAAAmW,KAAAlV,MAAA,MAEQiU,iBAAkBlV,KAA1BuT,kBACM2gB,WAAN,0BAEAl0B,KAAA45D,WAAkBM,cAAlBh1D,UAAA,WAAA,MAAArF,GAAA46B,UACAz6B,KAAA45D,WAAAO,kBAAAC,WAAAp6D,KAEIA,KAAKq6D,0JAQTr6D,KAAAi5D,WAEAj5D,KAAAs6D,eAGAt6D,KAAAi5D,UAAAtjD,gBACA3V,KAAAk5D,mBAAAl5D,KAAAi5D,UAAArjD,OAAA5V,KAAA65D,iBAEQ75D,KAAKk5D,mBAAb1iC,SAAA4jC,WAAAp6D,KACMA,KAAKq6D,YAELr6D,KAAKmS,QAAX4qC,SAAA3qB,eAAAnoB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,uKAWU82C,aAAa,EACjBJ,cAAN,mCACM/sC,UAAW7O,KAAjBmW,KACMk9B,eAANrzC,KAAAswC,kBACMpc,WAAN,wBAEAl0B,MAAAi5D,UAAAj5D,KAAA60B,SAAAqD,OAAwCV,GACxCx3B,KAAAi5D,UAAA5hC,eAAAw+B,aAAA,OAAA,UAEI5pD,EAAAA,MAAJjM,KAAAi5D,UAAyBv8B,gBAAiB18B,KAA1Ci5D,UAAyD9hC,cAAzDn3B,KAAAi5D,UAAAsB,gBAAAtwD,KAAA3E,EAAAA,OAAA,SAAAhE,GAGA,MACWA,GADXsY,UAAA24B,EAAAA,iEAKArtC,UAAA,WAAiC,MAAjCrF,GAAA46B,sKAQAmY,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACO0nB,UAAP,GACO9mB,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBUr0C,KAAKk5D,mBAAf1iC,SAAAqvB,MAAAA,GAEM7lD,KAAK45D,aACX55D,KAAA45D,WAAAO,kBAAAtU,MAAAA,IAGA+S,EAAAn3D,2EAxXAG,SAAA,gBACE/C,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAg6D,EAAA7xC,eAAiB,WAAjB,QACA/nB,KAAAy7D,gEA9FAz7D,SAAQqD,GAARZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAA+4D,QAjCA17D,KAAE27D,GAAFl5D,aAAAzC,KAAAsD,EAAAA,aAkBAtD,KAAEge,EAAAA,eAAFvb,aAAAzC,KAAAsD,EAAAA,aAKAtD,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAMAuyD,EAAAv5D,gBAjCAu7D,0BAAA57D,KAAAO,EAAAA,QAiRAs7D,UAAA77D,KAAAO,EAAAA,0DA3IAi6D,UAAAx6D,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAYAu7D,eAAA97D,KAAAwY,EAAAA,SAGAujD,gBAAA/7D,KAAAwY,EAAAA,SAcA0c,aAAAl1B,KAAAO,EAAAA,QAQAo6D,eAAA36D,KAAAwY,EAAAA,OAAA7V,MAAA,YAmBAo4D,eAAA/6D,KAAGwY,EAAAA,OAAH7V,MAAA,YAMAy4B,SAAAp7B,KAAAO,EAAAA,SAMAq5D,KC9KaoC,IACXxzD,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAglD,MAC9B96B,OAAO,GAII+6B,IACX1zD,QAAS2zD,EAAAA,cACT1zD,YAAawO,EAAAA,WAAW,WAAM,MAAAglD,MAC9B96B,OAAO,GASTi7B,GAAA,WAIE,QAAFA,GAEW1iB,EAEA2iB,GAFAr7D,KAAX04C,OAAWA,EAEA14C,KAAXq7D,cAAWA,EACPr7D,KAAKiB,MAAQjB,KAAK04C,OAAOz3C,MAnE7B,MAAAm6D,oBAiPE,QAAFH,GACc/6D,EACWw4D,EAC2B4C,EAC1BC,GAJxB,GAAF17D,GAAAG,IAKI,IAJUA,KAAdE,YAAcA,EACWF,KAAzB04D,aAAyBA,EAC2B14D,KAApDs7D,aAAoDA,EAC1Bt7D,KAA1Bu7D,WAA0BA,EAhExBv7D,KAAFw7D,WACM,GAAIjlD,GAAAA,aAGRvW,KAAFy7D,UACM,GAAIllD,GAAAA,aAGRvW,KAAFs5D,aAAiB,GAAI/iD,GAAAA,aAGnBvW,KAAF+4D,gBAAoB,GAAIxiD,GAAAA,aAEtBvW,KAAFyiD,WAAe,aAEfziD,KAAA07D,aAA+C,aAE/C17D,KAAA27D,mBAA+B,aAE/B37D,KAAA47D,wBAAoCxtD,EAAAA,aAAaC,MAEjDrO,KAAA67D,oBAAgCztD,EAAAA,aAAaC,MAG7CrO,KAAA87D,gBAAyC,WACrC,MAAOj8D,GAAKk8D,gBACR,MAAQC,oBAAuBC,KAAQp8D,EAAKK,YAAYI,cAAcW,SAI9EjB,KAAAk8D,cAAuC,SAACv2C,GACpC,GAAMw2C,GAAet8D,EAAKu8D,oBAAoBv8D,EAAK64D,aAAa2D,YAAY12C,EAAQ1kB,OACpF,QAASpB,EAAKgS,MAAQsqD,GAClBt8D,EAAK64D,aAAa4D,YAAYz8D,EAAKgS,IAAKsqD,IAAiB,EACzD,MAAQI,kBAAqB1qD,IAAOhS,EAAKgS,IAAK2qD,OAAUL,KAIhEn8D,KAAAy8D,cAAuC,SAAC92C,GACpC,GAAMw2C,GAAet8D,EAAKu8D,oBAAoBv8D,EAAK64D,aAAa2D,YAAY12C,EAAQ1kB,OACpF,QAASpB,EAAKkc,MAAQogD,GAClBt8D,EAAK64D,aAAa4D,YAAYz8D,EAAKkc,IAAKogD,IAAiB,EACzD,MAAQO,kBAAqB3gD,IAAOlc,EAAKkc,IAAKygD,OAAUL,KAIhEn8D,KAAA28D,iBAA0C,SAACh3C,GACvC,GAAMw2C,GAAet8D,EAAKu8D,oBAAoBv8D,EAAK64D,aAAa2D,YAAY12C,EAAQ1kB,OACpF,OAAQpB,GAAK+8D,aAAgBT,IAAgBt8D,EAAK+8D,YAAYT,IAClDU,qBAAuB,GAA/B,MAKR78D,KAAA88D,WAAMC,EAAAA,WAAWC,SACNh9D,KAAK87D,gBAAiB97D,KAAKk8D,cAAel8D,KAAKy8D,cAAez8D,KAAK28D,mBAG9E38D,KAAA+7D,iBAA4B,GAOnB/7D,KAAK04D,aACR,KAAMC,GAA2B,cAEnC,KAAK34D,KAAKs7D,aACR,KAAM3C,GAA2B,mBAInC34D,MAAK67D,oBAAsBnD,EAAauE,cAAc/3D,UAAU,WAC9DrF,EAAKoB,MAAQpB,EAAKoB,QA/PxB,MA+FEwK,QAAFC,eACMuvD,EADNt2D,UAAA,qBAAE,SACkB1D,GADlB,GAAFpB,GAAAG,IAESiB,KAILjB,KAAKk9D,YAAcj8D,EACnBjB,KAAKk9D,YAAYC,eAAen9D,MAChCA,KAAK47D,wBAAwB7qD,cAE7B/Q,KAAK47D,wBAA0B57D,KAAKk9D,YAAY9D,iBAAiBl0D,UAAU,SAAC4f,GAC1EjlB,EAAKoB,MAAQ6jB,EACbjlB,EAAK67D,aAAa52C,GAClBjlB,EAAK4iD,aACL5iD,EAAK47D,UAAUvkD,KAAK,GAAIkkD,IAAwBv7D,EAAMA,EAAKK,YAAYI,gBACvET,EAAK27D,WAAWtkD,KAAK,GAAIkkD,IAAwBv7D,EAAMA,EAAKK,YAAYI,oDAM5EmL,OAAFC,eACMuvD,EADNt2D,UAAA,2BAAE,SACwB1D,GACtBjB,KAAK48D,YAAc37D,EACnBjB,KAAK27D,sDAKPlwD,OAAFC,eACMuvD,EADNt2D,UAAA,aAAE,WACwB,MAAO3E,MAAKqpB,YACpC,SAAUpoB,GACRA,EAAQjB,KAAK04D,aAAa2D,YAAYp7D,GACtCjB,KAAK+7D,iBAAmB96D,GAASjB,KAAK04D,aAAa0E,QAAQn8D,GAC3DA,EAAQjB,KAAKo8D,oBAAoBn7D,EACjC,IAAMo8D,GAAUr9D,KAAKiB,KACrBjB,MAAKqpB,OAASpoB,EACdjB,KAAKs9D,aAAar8D,GAEbjB,KAAK04D,aAAaS,SAASkE,EAASp8D,IACvCjB,KAAKs5D,aAAapiD,KAAKjW,oCAM3BwK,OAAFC,eACMuvD,EADNt2D,UAAA,WAAE,WACsB,MAAO3E,MAAKspB,UAClC,SAAQroB,GACNjB,KAAKspB,KAAOtpB,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,IACnEjB,KAAK27D,sDAKPlwD,OAAFC,eACMuvD,EADNt2D,UAAA,WAAE,WACsB,MAAO3E,MAAKgjC,UAClC,SAAQ/hC,GACNjB,KAAKgjC,KAAOhjC,KAAKo8D,oBAAoBp8D,KAAK04D,aAAa2D,YAAYp7D,IACnEjB,KAAK27D,sDAKPlwD,OAAFC,eACMuvD,EADNt2D,UAAA,gBAAE,WAC0B,QAAS3E,KAAK6mC,eACxC,SAAa5lC,GACX,GAAM+jC,GAAWhnB,EAAAA,sBAAsB/c,GACjCqR,EAAUtS,KAAKE,YAAYI,aAE7BN,MAAK6mC,YAAc7B,IACrBhlC,KAAK6mC,UAAY7B,EACjBhlC,KAAK+4D,gBAAgB7hD,KAAK8tB,IAIxBA,GAAY1yB,EAAQyX,MAItBzX,EAAQyX,wCAoFZkxC,EAAFt2D,UAAAsD,YAAE,WACEjI,KAAK47D,wBAAwB7qD,cAC7B/Q,KAAK67D,oBAAoB9qD,cACzB/Q,KAAKs5D,aAAarlD,WAClBjU,KAAK+4D,gBAAgB9kD,YAIvBgnD,EAAFt2D,UAAA44D,0BAAE,SAA0B3uC,GACxB5uB,KAAK27D,mBAAqB/sC,GAI5BqsC,EAAFt2D,UAAA64D,SAAE,SAASngB,GACP,MAAOr9C,MAAK88D,WAAa98D,KAAK88D,WAAWzf,GAAK,MAOhD4d,EAAFt2D,UAAA84D,6BAAE,WACE,MAAOz9D,MAAK09D,6BAOdzC,EAAFt2D,UAAA+4D,0BAAE,WACE,MAAO19D,MAAKu7D,WAAav7D,KAAKu7D,WAAWmC,4BAA8B19D,KAAKE,aAI9E+6D,EAAFt2D,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKiB,MAAQA,GAIfg6D,EAAFt2D,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAK07D,aAAe9sC,GAItBqsC,EAAFt2D,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GAIpBqsC,EAAFt2D,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,GAGlBksC,EAAFt2D,UAAA8nB,WAAE,SAAWnrB,GACT,GAAMq8D,GAAiBr8D,EAAMyjD,QAAUzjD,EAAMsY,UAAYoT,EAAAA,UAErDhtB,MAAKk9D,aAAeS,IAAmB39D,KAAKE,YAAYI,cAAcs9D,WACxE59D,KAAKk9D,YAAYvnC,OACjBr0B,EAAMC,mBAIV05D,EAAFt2D,UAAAk5D,SAAE,SAAS58D,GACP,GAAIo4D,GAAOr5D,KAAK04D,aAAaoF,MAAM78D,EAAOjB,KAAKs7D,aAAawC,MAAMrC,UAClEz7D,MAAK+7D,iBAAmB1C,GAAQr5D,KAAK04D,aAAa0E,QAAQ/D,GAC1DA,EAAOr5D,KAAKo8D,oBAAoB/C,GAE3Br5D,KAAK04D,aAAaS,SAASE,EAAMr5D,KAAKqpB,UACzCrpB,KAAKqpB,OAASgwC,EACdr5D,KAAK07D,aAAarC,GAClBr5D,KAAKs5D,aAAapiD,KAAKmiD,GACvBr5D,KAAKy7D,UAAUvkD,KAAK,GAAIkkD,IAAwBp7D,KAAMA,KAAKE,YAAYI,kBAI3E26D,EAAFt2D,UAAA69C,UAAE,WACExiD,KAAKw7D,WAAWtkD,KAAK,GAAIkkD,IAAwBp7D,KAAMA,KAAKE,YAAYI,iBAI1E26D,EAAFt2D,UAAAm0D,iBAAE,WACE,MAAO94D,MAAKu7D,WAAav7D,KAAKu7D,WAAW1V,UAAQxjD,IAInD44D,EAAFt2D,UAAA4nB,QAAE,WAEMvsB,KAAKiB,OACPjB,KAAKs9D,aAAat9D,KAAKiB,OAGzBjB,KAAKyiD,cAICwY,EAAVt2D,UAAA24D,aAAA,SAAuBr8D,GACnBjB,KAAKE,YAAYI,cAAcW,MAC3BA,EAAQjB,KAAK04D,aAAaqF,OAAO98D,EAAOjB,KAAKs7D,aAAa0C,QAAQvC,WAAa,IAO7ER,EAAVt2D,UAAAy3D,oBAAA,SAA8BprD,GAC1B,MAAQhR,MAAK04D,aAAauF,eAAejtD,IAAQhR,KAAK04D,aAAa0E,QAAQpsD,GAAQA,EAAM,qBAnS7FhS,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVoD,WACEyzD,GACAE,IACC1zD,QAAS02D,GAA0Bz2D,YAAawzD,IAEnDz8D,MACE2/D,uBAAwB,OACxBxwB,mBAAoB,kDACpBywB,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZtvC,SAAU,YACVC,YAAa,sBAEfvtB,SAAU,6DA/EZ5C,KAAE0I,EAAAA,aAmBF1I,KAAQ27D,GAARl5D,aAAAzC,KAoNOsD,EAAAA,aACPtD,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0B88D,QApN1Bz/D,KAAQyvC,GAARhtC,aAAAzC,KAqNOsD,EAAAA,gCAtJPo8D,gBAAA1/D,KAAGO,EAAAA,QAqBHs9D,sBAAA79D,KAAGO,EAAAA,QAQH0B,QAAAjC,KAAGO,EAAAA,QAiBHsS,MAAA7S,KAAGO,EAAAA,QASHwc,MAAA/c,KAAGO,EAAAA,QASHoB,WAAA3B,KAAGO,EAAAA,QAsBHi8D,aAAAx8D,KAAGwY,EAAAA,SAIHikD,YAAAz8D,KAAGwY,EAAAA,UAzLHyjD,iCCAA,sBA6BAj8D,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gCA9BZw6D,mBA0EE,QAAFC,GACWn9C,EACCrJ,EACeymD,GAFhB7+D,KAAXyhB,MAAWA,EACCzhB,KAAZoY,mBAAYA,EAvBZpY,KAAA0T,cAA0BtF,EAAAA,aAAaC,KA0BnC,IAAMywD,GAAiB33D,OAAO03D,EAC9B7+D,MAAKO,SAAYu+D,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MAVErzD,QAAFC,eACMkzD,EADNj6D,UAAA,gBAAE,WAEE,WAA0BtC,KAAnBrC,KAAK6mC,UAA0B7mC,KAAKo6D,WAAWz5D,WAAaX,KAAK6mC,eAE1E,SAAa5lC,GACXjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,oCAgBzC29D,EAAFj6D,UAAAoP,YAAE,SAAY9O,GACNA,EAAR,YACMjF,KAAK++D,sBAITH,EAAFj6D,UAAAsD,YAAE,WACEjI,KAAK0T,cAAc3C,eAGrB6tD,EAAFj6D,UAAAqD,mBAAE,WACEhI,KAAK++D,sBAGPH,EAAFj6D,UAAAqtB,MAAE,SAAM1wB,GACAtB,KAAKo6D,aAAep6D,KAAKW,WAC3BX,KAAKo6D,WAAWzkC,OAChBr0B,EAAMo5B,oBAIFkkC,EAAVj6D,UAAAo6D,yCACUC,EAAqBh/D,KAAKo6D,WAAap6D,KAAKo6D,WAAWrB,gBAAkB5oD,EAAAA,KACzE8uD,EAAgBj/D,KAAKo6D,YAAcp6D,KAAKo6D,WAAWvB,iBACrD74D,KAAKo6D,WAAWvB,iBAAiBE,gBAAkB5oD,EAAAA,KACjD+uD,EAAoBl/D,KAAKo6D,WAC3BnuD,EAAAA,MAAMjM,KAAKo6D,WAAWT,aAAc35D,KAAKo6D,WAAWL,cACpD5pD,EAAAA,IAEJnQ,MAAK0T,cAAc3C,cACnB/Q,KAAK0T,cAAgBzH,EAAAA,MACnBjM,KAAKyhB,MAAMxc,QACX+5D,EACAC,EACAC,GACAh6D,UAAU,WAAM,MAAArF,GAAKuY,mBAAmBxB,iCAnF9C5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,wBACE8B,SAAU,4lBACVC,QAAF,quBACE1H,MACFC,MAAA,wBAEI8jC,kBAAJ,gFAEI48B,qBAAJ,8CACIC,mBAAJ,6CAEAx9D,SAAA,sBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAvBAC,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,iBAoDAi9D,EAAAv/D,mFArBAsB,WAAA3B,KAAAO,EAAAA,QAGA8/D,cAAArgE,KAAAu/B,EAAAA,aAAA58B,MAAAg9D,OAaAC,iCCxEA,sBA8BA5/D,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAykB,GACA+3C,GACA/qC,EAAAA,cACApxB,EAAAA,WACAH,EAAAA,cAEFI,SACEm8D,GACAC,GACA5G,GACAqB,GACAgB,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEFn8D,cACE87D,GACAC,GACA5G,GACAqB,GACAgB,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEFr4D,WACEs4D,GACAC,IAEFtrC,iBACEylC,GACA2F,QAvEJG,gCCgCA//D,KAAA4pB,WAA+B,EAM/B5pB,KAAAggE,QAA4B,EAH5B,MANEv0D,QAAFC,eACMu0D,EADNt7D,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4pB,eACtC,SAAa3oB,GAAkBjB,KAAK4pB,UAAY5L,EAAAA,sBAAsB/c,oCAItEwK,OAAFC,eACMu0D,EADNt7D,UAAA,aAAE,WACuB,MAAO3E,MAAKggE,YACnC,SAAU/+D,GAAkBjB,KAAKggE,OAAShiD,EAAAA,sBAAsB/c,mDA1BlEjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,cACE3F,MACF0I,KAAA,YACM0oB,0BAAN,uCACIswC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACI3hE,MAAJ,eAEAwH,SAAA,GACAC,QAAA,+SACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAkhE,EAAA5gE,kEASA4gE,iCCnCA,sBAcAjhE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBD,EAAAA,cAC3BM,SAAU68D,GAAYl9D,IACtBU,cAAew8D,QAjBjBtX,KCqCa0X,GAAgB,GAAItuD,GAAAA,eAAiC,iBnFKrDuuD,IAMXC,gBAAiB5rD,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,kBAC3CD,EAAAA,MAAM,WAAYjC,EAAAA,OAAOkC,UAAW,oBACpCE,EAAAA,WAAW,4CACTC,EAAAA,QAhC0C,wCAoC9CwrD,sBAAuB7rD,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmBjC,EAAAA,OACvByM,OAAQ,yBAERqhD,QAASC,gBAAiB,UAE5B9rD,EAAAA,MAAM,WAAYjC,EAAAA,OAChByM,OAAQ,wBAERqhD,QAASE,eAAgB,UAE3B5rD,EAAAA,WAAW,4CAA6Co2B,EAAAA,OACtDzqB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBC,UAAU,IACrD5L,EAAAA,QAjD0C,0CAsD9C4rD,cAAejsD,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YAC3DgC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOyM,OAAQ,IAAKxM,WAAY,aAClDmC,EAAAA,WAAW,4CACTC,EAAAA,QA1D0C,uDoFF9C,QAAF6rD,GAAqB7nB,GAAAh5C,KAArBg5C,UAAqBA,EAlBrB,sBAcAh6C,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gFAPZnF,KAAmBkU,EAAAA,eARnB2tD,KC2CaC,GAAoBC,EAAAA,iBAM7BC,GAAW,iBAwEb,QAAFC,GAA6DC,EAC/C9oD,EACA+oD,EACQ5tD,EAEU9O,EACgCg4B,GAN9D,GAAF58B,GAOIC,EAPJC,KAAAC,KAOUkhE,EAAW9oD,EAAoB+oD,IAPzCnhE,WAGsBH,GAAtB0T,kBAAsBA,EAG0C1T,EAAhE48B,eAAgEA,EAhChE58B,EAAAuhE,aAAwB,EAGtBvhE,EAAFwhE,YAA0B,GAAI9qD,GAAAA,aAG5B1W,EAAFyhE,cAA4B,GAAI/qD,GAAAA,aAG9B1W,EAAF0hE,cAA2B,GAAI5tD,GAAAA,QAe7B9T,EAAF2hE,UAAc,8BAA8BR,KAUxCnhE,EAAKqhE,UAAYA,EACjBrhE,EAAK4E,UAAYA,IAjBrB,MAjCuCC,GAAvCu8D,EAAAnhE,GAQE2L,OAAFC,eACMu1D,EADNt8D,UAAA,kBAAE,WAEE,MAAO3E,MAAKohE,aAAgBphE,KAAKkhE,WAAalhE,KAAKkhE,UAAUO,gBAE/D,SAAexgE,GACbjB,KAAKohE,YAAcpjD,EAAAA,sBAAsB/c,oCAyC3CggE,EAAFt8D,UAAA+8D,YAAE,WACE,QAAI1hE,KAAKkhE,WAI4E,aAA3ElhE,KAAK2hE,SAAW3hE,KAAKkhE,UAAUU,YAAc5hE,KAAK6hE,sBAM9DZ,EAAFt8D,UAAAk9D,kBAAE,WACE,MAAO7hE,MAAK2hE,SAAW,WAAa,aAGtCV,EAAFt8D,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACQA,MAAK8hE,cAEP9hE,KAAKo6B,OAAOnwB,KACVsL,EAAAA,UAAS,MACTjQ,EAAAA,OAAO,WAAM,MAAAzF,GAAK8hE,WAAa9hE,EAAKsyC,UACpCjoC,EAAAA,KAAK,IACLhF,UAAU,WACVrF,EAAKsyC,QAAU,GAAIh+B,GAAAA,eAAetU,EAAKiiE,aAAa9oB,UAAWn5C,EAAK0T,sBAK1E0tD,EAAFt8D,UAAAoP,YAAE,SAAY9O,GACVjF,KAAKuhE,cAAc51D,KAAK1G,IAG1Bg8D,EAAFt8D,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,MACIA,KAAKuhE,cAActtD,YAGrBgtD,EAAFt8D,UAAAo9D,eAAE,SAAezgE,GACb,GAAMkE,GAAYlE,EAAMgR,QAAQ9M,UAEzBw8D,EAAX1gE,EAAA0gE,UAAsB/qD,EAAtB3V,EAAA2V,QAA+BI,EAA/B/V,EAAA+V,SAMsB,UAAd2qD,GAAoC,aAAZ/qD,GAC1BzR,EAAU2Y,IARK,gBAUC,UAAd6jD,GAAqC,cAAZ/qD,GAC3BzR,EAAU0Y,OAXK,gBAcC,SAAd8jD,GAAoC,aAAZ/qD,GAAwC,SAAdI,GACpDrX,KAAKqhE,YAAYnqD,OAED,SAAd8qD,GAAoC,cAAZ/qD,GAAyC,SAAdI,GACrDrX,KAAKshE,cAAcpqD,QAKvB+pD,EAAFt8D,UAAAs9D,eAAE,WACE,GAAIjiE,KAAKkiE,OAASliE,KAAKyE,UAAW,CAChC,GAAM09D,GAAiBniE,KAAKyE,UAAUy2B,cAChCknC,EAAcpiE,KAAKkiE,MAAM5hE,aAC/B,OAAO6hE,KAAmBC,GAAeA,EAAY38D,SAAS08D,GAGhE,OAAO,kBAlJXnjE,KAACgH,EAAAA,UAADrE,OAAAuE,QAAA,0/CACE/B,SAAU,sBACVvC,SAAF,oBACEqE,SAAU,meACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,WAAA,YACEwgE,SAAF,SAAA,SAAA,kBACE9qD,YAAF+oD,GAAAM,eACEr5D,oCAKqClF,KAAvC7D,MACAC,MAAA,sBACM6jE,uBAAN,WACIhyC,kCAAJ,sCACIiyC,sCAAJ,6KA8CAvjE,KAAAypC,EAAAA,4BAzGAzpC,KAAEyH,EAAAA,mBALFzH,SAAQqD,GAARZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cAmBArH,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,4BAiGA0wC,EAAA5hE,0EAvCAiiE,gBAAAtiE,KAAAwY,EAAAA,SAUAsqD,eAAA9iE,KAAAu/B,EAAAA,aAAA58B,MAAAk/D,MAGAqB,QAAAljE,KAAAsV,EAAAA,UAAA3S,MAAA,WAYAs/D,uBAjHAuB,GAAA,yBAoNA,wEALAhkE,MACAC,MAAA,sBAIA+jE,mBClJE,QAAFC,GACqB9c,EACPthC,EACAlkB,EACAiY,GAJZ,GAAFvY,GAAAG,IACqBA,MAArB2lD,MAAqBA,EACP3lD,KAAdqkB,SAAcA,EACArkB,KAAdG,cAAcA,EACAH,KAAdoY,mBAAcA,EANdpY,KAAA0iE,0BAAsCt0D,EAAAA,aAAaC,KAQ/C,IAAMs0D,GAA4Bhd,EAAMub,UACtCvb,EAAMub,UAAUxtD,cAAczJ,KAAK3E,EAAAA,OAAO,SAAAL,GAAW,QAAEA,EAA7D,cAAoFoJ,EAAAA,KAIhFrO,MAAK0iE,0BAA4Bz2D,EAAAA,MAC/B05C,EAAMvrB,OACNurB,EAAMp0B,OACNoxC,EACAhd,EAAM4b,cAAct3D,KAAK3E,EAAAA,OAAO,SAAAL,GAAW,SAAGA,EAJpD,aAI0EA,EAJ1E,cAMKC,UAAU,WAAM,MAAArF,GAAKuY,mBAAmBxB,iBAGzC+uC,EAAMp0B,OACHtnB,KAAK3E,EAAAA,OAAO,WAAM,MAAAqgD,GAAMsc,oBACxB/8D,UAAU,WAAM,MAAA/E,GAAci7B,SAAS/W,EAAU,aAEpDlkB,EAAcW,QAAQujB,GAAUnf,UAAU,SAAA2O,GACpCA,GAAU8xC,EAAMub,WAClBvb,EAAMub,UAAU0B,mBAAmB/iE,KAS3C,MAME4L,QAAFC,eAAM+2D,EAAN99D,UAAA,gBAAE,WACE,MAAO3E,MAAK2lD,MAAMhlD,0CAIpB8hE,EAAF99D,UAAAk+D,QAAE,WACE7iE,KAAK2lD,MAAMtkB,UAIbohC,EAAF99D,UAAAm+D,YAAE,WACE,MAAO9iE,MAAK2lD,MAAMgc,UAIpBc,EAAF99D,UAAAk9D,kBAAE,WACE,MAAO7hE,MAAK2lD,MAAMkc,qBAIpBY,EAAF99D,UAAAo+D,YAAE,WACE,MAAO/iE,MAAK2lD,MAAM7kC,IAIpB2hD,EAAF99D,UAAAq+D,YAAE,WACE,OAAQhjE,KAAK2lD,MAAM8b,aAAezhE,KAAK2lD,MAAMhlD,UAI/C8hE,EAAF99D,UAAAs+D,SAAE,SAAS3hE,GACP,OAAQA,EAAMsY,SAEZ,IAAKM,GAAAA,MACL,IAAKD,GAAAA,MACH3Y,EAAMC,iBACNvB,KAAK6iE,SACL,MACF,SAKE,YAJI7iE,KAAK2lD,MAAMub,WACblhE,KAAK2lD,MAAMub,UAAUgC,qBAAqB5hE,MAYlDmhE,EAAF99D,UAAAkT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACI7T,KAAKG,cAAci7B,SAASp7B,KAAKqkB,SAAUxQ,IAG7C4uD,EAAF99D,UAAAsD,YAAE,WACEjI,KAAK0iE,0BAA0B3xD,cAC/B/Q,KAAKG,cAAckB,eAAerB,KAAKqkB,0BArI3CrlB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,6BACE+B,QAAF,64BACED,SAAU,mRACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEwY,YACF+oD,GAAAC,gBACAD,GAAAE,uBAEAhiE,MACAC,MAAA,6BACMyI,KAAN,SACIshC,YAAJ,kBACIjG,kBAAJ,oBACI4gC,uBAAJ,gBACI/7D,uBAAJ,gBACIrF,uBAAwB,iBACxBugE,uBAAwB,gBACxBngE,UAAJ,YACIgtB,YAAJ,mBACIi0C,qBAAsB,uQA5B1BpkE,KAAQ2D,EAAAA,eATR3D,KAAEE,EAAAA,qBAHFujE,EAAApjE,kFAyFAojE,iCA8EA,+EALAjkE,MACAC,MAAA,8CAIA4kE,iCAaA,yEALA7kE,MACAC,MAAA,wCAIA6kE,qFCvJAzjE,GAAAuhE,aAAiC,EAU/BvhE,EAAF+hE,YAAkD,YAnDlD,MA+BkCl9D,GAAlC6+D,EAAAzjE,GAOE2L,OAAFC,eACM63D,EADN5+D,UAAA,kBAAE,WAC4B,MAAO3E,MAAKohE,iBACxC,SAAe7uD,GAAiBvS,KAAKohE,YAAcpjD,EAAAA,sBAAsBzL,oCAazEgxD,EAAF5+D,UAAAqD,mBAAE,WACEhI,KAAKgZ,YAAc,GAAIwB,GAAAA,gBAAgBxa,KAAKwjE,UAAU9oD,YAIxD6oD,EAAF5+D,UAAAu+D,qBAAE,SAAqB5hE,GACZ,GAAAsY,GAAXtY,EAAAsY,QACUorC,EAAUhlD,KAAKgZ,WAEjBY,KAAYC,EAAAA,MACdmrC,EAAQlrC,qBACRxY,EAAMC,kBACGqY,IAAYG,EAAAA,KACrBirC,EAAQhrC,oBACR1Y,EAAMC,kBAENvB,KAAKgZ,YAAYoB,UAAU9Y,IAI/BiiE,EAAF5+D,UAAAi+D,mBAAE,SAAmBa,GACjBzjE,KAAKgZ,YAAY2B,iBAAiB8oD,mBAvDtCzkE,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBACVvC,SAAU,eACVC,QAAS,SACT0F,YACEC,QAAS64D,GACT54D,YAAa87D,IAEf/kE,MACEC,MAAO,uCAMX+kE,WAAAxkE,KAAGoJ,EAAAA,gBAAHzG,MAAmB8gE,IAA0Bj7B,aAAa,MAI1Di6B,aAAAziE,KAAGO,EAAAA,QAaHqiE,cAAA5iE,KAAGO,EAAAA,SAnDHgkE,GA+BkCG,EAAAA,0CC/BlC,sBAsBA1kE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAc6gE,EAAAA,mBAAoB3gE,EAAAA,cAC5CI,SACEmgE,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,IAEFp9D,cACE8/D,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,QAxCJ+C,mBnBsCE,QAAFnY,GAAsBpnC,GAAArkB,KAAtBqkB,SAAsBA,EAHpBrkB,KAAFytD,SAAqB,EACnBztD,KAAF6jE,SAAqB,EAUrB,MALEp4D,QAAFC,eACM+/C,EADN9mD,UAAA,eAAE,WACwB,MAAO3E,MAAKytD,cACpC,SAAYxsD,GAAiBjB,KAAKytD,SAAW97C,KAAKic,MAAM7U,EAAAA,qBAAqB9X,qCAG7EwK,OAAFC,eACM+/C,EADN9mD,UAAA,eAAE,WACwB,MAAO3E,MAAK6jE,cACpC,SAAY5iE,GAAiBjB,KAAK6jE,SAAWlyD,KAAKic,MAAM7U,EAAAA,qBAAqB9X,qCAM7EwqD,EAAF9mD,UAAAuqD,UAAE,SAAU4U,EAAkB7iE,GAC1BjB,KAAKqkB,SAAS/jB,cAAcqS,MAAMmxD,GAAY7iE,kBAjClDjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVpD,MACFC,MAAA,iBAEAwH,SAAA,gEACAC,QAAA;wvCACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oEAnBA0sD,EAAEpsD,mEAmCFosD,KA9CAC,GAAA,8IA6EAA,EAAAjqD,aACAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,qPAnBAtF,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA8sD,EAAE3kC,eAAF,WAAA,QACA/nB,KAAA0I,EAAAA,8GAqBA,+HAAAikD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAsBC,GAAA/rD,KAAtB+rD,OAAsBA,EAtBpB/rD,KAAFgsD,YAAwB,EAGtBhsD,KAAFisD,SAAqB,EApCrB,MAuCExgD,QAAFC,eAAMogD,EAANnnD,UAAA,gBAAE,WAAyB,MAAO3E,MAAKisD,SAAW,mCAMhDxgD,OAAFC,eAAMogD,EAANnnD,UAAA,eAAE,WACE,GAAMunD,GAAav6C,KAAKoK,IAA5B7P,MAAuByF,KAAY3R,KAAKmsD,QAGpC,OAAOD,GAAa,EAAIlsD,KAAKosD,SAAWF,EAAa,EAAIlsD,KAAKosD,0CAYhEN,EAAFnnD,UAAA0nD,OAAE,SAAOC,GAAP,GAAFzsD,GAAAG,IACIA,MAAKgsD,YAAc,EACnBhsD,KAAKisD,SAAW,EAEhBjsD,KAAKmsD,QAAU,GAAIriD,OAAMwiD,GACzBtsD,KAAKmsD,QAAQI,KAAK,EAAG,EAAGvsD,KAAKmsD,QAAQhnD,QACrCnF,KAAK8S,UAAY9S,KAAK+rD,OAAO5/C,IAAI,SAAAqgD,GAAQ,MAAA3sD,GAAK4sD,WAAWD,MAInDV,EAAVnnD,UAAA8nD,WAAA,SAAqBD,GAEjB,GAAME,GAAgB1sD,KAAK2sD,iBAAiBH,EAAKI,QASjD,OANA5sD,MAAK6sD,kBAAkBH,EAAeF,GAItCxsD,KAAKgsD,YAAcU,EAAgBF,EAAKI,QAEjC,GAAIE,IAAa9sD,KAAKisD,SAAUS,IAIjCZ,EAAVnnD,UAAAgoD,iBAAA,SAA2BI,GACvB,GAAIA,EAAW/sD,KAAKmsD,QAAQhnD,OAC1B,KAAMivB,OAAM,oCAAoC24B,EAAtD,kCACyC/sD,KAAKmsD,QAAQhnD,OAAtD,KAII,IAAIunD,IAAiB,EACjBM,GAAe,CAGnB,IAEMhtD,KAAKgsD,YAAce,EAAW/sD,KAAKmsD,QAAQhnD,QAC7CnF,KAAKitD,WACLP,EAAgB1sD,KAAKmsD,QAAQv8C,QAAQ,EAAG5P,KAAKgsD,aAC7CgB,EAAchtD,KAAKktD,iBAAiBR,KAItCA,EAAgB1sD,KAAKmsD,QAAQv8C,QAAQ,EAAG5P,KAAKgsD,cAGvB,GAAlBU,GAOJM,EAAchtD,KAAKktD,iBAAiBR,GAIpC1sD,KAAKgsD,YAAcU,EAAgB,IAVjC1sD,KAAKitD,WACLP,EAAgB1sD,KAAKmsD,QAAQv8C,QAAQ,EAAG5P,KAAKgsD,aAC7CgB,EAAchtD,KAAKktD,iBAAiBR,WAY9BM,EAAcN,EAAgBK,GAA6B,GAAfC,EAItD,OAAOr7C,MAAKoK,IAAI2wC,EAAe,IAIzBZ,EAAVnnD,UAAAsoD,oBACIjtD,KAAKgsD,YAAc,EACnBhsD,KAAKisD,UAGL,KAAK,GAAIjhD,GAAI,EAAGA,EAAIhL,KAAKmsD,QAAQhnD,OAAQ6F,IACvChL,KAAKmsD,QAAQnhD,GAAK2G,KAAKoK,IAAI,EAAG/b,KAAKmsD,QAAQnhD,GAAK,IAQ5C8gD,EAAVnnD,UAAAuoD,iBAAA,SAA2BR,GACvB,IAAK,GAAI1hD,GAAI0hD,EAAgB,EAAG1hD,EAAIhL,KAAKmsD,QAAQhnD,OAAQ6F,IACvD,GAAuB,GAAnBhL,KAAKmsD,QAAQnhD,GACf,MAAOA,EAKX,OAAOhL,MAAKmsD,QAAQhnD,QAId2mD,EAAVnnD,UAAAkoD,kBAAA,SAA4B9pC,EAAeypC,GACvC,IAAK,GAAIxhD,GAAI,EAAGA,EAAIwhD,EAAKI,QAAS5hD,IAChChL,KAAKmsD,QAAQppC,EAAQ/X,GAAKwhD,EAAKW,SAhKrCrB,KAyKAgB,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBrtD,KAArBotD,IAAqBA,EAAoBptD,KAAzCqtD,IAAyCA,EA1KzC,MAAAP,MCgBMQ,GAAsB,gCAO5BC,GAAA,wBAEEvtD,KAAFwtD,MAAkB,EAChBxtD,KAAFytD,SAAqB,EA1BrB,MAuCEF,GAAF5oD,UAAA+oD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAc/+C,GAC/D7O,KAAK6tD,YAAcC,GAAeH,GAClC3tD,KAAKwtD,MAAQrB,EAAQC,SACrBpsD,KAAKytD,SAAWtB,EAAQgB,QACxBntD,KAAK+tD,MAAQH,EACb5tD,KAAK44B,WAAa/pB,GAUpB0+C,EAAF5oD,UAAAqpD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCjuD,KAAK6tD,YAAvC,MAAwDK,EAAxD,MAUEX,EAAF5oD,UAAAwpD,gBAAE,SAAgBC,EAAkB/gC,GAGhC,MAAkB,KAAXA,EAAe,IAAMghC,GAAK,IAAID,EAAzC,MAAuDpuD,KAAK6tD,YAA5D,OAA8ExgC,IAU5EkgC,EAAF5oD,UAAA2pD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDvuD,KAAK6tD,YAA5D,KAUEN,EAAF5oD,UAAA6pD,SAAE,SAAShC,EAAmBP,EAAkBwC,GAE5C,GAAIC,GAAsB,IAAM1uD,KAAK+tD,MAIjCY,GAA8B3uD,KAAK+tD,MAAQ,GAAK/tD,KAAK+tD,KAEzD/tD,MAAK4uD,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvD3uD,KAAK6uD,aAAarC,EAAMP,EAAUyC,EAAqBC,IAIzDpB,EAAF5oD,UAAAiqD,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgBhvD,KAAKguD,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBjvD,KAAK44B,WAAuB,QAAU,MACjD4zB,GAAK0C,UAAUD,EAAMjvD,KAAKmuD,gBAAgBa,EAAeP,IACzDjC,EAAK0C,UAAU,QAASb,GAAKruD,KAAKsuD,YAAYU,EAAexC,EAAKI,YAMpEW,EAAF5oD,UAAAwqD,cAAE,WACE,MAAUnvD,MAAK6tD,YAAnB,OAAqC7tD,KAAKytD,SAA1C,SAOEF,EAAF5oD,UAAAyqD,YAAE,SAAYC,GACV,MAAUrvD,MAAKytD,SAAnB,MAAiCztD,KAAKsuD,YAAYe,EAAY,IAgB5D9B,EAAF5oD,UAAA2qD,kBAAE,WAA+C,MAAO,OAnJxD/B,KAmKAgC,GAAA,SAAAzvD,GAEE,QAAFyvD,GAAqBC,GAAnB,GAAF3vD,GAA+CC,EAA/CC,KAAAC,OAAAA,WAAqBH,GAArB2vD,eAAqBA,IArKrB,MAmKqC9qD,GAArC6qD,EAAAzvD,GAIEyvD,EAAF5qD,UAAA+oD,KAAE,SAAKC,EAAoBxB,EAA0ByB,EAAc/+C,GAI/D,GAHA/O,EAAJ6E,UAAU+oD,KAAV3tD,KAAAC,KAAe2tD,EAAYxB,EAASyB,EAAM/+C,GACtC7O,KAAKwvD,eAAiB1B,GAAe9tD,KAAKwvD,iBAErClC,GAAoBmC,KAAKzvD,KAAKwvD,gBACjC,KAAMp7B,OAAM,kBAAkBp0B,KAAKwvD,eAAzC,wBAIED,EAAF5qD,UAAAkqD,aAAE,SAAarC,EAAmBP,GAC9BO,EAAK0C,UAAU,MAAOlvD,KAAKmuD,gBAAgBnuD,KAAKwvD,eAAgBvD,IAChEO,EAAK0C,UAAU,SAAUb,GAAKruD,KAAKsuD,YAAYtuD,KAAKwvD,eAAgBhD,EAAKW,YAG3EoC,EAAF5qD,UAAA2qD,kBAAE,WACE,OACE,SAAUjB,GAAQruD,KAAKovD,YAAYpvD,KAAKwvD,gBAA9C,MAAmExvD,KAAKmvD,mBAItEI,EAAF5qD,UAAA+qD,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE1BD,EAAK5D,QACP4D,EAAK5D,OAAO3hD,QAAQ,SAAAoiD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAjMjCK,GAmKqChC,IA0CrCsC,GAAA,SAAA/vD,GAME,QAAF+vD,GAAc5uD,GAAZ,GAAFpB,GACIC,EADJC,KAAAC,OAAAA,WAEIH,GAAKiwD,YAAY7uD,KArNrB,MA6MqCyD,GAArCmrD,EAAA/vD,GAWE+vD,EAAFlrD,UAAAkqD,aAAE,SAAarC,EAAmBP,EAAkB6C,EACrCC,GACX,GAAIgB,GAAuBjB,EAAe9uD,KAAKgwD,cAC/ChwD,MAAKiwD,eAAiBjwD,KAAKguD,gBAAgB+B,EAAsBhB,GAKjEvC,EAAK0C,UAAU,YAAalvD,KAAKmuD,gBAAgBnuD,KAAKiwD,eAAgBhE,IACtEO,EAAK0C,UAAU,aAAcb,GAAKruD,KAAKsuD,YAAYtuD,KAAKiwD,eAAgBzD,EAAKW,YAG/E0C,EAAFlrD,UAAA2qD,kBAAE,WACE,OACE,gBAAiBjB,GAAQruD,KAAKovD,YAAYpvD,KAAKiwD,gBAArD,MAA0EjwD,KAAKmvD,mBAI7EU,EAAFlrD,UAAA+qD,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAK5D,OAAO3hD,QAAQ,SAAAoiD,GAClBA,EAAK0C,UAAU,YAAa,MAC5B1C,EAAK0C,UAAU,aAAc,SAIzBW,EAAVlrD,UAAAmrD,YAAA,SAAsB7uD,GAClB,GAAMivD,GAAajvD,EAAMmiC,MAAM,IAE/B,IAA0B,IAAtB8sB,EAAW/qD,OACb,KAAMivB,OAAM,uDAAuDnzB,EAAzE,IAGIjB,MAAKgwD,eAAiBxmC,WAAW0mC,EAAW,IAAM1mC,WAAW0mC,EAAW,KA1P5EL,GA6MqCtC,IAwDrC4C,GAAA,SAAArwD,+DArQA,MAqQmC4E,GAAnCyrD,EAAArwD,GACEqwD,EAAFxrD,UAAAkqD,aAAE,SAAarC,EAAmBP,GAE9B,GAAI8D,GAAuB,IAAM/vD,KAAKytD,SAGlC2C,GAAuBpwD,KAAKwtD,MAAQ,GAAKxtD,KAAKwtD,MAG9CyC,EAAiBjwD,KAAKguD,gBAAgB+B,EAAsBK,EAEhE5D,GAAK0C,UAAU,MAAOlvD,KAAKmuD,gBAAgB8B,EAAgBhE,IAC3DO,EAAK0C,UAAU,SAAUb,GAAKruD,KAAKsuD,YAAY2B,EAAgBzD,EAAKW,YAGtEgD,EAAFxrD,UAAA+qD,MAAE,SAAMC,GACAA,EAAK5D,QACP4D,EAAK5D,OAAO3hD,QAAQ,SAAAoiD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAxRjCiB,GAqQmC5C,kBChMjC,QAAF8C,GAAsBhsC,EACYlO,GADZnW,KAAtBqkB,SAAsBA,EACYrkB,KAAlCmW,KAAkCA,EATlCnW,KAAAswD,QAA4B,MAwB5B,MAZE7kD,QAAFC,eACM2kD,EADN1rD,UAAA,YAAE,WACqB,MAAO3E,MAAK+tD,WACjC,SAAS9sD,GACPjB,KAAK+tD,MAAQp8C,KAAKoK,IAAI,EAAGpK,KAAKic,MAAM7U,EAAAA,qBAAqB9X,sCAI3DwK,OAAFC,eACM2kD,EADN1rD,UAAA,kBAAE,WAC2B,MAAO3E,MAAKswD,aACvC,SAAervD,GAAiBjB,KAAKswD,QAAU,IAAGrvD,GAAS,qCAG3DwK,OAAFC,eACM2kD,EADN1rD,UAAA,iBAAE,SACc1D,GACZ,GAAM+jC,GAAW,IAAG/jC,GAAS,GAEzB+jC,KAAahlC,KAAKuwD,aACpBvwD,KAAKuwD,WAAavrB,EAClBhlC,KAAKwwD,eAAexwD,KAAKuwD,8CAI7BF,EAAF1rD,UAAAuP,SAAE,WACElU,KAAKywD,aACLzwD,KAAK0wD,mBAOPL,EAAF1rD,UAAAuU,sBAAE,WACElZ,KAAK2wD,gBAICN,EAAV1rD,UAAA8rD,sBACI,IAAKzwD,KAAK4tD,KACR,KAAMx5B,OAAM,qFAMRi8B,EAAV1rD,UAAA+rD,2BACS1wD,KAAKuwD,YACRvwD,KAAKwwD,eAAe,QAKhBH,EAAV1rD,UAAA6rD,eAAA,SAAyBI,GACjB5wD,KAAK6wD,aACP7wD,KAAK6wD,YAAYnB,MAAM1vD,MA/FR,QAkGb4wD,EACF5wD,KAAK6wD,YAAc,GAAIV,IACdS,GAAaA,EAAUhhD,QAAQ,MAAQ,EAChD5P,KAAK6wD,YAAc,GAAIhB,IAAgBe,GAEvC5wD,KAAK6wD,YAAc,GAAItB,IAAgBqB,IAKnCP,EAAV1rD,UAAAgsD,kCACS3wD,MAAK8wD,mBACR9wD,KAAK8wD,iBAAmB,GAAIhF,IAAgB9rD,KAAK+rD,QAGnD,IAAMI,GAAUnsD,KAAK8wD,iBACfjiD,EAAY7O,KAAKmW,KAAOnW,KAAKmW,KAAKlV,MAAQ,KAEhDjB,MAAK8wD,iBAAiBzE,OAAOrsD,KAAK4tD,MAClC5tD,KAAK6wD,YAAYnD,KAAK1tD,KAAK2tD,WAAYxB,EAASnsD,KAAK4tD,KAAM/+C,GAE3D7O,KAAK+rD,OAAO3hD,QAAQ,SAACoiD,EAAMliD,GACzB,GAAM8iB,GAAM++B,EAAQr5C,UAAUxI,EAC9BzK,GAAKgxD,YAAYrC,SAAShC,EAAMp/B,EAAIggC,IAAKhgC,EAAIigC,OAG/CrtD,KAAK4vD,cAAc5vD,KAAK6wD,YAAYvB,sBAItCe,EAAF1rD,UAAAirD,cAAE,SAAcj9C,GACRA,IACF3S,KAAKqkB,SAAS/jB,cAAcqS,MAAMA,EAAM,IAAMA,EAAM,oBAhI1D3T,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVqE,SAAU,uCACVC,QAAF,gvCACE1H,MACFC,MAAA,iBAEAI,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHAlBAyxD,EAAQhxD,mGA4CRsuD,aAAA3uD,KAAAO,EAAAA,QAMAqxD,YAAA5xD,KAAQO,EAAAA,SAYR8wD,iCCrFA,sBAiBArxD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUslD,GAAeplD,IACzBK,SACEitD,GACA5E,GACAC,GACAvD,GACAplD,GACA6oD,GACAC,GACAF,IAEFloD,cACE4sD,GACA5E,GACAC,GACAE,GACAC,GACAF,QAnCJoF,KCsEAC,GAAA,WAME,QAAFA,GAAcnpD,GAGJ,EAAcmpC,SAClBhxC,KAAKixD,WAAU,EAEfjxD,KAAKkxD,IAAG,EAlFd,MAAAF,oBA6HE,QAAFG,GACwBC,EACZC,EACsB7sD,GAFVxE,KAAxBoxD,YAAwBA,EACZpxD,KAAZqxD,WAAYA,EA1BZrxD,KAAAsxD,gBAA4B,GAAI34B,KAMhC34B,KAAAuxD,gBAA4B,GAAI54B,KAGhC34B,KAAAwxD,kBAA8B,GAAI74B,KAGlC34B,KAAAyxD,sBAAkC,GAAI94B,KAGtC34B,KAAA0xD,uBAAmC,GAAI/4B,KAOvC34B,KAAA2xD,qBAAiC,iBAM3B3xD,KAAKyE,UAAYD,EAjIvB,MAyIE2sD,GAAFxsD,UAAAitD,WAAE,SAAWC,EAAkBX,GAC3B,MAAOlxD,MAAK8xD,sBAAsB,GAAID,EAAUX,IAQlDC,EAAFxsD,UAAAotD,kBAAE,SAAkBF,EAAkBG,GAClC,MAAOhyD,MAAKiyD,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAFxsD,UAAAmtD,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAOlxD,MAAKmyD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAFxsD,UAAAstD,6BAAE,SAA6BC,EAAmBL,EAAkBG,GAChE,GAAMI,GAAmBpyD,KAAKqxD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAajxD,KAAKyyD,+BAA+BL,EACvD,OAAOpyD,MAAKmyD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAFxsD,UAAA+tD,cAAE,SAAcxB,GACZ,MAAOlxD,MAAK2yD,yBAAyB,GAAIzB,IAO3CC,EAAFxsD,UAAAiuD,qBAAE,SAAqBZ,GACnB,MAAOhyD,MAAK6yD,gCAAgC,GAAIb,IAQlDb,EAAFxsD,UAAAguD,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAOlxD,MAAK8yD,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAFxsD,UAAAkuD,gCAAE,SAAgCX,EAAmBF,GACjD,GAAMI,GAAmBpyD,KAAKqxD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAajxD,KAAK+yD,sBAAsBX,EAC9C,OAAOpyD,MAAK8yD,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAFxsD,UAAAquD,uBAAE,SAAuBC,EAAe5W,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxC4W,GACIjzD,KAAK0xD,uBAAuBx4B,IAAI+5B,EAAO5W,GAChCr8C,MAOTmxD,EAAFxsD,UAAAuuD,sBAAE,SAAsBD,GACpB,MAAOjzD,MAAK0xD,uBAAuB3wD,IAAIkyD,IAAUA,GASnD9B,EAAFxsD,UAAAwuD,uBAAE,SAAuB9W,GAErB,MADAr8C,MAAK2xD,qBAAuBtV,EACrBr8C,MAOTmxD,EAAFxsD,UAAAyuD,uBAAE,WACE,MAAOpzD,MAAK2xD,sBAWdR,EAAFxsD,UAAA0uD,kBAAE,SAAkBC,GAAlB,GAAFzzD,GAAAG,KACUkxD,EAAMlxD,KAAKqxD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG3C,IAAMG,GAAazzD,KAAKwxD,kBAAkBzwD,IAAImwD,EAE9C,OAAIuC,GACKtjD,EAAAA,GAAaujD,GAASD,IAGxBzzD,KAAK2zD,uBAAuB,GAAI3C,IAAcsC,IAAUrpD,KAC7D2pD,EAAAA,IAAI,SAAAC,GAAO,MAAAh0D,GAAK2xD,kBAAkBt4B,IAAG,EAAO26B,KAC5C1nD,EAAAA,IAAI,SAAA0nD,GAAO,MAAAH,IAASG,OAYxB1C,EAAFxsD,UAAAmvD,gBAAE,SAAgBxxC,EAAc4vC,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAM5iD,GAAMykD,GAAQ7B,EAAW5vC,GACzBkT,EAASx1B,KAAKsxD,gBAAgBvwD,IAAIuO,EAExC,IAAIkmB,EACF,MAAOx1B,MAAKg0D,kBAAkBx+B,EAIhC,IAAMy+B,GAAiBj0D,KAAKuxD,gBAAgBxwD,IAAImxD,EAEhD,OAAI+B,GACKj0D,KAAKk0D,0BAA0B5xC,EAAM2xC,GAGvCE,EAAAA,WAAgBC,GAA4B9kD,KAM7C6hD,EAAVxsD,UAAAqvD,kBAAA,SAA4Bx+B,GACxB,MAAIA,GAAOy7B,WAEF9gD,EAAAA,GAAaujD,GAASl+B,EAAOy7B,aAG7BjxD,KAAK2zD,uBAAuBn+B,GAAQvrB,KACzC2pD,EAAAA,IAAI,SAAAC,GAAO,MAAAr+B,GAAOy7B,WAAa4C,IAC/B1nD,EAAAA,IAAI,SAAA0nD,GAAO,MAAAH,IAASG,OAalB1C,EAAVxsD,UAAAuvD,0BAAA,SAAoC5xC,EAAc2xC,cAIxCI,EAAYr0D,KAAKs0D,+BAA+BhyC,EAAM2xC,EAE5D,IAAII,EAIF,MAAOlkD,GAAAA,GAAakkD,EAKtB,IAAME,GAAwDN,EAC3D3uD,OAAO,SAAAkvD,GAAiB,OAACA,EAAcvD,aACvC9kD,IAAI,SAAAqoD,GACH,MAAO30D,GAAK40D,0BAA0BD,GAAevqD,KACnDyqD,EAAAA,WAAW,SAACC,GACV,GAAMzD,GAAMrxD,EAAKwxD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADA3K,SAAQD,MAAM,yBAAyB4K,EAAnD,YAAkEyD,EAAI/+B,SACnDzlB,EAAAA,GAAa,UAO5B,OAAOykD,GAAAA,SAASL,GAAsBtqD,KAAKkC,EAAAA,IAAI,WAC7C,GAAM0oD,GAAYh1D,EAAKy0D,+BAA+BhyC,EAAM2xC,EAE5D,KAAKY,EACH,KAAMT,IAA4B9xC,EAGpC,OAAOuyC,OASH1D,EAAVxsD,UAAA2vD,+BAAA,SAAyCzC,EAAkBoC,GAGvD,IAAK,GAAIjpD,GAAIipD,EAAe9uD,OAAS,EAAG6F,GAAK,EAAGA,IAAK,CACnD,GAAMwqB,GAASy+B,EAAejpD,EAC9B,IAAIwqB,EAAOy7B,WAAY,CACrB,GAAM4D,GAAY70D,KAAK80D,uBAAuBt/B,EAAOy7B,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAVxsD,UAAAgvD,uBAAA,SAAiCn+B,aAC7B,OAAOx1B,MAAK+0D,UAAUv/B,EAAO07B,KACxBjnD,KAAKkC,EAAAA,IAAI,SAAA6oD,GAAW,MAAAn1D,GAAK4yD,+BAA+BuC,OAOvD7D,EAAVxsD,UAAA8vD,0BAAA,SAAoCj/B,aAEhC,OAAIA,GAAOy7B,WACF9gD,EAAAA,GAAaqlB,EAAOy7B,YAGtBjxD,KAAK+0D,UAAUv/B,EAAO07B,KAAKjnD,KAAKkC,EAAAA,IAAI,SAAA6oD,GAOzC,MAJKx/B,GAAOy7B,aACVz7B,EAAOy7B,WAAapxD,EAAKkzD,sBAAsBiC,IAG1Cx/B,EAAOy7B,eAOVE,EAAVxsD,UAAA8tD,+BAAA,SAAyCwC,GACrC,GAAMpB,GAAM7zD,KAAK+yD,sBAAsBkC,EAEvC,OADAj1D,MAAKk1D,kBAAkBrB,GAChBA,GAQD1C,EAAVxsD,UAAAmwD,uBAAA,SAAiCK,EAAqBtD,GAClD,GAAMuD,GAAaD,EAAQpP,cAAc,IAAM8L,EAE/C,KAAKuD,EACH,MAAO,KAKT,IAAMC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYrkB,SAASthC,cACvB,MAAO1P,MAAKk1D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYrkB,SAASthC,cACvB,MAAO1P,MAAKk1D,kBAAkBl1D,KAAKw1D,cAAcH,GAQnD,IAAMxB,GAAM7zD,KAAK+yD,sBAAsB,cAIvC,OAFAc,GAAIruB,YAAY6vB,GAETr1D,KAAKk1D,kBAAkBrB,IAMxB1C,EAAVxsD,UAAAouD,sBAAA,SAAgC0C,GAC5B,GAAMC,GAAM11D,KAAKyE,UAAU6gC,cAAc,MACzCowB,GAAIC,UAAYF,CAChB,IAAM5B,GAAM6B,EAAI3P,cAAc,MAE9B,KAAK8N,EACH,KAAMz/B,OAAM,sBAGd,OAAOy/B,IAMD1C,EAAVxsD,UAAA6wD,cAAA,SAAwBljD,GAGpB,IAAK,GAFDuhD,GAAM7zD,KAAK+yD,sBAAsB,eAE5B/nD,EAAI,EAAGA,EAAIsH,EAAQjN,WAAWF,OAAQ6F,IACzCsH,EAAQjN,WAAW2F,GAAGtF,WAAa1F,KAAKyE,UAAUmxD,cACpD/B,EAAIruB,YAAYlzB,EAAQjN,WAAW2F,GAAGsqD,WAAU,GAIpD,OAAOzB,IAMD1C,EAAVxsD,UAAAuwD,kBAAA,SAA4BrB,GAMxB,MALAA,GAAIgC,aAAa,MAAO,IACxBhC,EAAIgC,aAAa,SAAU,QAC3BhC,EAAIgC,aAAa,QAAS,QAC1BhC,EAAIgC,aAAa,sBAAuB,iBACxChC,EAAIgC,aAAa,YAAa,SACvBhC,GAOD1C,EAAVxsD,UAAAowD,UAAA,SAAoBzB,aAChB,KAAKtzD,KAAKoxD,YACR,KAAM0E,KAGR,IAAe,MAAXxC,EACF,KAAMl/B,OAAM,+BAA+Bk/B,EAAjD,KAGI,IAAMpC,GAAMlxD,KAAKqxD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM3C,IAAMyC,GAAkB/1D,KAAKyxD,sBAAsB1wD,IAAImwD,EAEvD,IAAI6E,EACF,MAAOA,EAKT,IAAMC,GAAMh2D,KAAKoxD,YAAYrwD,IAAImwD,GAAM+E,aAAc,SAAShsD,KAC5DisD,EAAAA,SAAS,WAAM,MAAAr2D,GAAK4xD,sBAAsBt4B,OAAO+3B,KACjDiF,EAAAA,QAIF,OADAn2D,MAAKyxD,sBAAsBv4B,IAAIg4B,EAAK8E,GAC7BA,GASD7E,EAAVxsD,UAAAwtD,kBAAA,SAA4BD,EAAmBL,EAAkBr8B,GAE7D,MADAx1B,MAAKsxD,gBAAgBp4B,IAAI66B,GAAQ7B,EAAWL,GAAWr8B,GAChDx1B,MAQDmxD,EAAVxsD,UAAAmuD,qBAAA,SAA+BZ,EAAmB18B,GAC9C,GAAM4gC,GAAkBp2D,KAAKuxD,gBAAgBxwD,IAAImxD,EAQjD,OANIkE,GACFA,EAAgBxsD,KAAK4rB,GAErBx1B,KAAKuxD,gBAAgBr4B,IAAIg5B,GAAY18B,IAGhCx1B,qBA5eXhB,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,+CArFzBhT,KAAQq3D,EAAAA,WAAR50D,aAAAzC,KAqHKsD,EAAAA,aA5GLtD,KAAQs3D,EAAAA,eA8GRt3D,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB0E,EAAAA,4LAhIxB8qD,KAwlBaoF,IAEX/uD,QAAS2pD,GACTjwC,OACG,GAAI5e,GAAAA,SAAY,GAAI6e,GAAAA,SAAYgwC,KAChC,GAAI7uD,GAAAA,SAAY+zD,EAAAA,YACjBC,EAAAA,cACC,GAAIh0D,GAAAA,SAAY+D,EAA+B,WAElD+a,WAAYo1C,ICtkBdC,GAAA,WACE,QAAFA,GAAqBv2D,GAAAF,KAArBE,YAAqBA,EA5BrB,MAAAu2D,MA8BaC,GACTxyD,EAAWuyD,mBAiFb,QAAFE,GACMryD,EACQsyD,EACkBC,GAH9B,GAAFh3D,GAIIC,EAJJC,KAAAC,KAIUsE,IAJVtE,WAEcH,GAAd+2D,cAAcA,EA1Bd/2D,EAAAi3D,SAA6B,EAgCpBD,GACHvyD,EAAWhE,cAAcu1D,aAAa,cAAe,UAnB3D,MA1B6BnxD,GAA7BiyD,EAAA72D,GAKE2L,OAAFC,eACMirD,EADNhyD,UAAA,cAAE,WAEE,MAAO3E,MAAK82D,aAEd,SAAWC,GACT/2D,KAAK82D,QAAU94C,EAAAA,sBAAsB+4C,oCAQvCtrD,OAAFC,eACMirD,EADNhyD,UAAA,eAAE,WACwB,MAAO3E,MAAKg3D,cACpC,SAAY/1D,GACVjB,KAAKg3D,SAAWh3D,KAAKi3D,kBAAkBh2D,oCAKzCwK,OAAFC,eACMirD,EADNhyD,UAAA,gBAAE,WACyB,MAAO3E,MAAKk3D,eACrC,SAAaj2D,GACXjB,KAAKk3D,UAAYl3D,KAAKi3D,kBAAkBh2D,oCAiClC01D,EAAVhyD,UAAAwyD,eAAA,SAAyBtF,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAMuF,GAAQvF,EAASzuB,MAAM,IAC7B,QAAQg0B,EAAMjyD,QACZ,IAAK,GAAG,OAAQ,GAAIiyD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMhjC,OAAM,uBAAuBy9B,EAAlD,OAIE8E,EAAFhyD,UAAAoP,YAAE,SAAY9O,GAAZ,GAAFpF,GAAAG,IAEI,IAAIiF,EAAR,QACM,GAAIjF,KAAKq3D,QAAS,CACT,GAAf5mD,GAAAzQ,KAAAm3D,eAAAn3D,KAAAq3D,SAAenF,EAAfzhD,EAAA,GAA0BohD,EAA1BphD,EAAA,EAEQzQ,MAAK42D,cAAc9C,gBAAgBjC,EAAUK,GAAWjoD,KAAKC,EAAAA,KAAK,IAAIhF,UACpE,SAAA2uD,GAAO,MAAAh0D,GAAKy3D,eAAezD,IAC3B,SAACc,GAAe,MAAApO,SAAQgR,IAAI,0BAA0B5C,EAAI/+B,eAG5D51B,MAAKw3D,kBAILx3D,MAAKy3D,kBACPz3D,KAAK03D,0BAITf,EAAFhyD,UAAAuP,SAAE,WAGMlU,KAAKy3D,kBACPz3D,KAAK03D,0BAIDf,EAAVhyD,UAAA8yD,0BACI,OAAQz3D,KAAKq3D,SAGPV,EAAVhyD,UAAA2yD,eAAA,SAAyBzD,GACrB7zD,KAAKw3D,kBAOL,KAAK,GAFCG,GAAY9D,EAAI+D,iBAAiB,SAE9B5sD,EAAI,EAAGA,EAAI2sD,EAAUxyD,OAAQ6F,IACpC2sD,EAAU3sD,GAAGnF,aAAe,GAG9B7F,MAAKE,YAAYI,cAAcklC,YAAYquB,IAGrC8C,EAAVhyD,UAAA6yD,4BAMI,IALA,GAAMK,GAA6B73D,KAAKE,YAAYI,cAChDw3D,EAAaD,EAAcxyD,WAAWF,OAInC2yD,KAAc,CACnB,GAAMztD,GAAQwtD,EAAcxyD,WAAWyyD,EAIhB,KAAnBztD,EAAM3E,UAAmD,QAAjC2E,EAAM2mC,SAASthC,eACzCmoD,EAAcE,YAAY1tD,KAKxBssD,EAAVhyD,UAAA+yD,kCACI,GAAK13D,KAAKy3D,iBAAV,CAIA,GAAMO,GAAoBh4D,KAAKE,YAAYI,cACrC23D,EAAej4D,KAAKk4D,QACtBl4D,KAAK42D,cAAc1D,sBAAsBlzD,KAAKk4D,SAC9Cl4D,KAAK42D,cAAcxD,wBAEnB6E,IAAgBj4D,KAAKm4D,wBACnBn4D,KAAKm4D,uBACPH,EAAKxyD,UAAU0Y,OAAOle,KAAKm4D,uBAEzBF,GACFD,EAAKxyD,UAAU2Y,IAAI85C,GAErBj4D,KAAKm4D,sBAAwBF,GAG3Bj4D,KAAKo4D,UAAYp4D,KAAKq4D,yBACpBr4D,KAAKq4D,wBACPL,EAAKxyD,UAAU0Y,OAAOle,KAAKq4D,wBAEzBr4D,KAAKo4D,UACPJ,EAAKxyD,UAAU2Y,IAAIne,KAAKo4D,UAE1Bp4D,KAAKq4D,uBAAyBr4D,KAAKo4D,YAS/BzB,EAAVhyD,UAAAsyD,kBAAA,SAA4Bh2D,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM6E,OAAOs9B,MAAM,KAAK,GAAKniC,kBA9LpEjC,KAACgH,EAAAA,UAADrE,OAAAsE,SAAA,4BACE9B,SAAU,WACVvC,SAAU,UACVsE,QAAF,spBACErE,QAAF,SACErD,MACF0I,KAAA,MACMzI,MAAN,WACI65D,0BAAJ,UAEA55D,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA3DAC,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,oBAsGAg1D,EAAAt3D,iEAlCA64D,UAAAl5D,KAAAO,EAAAA,QAUA64D,WAAAp5D,KAAAO,EAAAA,SAWAo3D,mCCtGA,sBAaA33D,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAUuzD,GAAS5zD,IACnBU,cAAekzD,QAhBjBlvC,KR8BA8wC,GAAA,yBA9BA,MAAAA,MA+BalN,GACT1rD,EAAmB44D,IAIvBC,GAAA,yBApCA,MAAAA,MAqCaC,GACT94D,EAAmB64D,+EAevB,MACgC9zD,GAAhC4jD,EAAAxoD,kBAdAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACEvC,SAAU,aACVpD,MACF0I,KAAA,aACMzI,MAAN,gBAEAwH,SAAA,4BACAC,QAAA;w/8BACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAupD,OACAD,GAAA,SAAAvoD,gBAaA,MAAA,QAAAA,GAAAA,EAAAoM,MAAAlM,KAAA4M,YAAA5M,KAHA,MAVA0E,GAAA2jD,EAAAvoD,kGAEAmG,SAAA,4BACEzH,MAAQC,MAAS,YACjByH,QAAF;w/8BACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGAspD,GACAgD,gCASA,+HAAA7C,iCAUA,yHAAAC,iCAUA,0HAAAC,KAGAH,GAAA,SAAAzoD,yDAkBAD,EAAAyrD,SAAAA,EAQAzrD,EAAA0rD,YAAA,EAAE1rD,EAAF0rD,aAAAD,CACkC,IAAlCh5C,GAA0CzS,EAA1C6kB,iBAOI,OAdJpS,GAAA0+B,UAAA,WAAqC1+B,EAArC0+B,SAAAthC,gBASA4C,EAAmBk5C,aAAa;kHAKhC3rD,gBAIA0oD,EAAA5jD,UAAAqD,+FASE,gHAKA,8DAAFhJ,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,yDACgBvC,SAAhB,cACApD,4BAlDAqqD,+BAAA,mBACAC,oCAAA,oBAEEjnD,QAAF,iBACAoE,SAAA,8aAEApH,gBAAAC,EAAAA,wBAAAC,WAIAwpD,EAAAxhC,eAAe,WAAf,QACA/nB,KAAA0I,EAAAA,aACA1I,KAAAspD,GAAA7mD,aAAAzC,KAAAsD,EAAAA,sHAlGAymD,QAAA/pD,KAAAu/B,EAAAA,aAAA58B,MAAA8mD,cF6BAO,GAAA,yBA5CA,MAAAA,MA6Cad,GACTvoD,EAAmBqpD,IAGvBC,GAAA,yBAjDA,MAAAA,MAkDaC,GACTvpD,EAAmBspD,IAGVlB,IACXvgD,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAA+xC,MAC9B7nB,OAAO,GAITgpB,GAAA,WACE,QAAFA,GAEW76B,EAEA20B,GAFAjjD,KAAXsuB,OAAWA,EAEAtuB,KAAXijD,OAAWA,EAlEX,MAAAkG,qBA0IE,QAAFlB,GAAsB5jC,EACAmiB,EAE2C4iB,GAH/D,GAAFvpD,GAIIC,EAJJC,KAAAC,OAAAA,WAAsBH,GAAtBwkB,SAAsBA,EACAxkB,EAAtB2mC,gBAAsBA,EAE2C3mC,EAAjEupD,cAAiEA,EA3CjEvpD,EAAA6mC,WAAsB,EACtB7mC,EAAAgnC,WAAsB,EAUpBhnC,EAAFwpD,iBAAkD,UAkBlD,MAhCmC3kD,GAAnCujD,EAAAnoD,GAoBE2L,OAAFC,eACMu8C,EADNtjD,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,WAAc7mC,KAAKopD,eAAiBppD,KAAKopD,cAAczoD,cACpF,SAAaM,GACX,GAAM+jC,GAAWhnB,EAAAA,sBAAsB/c,EAEnC+jC,KAAahlC,KAAK6mC,YACpB7mC,KAAK6mC,UAAY7B,EACjBhlC,KAAKwmC,gBAAgB5vB,iDAKzBnL,OAAFC,eACMu8C,EADNtjD,UAAA,gBAAE,WAC0B,MAAO3E,MAAKopD,cAAc3E,gBAAgBwC,WAAWjnD,WAC/E,SAAaiB,GACX,GAAMgmD,GAAajpC,EAAAA,sBAAsB/c,EAErCgmD,KAAejnD,KAAK0mC,YACtB1mC,KAAKspD,aAAarC,GAClBjnD,KAAKopD,cAAcG,uDAWvBtB,EAAFtjD,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,KAMUgnD,EAAchnD,KAAK0mC,SAEzBn1B,SAAQC,UAAUC,KAAK,YACjB5R,EAAK6mC,WAAasgB,KACpBnnD,EAAKilB,UAAW,EAChBjlB,EAAK2mC,gBAAgB5vB,mBAK3BqxC,EAAFtjD,UAAAqD,mBAAE,WAGE,GAAIwhD,IAAcxpD,KAAKypD,OAAQzpD,KAAKqkB,WAGtC4jC,EAAFtjD,UAAAsD,YAAE,WAAA,GAAFpI,GAAAG,IACQA,MAAK8kB,UAGPvT,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAKilB,UAAW,IAG/C9kB,KAAKopD,cAAcM,sBAAsB1pD,OAI3CioD,EAAFtjD,UAAA08B,OAAE,WACErhC,KAAK8kB,UAAY9kB,KAAK8kB,UAIxBmjC,EAAFtjD,UAAAkT,MAAE,WACE7X,KAAKqkB,SAAS/jB,cAAcuX,SAO9BowC,EAAFtjD,UAAA61C,SAAE,WACE,MAAOx6C,MAAK2pD,MAAS3pD,KAAK2pD,MAAMrpD,cAAcuF,aAAe,GAAM,IAIrEoiD,EAAFtjD,UAAAujC,kBAAE,WACE,MAAOloC,MAAKW,UAAYX,KAAKmoC,eAAiBnoC,KAAKopD,cAAcjhB,eAGnE8f,EAAFtjD,UAAA4a,aAAE,WACOvf,KAAKW,WACRX,KAAKqhC,SAGLrhC,KAAKopD,cAAcp9B,iBAAiBhsB,QAIxCioD,EAAFtjD,UAAAilD,aAAE,WACE5pD,KAAKopD,cAAcS,kBAAkB7pD,OAGvCioD,EAAFtjD,UAAAmlD,YAAE,WACE9pD,KAAKopD,cAAc3G,cAIrBwF,EAAFtjD,UAAA+f,gBAAE,WACE,MAAO1kB,MAAKqkB,SAAS/jB,eAIvB2nD,EAAFtjD,UAAA2kD,aAAE,SAAaxkC,GACX,MAAIA,KAAa9kB,KAAK0mC,YAItB1mC,KAAK0mC,UAAY5hB,EAEbA,EACF9kB,KAAKopD,cAAc3E,gBAAgBV,OAAO/jD,MAE1CA,KAAKopD,cAAc3E,gBAAgBR,SAASjkD,MAG9CA,KAAKwmC,gBAAgB5vB,gBACd,IAQTqxC,EAAFtjD,UAAA2iC,cAAE,WACEtnC,KAAKwmC,gBAAgB5vB,+BA5KzB5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACEvC,SAAU,gBACVC,QAAF,iBACErD,MACF0I,KAAA,SACMzI,MAAN,gCACIwwB,UAAJ,iBACIC,SAAJ,gBACI/sB,UAAW,iBACX4nD,SAAJ,KACIC,iCAAJ,WACIlB,oCAAJ,mBACImB,uBAAJ,sBACIloD,uBAAJ,uBAEAkE,SAAA,6gBACAvH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAvEAC,KAAEgpD,GAAFvmD,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAsU,EAAAA,WAAA,WAAA,MAAA+xC,YAyHAC,EAAA5oD,kGAxCAoqD,SAAAzqD,KAAAoJ,EAAAA,gBAAAzG,MAAAuoD,MACAP,QAAA3qD,KAAGsV,EAAAA,UAAH3S,MAAA,UACA0nD,mBAAArqD,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAGO,EAAAA,QAGHoB,WAAA3B,KAAAO,EAAAA,QAGAulB,WAAA9lB,KAAAO,EAAAA,SAeA0oD,sCAoJA,GAAApoD,GAAAC,EAAAC,KAAAC,OAAAA,IAoDE,OAEFH,GAAAwkB,SAAAA,iOAFAxkB,EAtCA,4DAUAkB,2KAWAI,YAAA,EACAC,cAAA,mGAuBAsZ,WACS4hC,gBAGT6N,cAAA,WAAA,OAAA,IACMnqD,KAANoqD,cACApqD,KAAAqqD,sBAAArqD,KAAAoqD,aAEQpqD,KAAKoqD,YAAb,MAGApqD,KAAAsqD,cAAAtqD,KAAAykD,gBAAA,SAAAv/C,UAAA,SAAA5D,cAGA,IAAA,GAAAipD,GAAA,EAAA95C,EAAAnP,EAAAwiD,MAAAyG,EAAA95C,EAAAtL,OAAAolD,IAAA,CACA,GAAA7N,GAAAjsC,EAAA85C,EACA7N,GAAA53B,UAAA,EAEA,GAAAxjB,EAAA0iD,QACA,IAAA,GAAA3D,GAAA,EAAAE,EAAAj/C,EAAA0iD,QAAA3D,EAAAE,EAAAp7C,OAAAk7C,IAAA,CAEA,GAAA3D,GAAyB6D,EAAzBF,EACA3D,GAAA53B,UAAA,4aAgCA,GAAA0lC,GAAAxqD,KAAA0nD,gBAAAzE,gDAGAuH,EAAA,2CAGA,IAAaA,GAAbxqD,KAAAirC,QAAA9lC,OAAA,GACAnF,KAAAgZ,YAAAyxC,uDAOA,GAAA7wC,GAAAtY,EAAAsY,QACUorC,EAAUhlD,KAAKgZ,YACf0xC,EAAV1F,EAAAlH,0BACU,IAAV5jC,GAAAA,MAEA,IAAAD,GAAAA,MACAja,KAAA2qD,uBAEQrpD,EAARC,sBAEA,KAAAsY,GAAAA,KACA,IAAAE,GAAAA,IACAH,IAAAC,EAAAA,KAAAmrC,EAAAlrC,qBAAAkrC,EAAAhrC,oBACA1Y,EAAAC,gBACQ,MACR,KAAA0jD,GAAAA,EACA3jD,EAAA4jD,UACAllD,KAAAirC,QAAA5qB,KAAA,SAAA4iC,GAAA,OAAAA,EAAAn+B,WAAA9kB,KAAA4qD,YAAA5qD,KAAA6qD,cACYvpD,EAAMC,iBAElB,MACA,SACQyjD,EAAR5qC,UAAA9Y,GAEAsY,IAAAkT,EAAAA,UAAAlT,IAAAoT,EAAAA,aAAA1rB,EAAAgkD,UACAN,EAAAlH,kBAAA4M,GAEQ1qD,KAAR2qD,gFAOA3qD,KAAAwiD,UAAAxiD,KAAA8qD,iKAYA9qD,KAAAqqD,sBAAAU,OAGA/qD,KAAAoqD,YAAAW,6OAqBA/qD,MAAAirC,QAAA7gC,QAAA,SAAA64C,GAAA,MAAAA,GAAAqG,cAAA,OACSn9C,IAAT,SAAAlL,GAEA,MAAApB,GAAAorC,QAAA5qB,KAAA,SAAA4iC,GACU,MAAVpjD,GAAAsvC,YAAAtvC,EAAAsvC,YAAA8T,EAAAhiD,MAAAA,GAAAgiD,EAAAhiD,QAAAA,MAE6FqE,OAA7F0lD,SACA5gD,QAAA,SAAA64C,GAAA,MAAA,GAAAqG,cAAA,yQAcQ,GAAR2B,GAA4BjrD,KAA5BirC,QAAA3vB,UAAmD4vC,oBACzCD,EAAV5pB,oFAgBA,GAAA8pB,IAAA,mCAGAlI,EAAAqG,aAAArC,KAEAkE,GAAyB,KAGzBA,GACAnrD,KAAAupD,kLAkBAvB,EAAAvmD,+FA3RAI,QAAA,WAAA,gBAAA,YACErD,MACF0I,KAAA,UACAsoB,aAAA,WACA/wB,MAAA,qBACMwwB,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACIi8B,uBAAJ,OACIrpD,uBAAJ,uBAEAkE,SAAA,4BACAC,QAAA;w/8BACAxH,cAAAC,EAAAA,kBAAAC,KACA2I,WAAAwgD,IACElpD,gBAAFC,EAAAA,wBAAAC,WAIAipD,EAAAjhC,eAAA,WAAA,QACA/nB,KAAA0I,EAAAA,gGA9PAujC,UAAAjsC,KAAYoJ,EAAAA,gBAAZzG,MAAAsmD,MAqTA3Y,kBAAAtwC,KAAAwY,EAAAA,gEA/CA7W,WAAA3B,KAAAO,EAAAA,SAOAyoD,GAOAE,gCCxSA,sBA4BAlpD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUslD,GAAellD,GAAiBF,GAAiBqlD,GAAyBtlD,EAAAA,cACpFM,SACEilD,GACAC,GACAC,GACAC,GACAL,GACAplD,GACA0lD,GACAC,GACAN,GACAJ,GACAC,GACAU,IAEFllD,cACE4kD,GACAC,GACAC,GACAC,GACAC,GACAC,GACAV,GACAC,QApDJW,mBTmCE,QAAF9P,GACYE,EACAG,EACAC,EACArkB,EACAxhB,EACkB9O,GALlBzE,KAAZg5C,UAAYA,EACAh5C,KAAZm5C,0BAAYA,EACAn5C,KAAZo5C,QAAYA,EACAp5C,KAAZ+0B,UAAYA,EACA/0B,KAAZuT,kBAAYA,EACkBvT,KAA9ByE,UAA8BA;iBAR5BzE,KAAF64C,UAAc,GAAIllC,GAAAA,QAjClB,MA+CEmlC,GAAFn0C,UAAAiR,OAAE,SAAOmjC,OAAT,KAAAA,IAASA,MACA/4C,KAAKmyC,UACRnyC,KAAKmyC,QAAU,GAAIh+B,GAAAA,eAAenU,KAAKg5C,UAAWh5C,KAAKuT,oBAGzDvT,KAAK+V,SAEA/V,KAAKi5C,UACRj5C,KAAKi5C,QAAU,GAAIC,GAAAA,gBAAgBl5C,KAAKyE,UAAU6gC,cAAc,OAC5DtlC,KAAKm5C,0BAA2Bn5C,KAAKo5C,QAASp5C,KAAK+0B,WAGzD,IAAMziB,GAAuBtS,KAAKg5C,UAAU10C,WAAWhE,aAKvDgS,GAAkB,WAAE+mC,aAAar5C,KAAKi5C,QAAQK,cAAehnC,GAC7DtS,KAAKmyC,QAAQv8B,OAAO5V,KAAKi5C,QAASF,GAClC/4C,KAAK64C,UAAUltC,QAOjBmtC,EAAFn0C,UAAAoR,OAAE,WACM/V,KAAKmyC,QAAQoH,YACfv5C,KAAKmyC,QAAQp8B,UAIjB+iC,EAAFn0C,UAAAsD,YAAE,WACMjI,KAAKi5C,SACPj5C,KAAKi5C,QAAQhnB,0BAxDnBjzB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sEAhBZnF,KAAEkU,EAAAA,cACFlU,KAAEgX,EAAAA,2BACFhX,KAAEw6C,EAAAA,iBACFx6C,KAAEq5B,EAAAA,WACFr5B,KAAEyH,EAAAA,mBA2BFzH,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAY0E,EAAAA,eAzCZyyC,KCwBaW,IAYXC,cAAe/kC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZugB,QAAS,EACTre,UAAW,gBAEbE,EAAAA,WAAW,gBAAiBo2B,EAAAA,OAC1BzqB,EAAAA,MAAM,oBAAqB1L,EAAAA,QAAQ,eAAgBrC,EAAAA,OAAOugB,QAAS,MACnEle,EAAAA,QAAQ,mCAAoCrC,EAAAA,OAAOkC,UAAW,iBAEhEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBrC,EAAAA,OAAOugB,QAAS,QAQvEymB,YAAahlC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOugB,QAAS,KACjCne,EAAAA,WAAW,aACTpC,EAAAA,OAAOugB,QAAS,IAChBle,EAAAA,QAAQ,qDASD2kC,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCxDlCE,GAAiB,GAAI7nC,GAAAA,eAA6B,kBCY/D8nC,GAAA,yBA9BA,MAAAA,MA+BaC,GACTn6C,EAAmBC,EAAci6C,oBAwCnC,QAAFE,GACY75C,EACUsE,EACVrE,EACoC65C,GAJ9C,GAAFn6C,GAOIC,EAAJC,KAAAC,OAAAA,WANYH,GAAZK,YAAYA,EAEAL,EAAZM,cAAYA,EACoCN,EAAhDm6C,YAAgDA,EAZ9Cn6C,EAAFo6C,SAA4C,GAAItmC,GAAAA,QAG9C9T,EAAFq6C,cAA0B,EAGxBr6C,EAAFs6C,kBAA8B,EAWtBh6C,GAIFA,EAAcW,QAAQjB,EAAKK,aAAa,GAGtC85C,GAAeA,EAAYI,SAC7BJ,EAAYI,QAAQv6C,GAGtBA,EAAK4E,UAAYD,IAhBrB,MAlBiCE,GAAjCq1C,EAAAj6C,GAsCEi6C,EAAFp1C,UAAAkT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQ7T,KAAKG,cACPH,KAAKG,cAAci7B,SAASp7B,KAAK0kB,kBAAmB7Q,GAEpD7T,KAAK0kB,kBAAkB7M,SAI3BkiC,EAAFp1C,UAAAsD,YAAE,WACMjI,KAAKG,eACPH,KAAKG,cAAckB,eAAerB,KAAKE,aAGrCF,KAAKg6C,aAAeh6C,KAAKg6C,YAAYK,YACvCr6C,KAAKg6C,YAAYK,WAAWr6C,MAG9BA,KAAKi6C,SAAShmC,YAIhB8lC,EAAFp1C,UAAA+a,aAAE,WACE,MAAO1f,MAAKW,SAAW,KAAO,KAIhCo5C,EAAFp1C,UAAA+f,gBAAE,WACE,MAAO1kB,MAAKE,YAAYI,eAI1By5C,EAAFp1C,UAAA21C,eAAE,SAAeh5C,GACTtB,KAAKW,WACPW,EAAMC,iBACND,EAAMo5B,oBAKVqf,EAAFp1C,UAAA41C,kBAAE,WACEv6C,KAAKi6C,SAAStuC,KAAK3L,OAIrB+5C,EAAFp1C,UAAA61C,SAAE,WACE,GAAMloC,GAAuBtS,KAAKE,YAAYI,cACxCm6C,EAAez6C,KAAKyE,UAAYzE,KAAKyE,UAAUi2C,UAAY,EAC7DC,EAAS,EAEb,IAAIroC,EAAQjN,WAMV,IAAK,GALCu1C,GAAStoC,EAAQjN,WAAWF,OAKzB6F,EAAI,EAAGA,EAAI4vC,EAAQ5vC,IACtBsH,EAAQjN,WAAW2F,GAAGtF,WAAa+0C,IACrCE,GAAUroC,EAAQjN,WAAW2F,GAAGnF,YAKtC,OAAO80C,GAAO70C,uBAxHlB9G,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACEvC,SAAU,cACVC,QAAF,WAAA,iBACErD,MACF0I,KAAA,WACMzI,MAAN,gBACIo8C,oCAAJ,eACIC,wCAAJ,mBACIvY,kBAAJ,iBACIxgC,uBAAJ,sBACIg5C,kBAAmB,mBACnB54C,UAAJ,yBACI8gB,eAAJ,uBAEApkB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEqH,SAAF,yRA1CAjH,KAAE2D,EAAAA,eA8DF3D,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYi4C,MAAZ56C,KAAAsD,EAAAA,cAEAy3C,OCdaiB,GACT,GAAIjpC,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAASgpC,mBAqKb,QAAFC,GACYh7C,EACAiS,EACkCo+B,GAFlCvwC,KAAZE,YAAYA,EACAF,KAAZmS,QAAYA,EACkCnS,KAA9CuwC,gBAA8CA,EAnI9CvwC,KAAAm7C,WAAsCn7C,KAAKuwC,gBAAgB6K,UAC3Dp7C,KAAAq7C,WAAsCr7C,KAAKuwC,gBAAgB+K,UAI3Dt7C,KAAAu7C,UAGAv7C,KAAAw7C,aAAyB,GAAI7nC,GAAAA,QAG7B3T,KAAAy7C,iBAA6BrtC,EAAAA,aAAaC,MAGxCrO,KAAF07C,cAGE17C,KAAF27C,qBAA2C,OAGzC37C,KAAF80C,eAAmB,GAAInhC,GAAAA,QAYrB3T,KAAF47C,cAAmC57C,KAAKuwC,gBAAgBqL,cA8CxD57C,KAAA67C,gBAAqC77C,KAAKuwC,gBAAgBuL,eAQ1D97C,KAAA+7C,aAA8C/7C,KAAKuwC,gBAAgByL,YAgCjEh8C,KAAFuxB,OACM,GAAIhb,GAAAA,aAORvW,KAAFy6B,MAAoBz6B,KAAKuxB,OAAzB,MA3FE9lB,QAAFC,eACMwvC,EADNv2C,UAAA,iBAAE,WACiC,MAAO3E,MAAKm7C,gBAC7C,SAAcl6C,GACE,WAAVA,GAAgC,UAAVA,GACxBg7C,KAEFj8C,KAAKm7C,WAAal6C,EAClBjB,KAAKk8C,sDAIPzwC,OAAFC,eACMwvC,EADNv2C,UAAA,iBAAE,WACiC,MAAO3E,MAAKq7C,gBAC7C,SAAcp6C,GACE,UAAVA,GAA+B,UAAVA,GACvBk7C,KAEFn8C,KAAKq7C,WAAap6C,EAClBjB,KAAKk8C,sDAoBPzwC,OAAFC,eACMwvC,EADNv2C,UAAA,sBAAE,WACgC,MAAO3E,MAAK67C,qBAC5C,SAAmB56C,GACjBjB,KAAK67C,gBAAkB79B,EAAAA,sBAAsB/c,oCAK/CwK,OAAFC,eACMwvC,EADNv2C,UAAA,mBAAE,WACyC,MAAO3E,MAAK+7C,kBACrD,SAAgB96C,GACdjB,KAAK+7C,aAAe/9B,EAAAA,sBAAsB/c,oCAU5CwK,OAAFC,eACMwvC,EADNv2C,UAAA,kBAAE,SACey3C,GACTA,GAAWA,EAAQj3C,SACrBnF,KAAK07C,WAAaU,EAAQhZ,MAAM,KAAK3zB,OAAO,SAACuB,EAAUqrC,GAErD,MADArrC,GAAIqrC,IAAa,EACVrrC,OAGThR,KAAKE,YAAYI,cAAc+7C,UAAY,qCAW/C5wC,OAAFC,eACMwvC,EADNv2C,UAAA,iBAAE,WAC0B,MAAO3E,MAAKk0B,gBACtC,SAAckoB,GAAmBp8C,KAAKk0B,WAAakoB,mCAkBnDlB,EAAFv2C,UAAAuP,SAAE,WACElU,KAAKk8C,sBAGPhB,EAAFv2C,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKgZ,YAAc,GAAIwB,GAAAA,gBAA6Bxa,KAAKu7C,QAAQ7gC,WAAW4hC,gBAC5Et8C,KAAKy7C,iBAAmBz7C,KAAKgZ,YAAYujC,OAAOr3C,UAAU,WAAM,MAAArF,GAAK0xB,OAAOra,KAAK,UAGnFgkC,EAAFv2C,UAAAsD,YAAE,WACEjI,KAAKy7C,iBAAiB1qC,cACtB/Q,KAAKuxB,OAAOtd,YAIdinC,EAAFv2C,UAAAs1C,SAAE,WACE,MAAOj6C,MAAKw7C,aAAavxC,KACvBsL,EAAAA,UAAUvV,KAAKu7C,QACfiB,EAAAA,UAAU,SAAAC,GAAS,MAAAxwC,GAAAA,MAFzBC,UAAA,GAEkCuwC,EAAMtwC,IAAI,SAAAuwC,GAAQ,MAAAA,GAAKzC,gBAKvDiB,EAAFv2C,UAAAgV,eAAE,SAAerY,GACb,GAAMsY,GAAUtY,EAAMsY,OAEtB,QAAQA,GACN,IAAK24B,GAAAA,OACHvyC,KAAKuxB,OAAOra,KAAK,WACjB5V,EAAMo5B,iBACR,MACA,KAAK7N,GAAAA,WACC7sB,KAAK28C,YAAiC,QAAnB38C,KAAK6O,WAC1B7O,KAAKuxB,OAAOra,KAAK,UAErB,MACA,KAAK6V,GAAAA,YACC/sB,KAAK28C,YAAiC,QAAnB38C,KAAK6O,WAC1B7O,KAAKuxB,OAAOra,KAAK,UAErB,MACA,SACM0C,IAAYkT,EAAAA,UAAYlT,IAAYoT,EAAAA,YACtChtB,KAAKgZ,YAAY4jC,eAAe,YAGlC58C,KAAKgZ,YAAYoB,UAAU9Y,KAQjC45C,EAAFv2C,UAAAk4C,eAAE,SAAehpC,GAAf,GAAFhU,GAAAG,SAAA,KAAA6T,IAAiBA,EAAjB,WAEQ7T,KAAK88C,YACP98C,KAAKmS,QAAQ4qC,SAAS3qB,eACnBnoB,KAAKC,EAAAA,KAAK,IACVhF,UAAU,WAAM,MAAArF,GAAKmZ,YAAY4jC,eAAe/oC,GAAQiG,uBAE3D9Z,KAAKgZ,YAAY4jC,eAAe/oC,GAAQiG,sBAQ5CohC,EAAFv2C,UAAAq4C,gBAAE,WACEh9C,KAAKgZ,YAAYoC,eAAe,IAOlC8/B,EAAFv2C,UAAAs4C,aAAE,SAAaC,GAEX,GAAMC,GAAe,mBAzOO,EAyOqCD,GAC3DE,EAAkB3xC,OAAO+D,KAAKxP,KAAK07C,YAAYr7B,KAAK,SAAAg9B,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoBp9C,KAAKu9C,qBAC3Cv9C,KAAKu9C,qBACPv9C,KAAK07C,WAAW17C,KAAKu9C,qBAAsB,GAG7Cv9C,KAAK07C,WAAWyB,IAAgB,EAChCn9C,KAAKu9C,mBAAqBJ,IAQ9BjC,EAAFv2C,UAAAy1C,QAAE,SAAQsC,IAM6B,IAA/B18C,KAAKu7C,OAAO3rC,QAAQ8sC,KACtB18C,KAAKu7C,OAAO3xC,KAAK8yC,GACjB18C,KAAKw7C,aAAa7vC,KAAK3L,KAAKu7C,UAQhCL,EAAFv2C,UAAA01C,WAAE,SAAWqC,GACT,GAAMpyC,GAAQtK,KAAKu7C,OAAO3rC,QAAQ8sC,EAE9B18C,MAAKu7C,OAAO3rC,QAAQ8sC,IAAS,IAC/B18C,KAAKu7C,OAAOlqC,OAAO/G,EAAO,GAC1BtK,KAAKw7C,aAAa7vC,KAAK3L,KAAKu7C,UAWhCL,EAAFv2C,UAAAu3C,mBAAE,SAAmBsB,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsBx9C,KAAKo7C,eAAhD,KAAAqC,IAA2DA,EAAsBz9C,KAAKs7C,UAClF,IAAMc,GAAUp8C,KAAK07C,UACrBU,GAAQ,mBAA8B,WAAToB,EAC7BpB,EAAQ,kBAA6B,UAAToB,EAC5BpB,EAAQ,kBAA6B,UAATqB,EAC5BrB,EAAQ,kBAA6B,UAATqB,GAI9BvC,EAAFv2C,UAAA+4C,gBAAE,WAEE19C,KAAK27C,qBAAuB,SAI9BT,EAAFv2C,UAAAg5C,gBAAE,WAEE39C,KAAK27C,qBAAuB,QAI9BT,EAAFv2C,UAAAi5C,iBAAE,SAAiBt8C,GACftB,KAAK80C,eAAenpC,KAAKrK,GACzBtB,KAAK69C,cAAe,EAQE,UAAlBv8C,EAAM2V,SAA4D,IAArCjX,KAAKgZ,YAAY8kC,kBAChDx8C,EAAMgR,QAAQyrC,UAAY,mBAvThC/+C,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACE8B,SAAU,wXACVC,QAAF,mzDACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,UACE2V,YACFkiC,GAAAC,cACAD,GAAAE,aAEApyC,YACAC,QAAAoyC,GAAAnyC,YAAAyzC,gFA7EAl8C,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAq5C,SAuNAE,EAAA77C,0EAnGAi8C,YAAAt8C,KAAAO,EAAAA,QAGA4lB,cAAAnmB,KAAAsV,EAAAA,UAAA3S,MAAAuR,EAAAA,eAWAupC,QAAAz9C,KAAAoJ,EAAAA,gBAAAzG,MAAAo4C,MAWA+C,cAAA99C,KAAGu/B,EAAAA,aAAH58B,MAAAm3C,MAOAgD,iBAAA98C,KAAAO,EAAAA,QAMAy8C,cAAAh9C,KAAGO,EAAAA,QAGH20B,aAAAl1B,KAAAO,EAAAA,MAAAoC,MAAA,WAQA6D,YAAAxG,KAAAO,EAAAA,QAaAgyB,SAAAvyB,KAAAwY,EAAAA,SAmBAijB,QAAAz7B,KAAAwY,EAAAA,UAaA0jC,KCxLa8C,GACT,GAAIjsC,GAAAA,eAAqC,4BAQhCksC,IACXz2C,QAASw2C,GACT98B,MAAOiX,EAAAA,SACP/W,WAAY88B,kBA2EZ,QAAFC,GAAsBtpB,EACAxQ,EACA9Q,EACkC+8B,EACtB0J,EACQoE,EACRjoC,EAGZhW,GATAH,KAAtB60B,SAAsBA,EACA70B,KAAtBqkB,SAAsBA,EACArkB,KAAtBuT,kBAAsBA,EACkCvT,KAAxDswC,gBAAwDA,EACtBtwC,KAAlCg6C,YAAkCA,EACQh6C,KAA1Co+C,kBAA0CA,EACRp+C,KAAlCmW,KAAkCA,EAGZnW,KAAtBG,cAAsBA,EA3DtBH,KAAA8wB,YAA2C,KAC3C9wB,KAAAq+C,WAA+B,EAC/Br+C,KAAAs+C,mBAA+BlwC,EAAAA,aAAaC,MAC5CrO,KAAAu+C,mBAA+BnwC,EAAAA,aAAaC,MAI5CrO,KAAAw+C,gBAAoC,EAsBlCx+C,KAAFy+C,WAAsD,GAAIloC,GAAAA,aAQxDvW,KAAF0+C,WAAsD1+C,KAAKy+C,WAGzDz+C,KAAF2+C,WAAsD,GAAIpoC,GAAAA,aAQxDvW,KAAF4+C,YAAuD5+C,KAAK2+C,WAapDP,IACFA,EAAkBjE,iBAAmBn6C,KAAK6+C,mBA/IhD,MA8FEpzC,QAAFC,eACMyyC,EADNx5C,UAAA,oCAAE,WAEE,MAAO3E,MAAK8+C,UAGd,SAAiChjC,GAC/B9b,KAAK8+C,KAAOhjC,mCA+CdqiC,EAAFx5C,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK++C,aAEL/+C,KAAK8+C,KAAKrkB,MAAMv1B,UAAU,SAAA85C,GACxBn/C,EAAKo/C,eAGW,UAAXD,GAAiC,QAAXA,IAAqBn/C,EAAKm6C,aACnDn6C,EAAKm6C,YAAYzoB,OAAOra,KAAK8nC,KAIjCh/C,KAAKk/C,gBAGPf,EAAFx5C,UAAAsD,YAAE,WACMjI,KAAK8wB,cACP9wB,KAAK8wB,YAAYmB,UACjBjyB,KAAK8wB,YAAc,MAGrB9wB,KAAKm/C,yBAIP1zC,OAAFC,eAAMyyC,EAANx5C,UAAA,gBAAE,WACE,MAAO3E,MAAKq+C,2CAId5yC,OAAFC,eAAMyyC,EAANx5C,UAAA,WAAE,WACE,MAAO3E,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,MAAkB,MAAQ,uCAI1Dk9C,EAAFx5C,UAAAk6C,gBAAE,WACE,SAAU7+C,KAAKo+C,oBAAqBp+C,KAAKg6C,cAI3CmE,EAAFx5C,UAAAy6C,WAAE,WACE,MAAOp/C,MAAKq+C,UAAYr+C,KAAKq/C,YAAcr/C,KAAKs/C,YAIlDnB,EAAFx5C,UAAA26C,SAAE,WAAA,GAAFz/C,GAAAG,IACI,KAAIA,KAAKq+C,UAAT,CAIAr+C,KAAK++C,YAEL,IAAM/oB,GAAah2B,KAAK22B,gBACxB32B,MAAKu/C,aAAavpB,EAAWsd,YAAiE,kBAC9Ftd,EAAWpgB,OAAO5V,KAAKmyC,SAEnBnyC,KAAK8+C,KAAKhC,aACZ98C,KAAK8+C,KAAKhC,YAAYlnC,OAAO5V,KAAKw/C,UAGpCx/C,KAAKs+C,mBAAqBt+C,KAAKy/C,sBAAsBv6C,UAAU,WAAM,MAAArF,GAAKw/C,cAC1Er/C,KAAK0/C,YAED1/C,KAAK8+C,eAAgB5D,KACvBl7C,KAAK8+C,KAAKpB,oBAKdS,EAAFx5C,UAAA06C,UAAE,WACEr/C,KAAK8+C,KAAKrkB,MAAMvjB,QAOlBinC,EAAFx5C,UAAAkT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQ7T,KAAKG,cACPH,KAAKG,cAAci7B,SAASp7B,KAAKqkB,SAAUxQ,GAE3C7T,KAAKqkB,SAAS/jB,cAAcuX,SAKxBsmC,EAAVx5C,UAAAs6C,kCACI,IAAKj/C,KAAK8wB,aAAgB9wB,KAAK2/C,SAA/B,CAIA,GAAMb,GAAO9+C,KAAK8+C,IAElB9+C,MAAKs+C,mBAAmBvtC,cACxB/Q,KAAK8wB,YAAY/a,SAEb+oC,YAAgB5D,KAClB4D,EAAKnB,kBAEDmB,EAAKhC,YAEPgC,EAAKhK,eACF7qC,KACC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAkB,SAAlBA,EAAM2V,UACtB/M,EAAAA,KAAK,GAEL0Q,EAAAA,UAAUkkC,EAAKhC,YAAYjE,YAE5B3zC,UAAU,WAArB,MAA2B45C,GAAgB,YAAE/oC,cAAU1T,GAAW,WAEtDxC,EAAK+/C,eAGT5/C,KAAK4/C,eAGP5/C,KAAK4/C,aAEDd,EAAKhC,aACPgC,EAAKhC,YAAY/mC,YASfooC,EAAVx5C,UAAA+6C,qBACI1/C,KAAK8+C,KAAKnC,WAAa38C,KAAK6+C,kBAAoB7+C,KAAKg6C,gBAAc33C,GACnErC,KAAK8+C,KAAKjwC,UAAY7O,KAAK0W,IAC3B1W,KAAK6/C,oBACL7/C,KAAK8/C,gBAAe,GACpB9/C,KAAK8+C,KAAKjC,eAAe78C,KAAKw+C,eAAiB,QAAU,YAInDL,EAAVx5C,UAAAk7C,6BACI,GAAI7/C,KAAK8+C,KAAK7B,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRP,EAAa38C,KAAK8+C,KAAKnC,WAEpBA,GACLO,IACAP,EAAaA,EAAWA,UAG1B38C,MAAK8+C,KAAK7B,aAAaC,KAQnBiB,EAAVx5C,UAAAi7C,sBACI5/C,KAAK8/C,gBAAe,GAKf9/C,KAAKw+C,eAIEx+C,KAAK6+C,mBACf7+C,KAAK6X,MAAM,SAFX7X,KAAK6X,QAKP7X,KAAKw+C,gBAAiB,GAIhBL,EAAVx5C,UAAAm7C,eAAA,SAAyBtkB,GACrBx7B,KAAKq+C,UAAY7iB,EACjBx7B,KAAKq+C,UAAYr+C,KAAKy+C,WAAWvnC,OAASlX,KAAK2+C,WAAWznC,OAEtDlX,KAAK6+C,oBACP7+C,KAAKo+C,kBAAkBlE,aAAe1e,IAQlC2iB,EAAVx5C,UAAAo6C,sBACS/+C,KAAK8+C,MACRiB,MAQI5B,EAAVx5C,UAAAgyB,0BACI,IAAK32B,KAAK8wB,YAAa,CACrB9wB,KAAKmyC,QAAU,GAAIh+B,GAAAA,eAAenU,KAAK8+C,KAAK35B,YAAanlB,KAAKuT,kBAC9D,IAAMiiB,GAASx1B,KAAKggD,mBACpBhgD,MAAKigD,sBAAsBzqB,EAA4D,kBACvFx1B,KAAK8wB,YAAc9wB,KAAK60B,SAASqD,OAAO1C,GAG1C,MAAOx1B,MAAK8wB,aAONqtB,EAAVx5C,UAAAq7C,6BACI,MAAO,IAAIvoB,GAAAA,eACTC,iBAAkB13B,KAAK60B,SAASjhB,WAC3B++B,oBAAoB3yC,KAAKqkB,UACzB67B,qBACAtN,sBAAsB,mBAC3BoJ,YAAsC,MAAzBh8C,KAAK8+C,KAAK9C,aAAuBh8C,KAAK6+C,kBAAoB7+C,KAAK8+C,KAAK9C,YACjFJ,cAAe57C,KAAK8+C,KAAKlD,eAAiB,mCAC1CvI,eAAgBrzC,KAAKswC,kBACrBzhC,UAAW7O,KAAKmW,QASZgoC,EAAVx5C,UAAAs7C,sBAAA,SAAgCrsC,aACxB5T,MAAK8+C,KAAK5C,oBACZtoC,EAASs/B,gBAAgBhuC,UAAU,SAAAuR,GACjC,GAAM+mC,GAAyD,UAAnC/mC,EAAO0pC,eAAe/L,SAAuB,QAAU,SAC7EqJ,EAAyD,QAAnChnC,EAAO0pC,eAAe9L,SAAqB,QAAU,OAEjFx0C,GAAKi/C,KAAuB,mBAAEtB,EAAMC,MAUlCU,EAAVx5C,UAAA46C,aAAA,SAAuB7nB,GACd,GAATjnB,GAAA,WAAAzQ,KAAA8+C,KAAA1D,WAAA,MAAA,UAAA,QAAA,OAASrH,EAATtjC,EAAA,GAAkB2vC,EAAlB3vC,EAAA,GAGA4vC,EAAA,UAAArgD,KAAA8+C,KAAAxD,WAAA,SAAA,QAAA,MAAA,UAASjH,EAATgM,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAAlM,EAAAiM,GAAStM,EAATuM,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAA1M,EAAAqM,GAAShM,EAATqM,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEV3gD,MAAK6+C,mBAGP6B,EAAmB3M,EAAkC,WAAxB/zC,KAAK8+C,KAAK1D,UAAyB,QAAU,MAC1EgF,EAAkBhM,EAAuB,QAAZL,EAAoB,QAAU,MAC3D4M,EAAuB,WAAbtM,EA5VsB,GAAA,GA6VtBr0C,KAAK8+C,KAAKhD,iBACpB9H,EAAuB,QAAbK,EAAqB,SAAW,MAC1CmM,EAAuC,QAArBF,EAA6B,SAAW,OAG5D5oB,EAAiBgc,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6CsM,QAA7CA,IACO5M,QAASqM,EAAiBpM,QAAjCA,EAA0CI,SAAUsM,EAAkBrM,SAAtEA,EAAgFsM,QAAhFA,IAEQ5M,QAARA,EACQC,QAASwM,EACTpM,SAARA,EACQC,SAAUiM,EACVK,SAAUA,IAGV5M,QAASqM,EACTpM,QAASwM,EACTpM,SAAUsM,EACVrM,SAAUiM,EACVK,SAAUA,MAMRxC,EAAVx5C,UAAAw6C,iCACIn/C,KAAKs+C,mBAAmBvtC,cACxB/Q,KAAKu+C,mBAAmBxtC,eAIlBotC,EAAVx5C,UAAA86C,0CACUmB,EAAW5gD,KAAgB,YAAE08B,gBAC7BvF,EAAcn3B,KAAgB,YAAEm3B,cAChC0pB,EAAc7gD,KAAKg6C,YAAch6C,KAAKg6C,YAAYzoB,OAASphB,EAAAA,KAC3D2wC,EAAQ9gD,KAAKg6C,YAAch6C,KAAKg6C,YAAYC,WAAWhwC,KAC3D3E,EAAAA,OAAO,SAAAsJ,GAAU,MAAAA,KAAW/O,EAAKu+C,oBACjC94C,EAAAA,OAAO,WAAM,MAAAzF,GAAKw+C,aAChBluC,EAAAA,IAEJ,OAAOlE,GAAAA,MAAM20C,EAAUC,EAAaC,EAAO3pB,IAI7CgnB,EAAFx5C,UAAAo8C,iBAAE,SAAiBz/C,GACV0/C,EAAAA,gCAAgC1/C,KACnCtB,KAAKw+C,gBAAiB,EAKlBx+C,KAAK6+C,mBACPv9C,EAAMC,mBAMZ48C,EAAFx5C,UAAAgV,eAAE,SAAerY,GACb,GAAMsY,GAAUtY,EAAMsY,OAElB5Z,MAAK6+C,oBACAjlC,IAAYmT,EAAAA,aAA4B,QAAb/sB,KAAK0W,KAChCkD,IAAYiT,EAAAA,YAA2B,QAAb7sB,KAAK0W,MACtC1W,KAAKs/C,YAKTnB,EAAFx5C,UAAA4a,aAAE,SAAaje,GACPtB,KAAK6+C,mBAEPv9C,EAAMo5B,kBACN16B,KAAKs/C,YAELt/C,KAAKo/C,cAKDjB,EAAVx5C,UAAAu6C,kCAESl/C,MAAK6+C,oBAIV7+C,KAAKu+C,mBAAqBv+C,KAAKg6C,YAAYC,WAIxChwC,KACC3E,EAAAA,OAAO,SAAAsJ,GAAU,MAAAA,KAAW/O,EAAKu+C,oBAAsBxvC,EAAOjO,WAC9DoxC,EAAAA,MAAM,EAAGkP,EAAAA,gBAEV/7C,UAAU,WACTrF,EAAK2+C,gBAAiB,EAKlB3+C,EAAKi/C,eAAgB5D,KAAWr7C,EAAKi/C,KAAKjB,aAG5Ch+C,EAAKi/C,KAAKhK,eACP7qC,KAAKC,EAAAA,KAAK,GAAI6nC,EAAAA,MAAM,EAAGkP,EAAAA,eAAgBrmC,EAAAA,UAAU/a,EAAKm6C,YAAYC,aAClE/0C,UAAU,WAAM,MAAArF,GAAKy/C,aAExBz/C,EAAKy/C,8BAjcftgD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8CACV3F,MACE0iD,gBAAiB,OACjB95C,uBAAwB,mBACxB+5C,cAAe,2BACfhyB,YAAa,yBACbhtB,UAAW,wBAEbP,SAAU,yDA/DZ5C,KAAEm5B,EAAAA,UAUFn5B,KAAE0I,EAAAA,aASF1I,KAAEyH,EAAAA,mBAqGFzH,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAfZ,MAAsBq8C,QAjGtBh/C,KAAQk8C,GAARz5C,aAAAzC,KAkGesD,EAAAA,aAhGftD,KAAQ+6C,GAARt4C,aAAAzC,KAiGesD,EAAAA,WAjGftD,KAiG2B2vC,EAAAA,SA/H3B3vC,KAAmBge,EAAAA,eAAnBvb,aAAAzC,KAgIesD,EAAAA,aAjIftD,KAAQ2D,EAAAA,kCAsFRy+C,+BAAApiD,KAAGO,EAAAA,MAAHoC,MAAS,0BAUTm9C,OAAA9/C,KAAGO,EAAAA,MAAHoC,MAAS,uBAGT69C,WAAAxgD,KAAGO,EAAAA,MAAHoC,MAAS,wBAGT88C,aAAAz/C,KAAGwY,EAAAA,SAQHknC,aAAA1/C,KAAGwY,EAAAA,SAGHmnC,aAAA3/C,KAAGwY,EAAAA,SAQHonC,cAAA5/C,KAAGwY,EAAAA,UAjIH2mC,iCCAA,sBAqBAn/C,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACAE,GACAsxB,EAAAA,eAEFnxB,SAAU83C,GAASnB,GAAaoE,GAAgBrF,GAAgB/1C,IAChEU,cAAey3C,GAASnB,GAAaoE,GAAgBrF,IACrDvxC,WAAY02C,QA9BdoD,KCuBalT,IAaXC,eAAgBz5B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZkC,UAAW,cACXysC,SAAU,OACVpuB,QAAS,KAEXte,EAAAA,MAAM,UAAWjC,EAAAA,OACfugB,QAAS,EACTouB,SAAU,oBACVzsC,UAAW,eAEbD,EAAAA,MAAM,mBAAoBjC,EAAAA,OACxBugB,QAAS,EACTouB,SAAU,oBACVzsC,UAAW,eAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBrC,EAAAA,OAAOugB,QAAS,QAUvEquB,cAAe5sC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOugB,QAAS,KACjCne,EAAAA,WAAW,mBACTpC,EAAAA,OAAOugB,QAAS,IAChBle,EAAAA,QAAQ,qDAUDo5B,GAAiBD,GAAoBC,eAMrCmT,GAAgBpT,GAAoBoT,chEgB7CxhB,GAAe,CA8BnB38B,GAAA2nC,gCAA6C,CAM7C,IAGa6D,IACT,GAAI78B,GAAAA,eAAqC,8BAShC09B,IACXjoC,QAASonC,GACT1tB,MAAOiX,EAAAA,SACP/W,WAAYogC,IAIdC,GAAA,WACE,QAAFA,GAEWnzB,EAEArtB,GAFAjB,KAAXsuB,OAAWA,EAEAtuB,KAAXiB,MAAWA,EAhKX,MAAAwgD,MAqKAC,GAAA,WACE,QAAFA,GAAqBxhD,EACAyhD,EACAC,EACAC,EACAC,GAJA9hD,KAArBE,YAAqBA,EACAF,KAArB2hD,0BAAqBA,EACA3hD,KAArB4hD,YAAqBA,EACA5hD,KAArB6hD,iBAAqBA,EACA7hD,KAArB8hD,UAAqBA,EA1KrB,MAAAJ,MA4KaK,GAMLpiD,EAAmBD,EAAcE,EAAcoiD,EAAgBN,mCAlLvE,sBAwLA1iD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBAzLZ8qC,KA2LA3F,GAAA,SAAAxpC,GAkSE,QAAFwpC,GACYjxB,EACAD,EACAjG,EACRwvC,EACAr9C,EACoB6R,EACRyrC,EACAC,EACQ7X,EACO8X,EACJvhD,EACqB0hD,GAZ9C,GAAFpiD,GAaIC,EAbJC,KAAAC,KAaUsE,EAAYq9C,EAA2BC,EACvCC,EAAkBC,IAd5B9hD,WACYH,GAAZwY,eAAYA,EACAxY,EAAZuY,mBAAYA,EACAvY,EAAZsS,QAAYA,EAGYtS,EAAxBsW,KAAwBA,EAGAtW,EAAxBmqC,iBAAwBA,EACOnqC,EAA/BiiD,UAA+BA,EAEiBjiD,EAAhDoiD,uBAAgDA,EAhQhDpiD,EAAAwtC,YAAuB,EAGvBxtC,EAAA+gC,WAA+B,EAG/B/gC,EAAAgsC,WAAuB,EAMvBhsC,EAAAqiD,WAA+B,EAG/BriD,EAAAsiD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDxiD,EAAAyiD,KAAiB,cAAcviB,KAG/BlgC,EAAA0iD,SAA8B,GAAI5uC,GAAAA,QAShC9T,EAAFktC,iBAAqB,EASnBltC,EAAF2iD,UAAoC,aAGlC3iD,EAAF4iD,WAAe,aAGb5iD,EAAF6iD,WAAuB,GAGrB7iD,EAAF6sC,iBAA6B,MAG3B7sC,EAAF8iD,0BAA8B,GAAIhvC,GAAAA,QAGhC9T,EAAFywC,gBAAoBzwC,EAAKoiD,yBAOvBpiD,EAAFmpC,SAAa,EAQXnpC,EAAF+iD,aAEM7O,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhBx0C,EAAA+rC,yBAA6C,EAa7C/rC,EAAAgjD,UAAqB,EAGnBhjD,EAAFijD,YAAgB,aAuFdjjD,EAAF0U,UAA2C,GAwBzC1U,EAAFkjD,uBAA0EC,EAAAA,MAAM,WAC5E,MAAInjD,GAAKorC,QACAh/B,EAAAA,MAAbC,UAAA,GAAsBrM,EAAKorC,QAAQ9+B,IAAI,SAAA82C,GAAU,MAAAA,GAAOC,qBAG7CrjD,EAAKsS,QAAQ4qC,SACjB3qB,eACAnoB,KAAKC,EAAAA,KAAK,GAAIsyC,EAAAA,UAAU,WAAM,MAAA38C,GAAKkjD,4BAIxCljD,EAAFs6B,aAA2D,GAAI5jB,GAAAA,aAG7D1W,EAAFw8B,cACMx8B,EAAKs6B,aAAalwB,KAAK3E,EAAAA,OAAO,SAAA69C,GAAK,MAAAA,KAAIh3C,EAAAA,IAAI,eAG/CtM,EAAF08B,cACM18B,EAAKs6B,aAAalwB,KAAK3E,EAAAA,OAAO,SAAA69C,GAAK,OAACA,IAAIh3C,EAAAA,IAAI,eAGhDtM,EAAFyvC,gBACM,GAAI/4B,GAAAA,aAOR1W,EAAFiuB,YAAsD,GAAIvX,GAAAA,aAkBlD1W,EAAKiiD,YAGPjiD,EAAKiiD,UAAUsB,cAAgBvjD,GAGjCA,EAAKU,SAAWC,SAASD,IAAa,EAGtCV,EAAKihB,GAAKjhB,EAAKihB,KA3BnB,MAtP+Bpc,GAA/B4kC,EAAAxpC,GA4FE2L,OAAFC,eAAM49B,EAAN3kC,UAAA,eAAE,WACE,MAAO3E,MAAK6iD,UAAY7iD,KAAKqtC,gBAM/B,SAAYpsC,GACVjB,KAAK6iD,SAAW5hD,mCA6BlBwK,OAAFC,eACM49B,EADN3kC,UAAA,mBAAE,WAC4B,MAAO3E,MAAKqjD,kBACxC,SAAgBpiD,GACdjB,KAAKqjD,aAAepiD,EACpBjB,KAAKsjD,aAAa33C,wCAIpBF,OAAFC,eACM49B,EADN3kC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,GACvCjB,KAAKsjD,aAAa33C,wCAIpBF,OAAFC,eACM49B,EADN3kC,UAAA,gBAAE,WAC0B,MAAO3E,MAAKkiD,eACtC,SAAajhD,GACX,GAAIjB,KAAKgrC,gBACP,KAAMuY,KAGRvjD,MAAKkiD,UAAYlkC,EAAAA,sBAAsB/c,oCAIzCwK,OAAFC,eACM49B,EADN3kC,UAAA,8BAAE,WACwC,MAAO3E,MAAK4rC,6BACpD,SAA2B3qC,GACzBjB,KAAK4rC,wBAA0B5tB,EAAAA,sBAAsB/c,oCAQvDwK,OAAFC,eACM49B,EADN3kC,UAAA,mBAAE,WACoB,MAAO3E,MAAKmiD,kBAChC,SAAgBvzB,GACd,GAAkB,kBAAPA,GACT,KAAM40B,KAERxjD,MAAKmiD,aAAevzB,EAChB5uB,KAAKgrC,iBAEPhrC,KAAKyjD,wDAKTh4C,OAAFC,eACM49B,EADN3kC,UAAA,aAAE,WACmB,MAAO3E,MAAKqpB,YAC/B,SAAU2b,GACJA,IAAahlC,KAAKqpB,SACpBrpB,KAAK0uB,WAAWsW,GAChBhlC,KAAKqpB,OAAS2b,oCAqBlBv5B,OAAFC,eACM49B,EADN3kC,UAAA,UAAE,WACmB,MAAO3E,MAAK0jD,SAC/B,SAAOziD,GACLjB,KAAK0jD,IAAMziD,GAASjB,KAAKsiD,KACzBtiD,KAAKsjD,aAAa33C,wCAiEpB29B,EAAF3kC,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,IACIA,MAAKgrC,gBAAkB,GAAI2Y,GAAAA,eAA0B3jD,KAAK8qC,UAC1D9qC,KAAKsjD,aAAa33C,OAKlB3L,KAAK2iD,0BACF14C,KAAK25C,EAAAA,uBAAwBhpC,EAAAA,UAAU5a,KAAKuiD,WAC5Cr9C,UAAU,WACLrF,EAAKuqC,WACPvqC,EAAKgsC,WAAa,EAClBhsC,EAAKs6B,aAAajjB,MAAK,KAEvBrX,EAAKs6B,aAAajjB,MAAK,GACvBrX,EAAK4qC,WAAWF,QAAU,EAC1B1qC,EAAKuY,mBAAmBxB,mBAKhC0yB,EAAF3kC,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK6jD,kBAEL7jD,KAAKgrC,gBAAwB,SAAE/gC,KAAK2Q,EAAAA,UAAU5a,KAAKuiD,WAAWr9C,UAAU,SAAA5D,GACtEA,EAAMwiD,MAAM15C,QAAQ,SAAA64C,GAAU,MAAAA,GAAOc,WACrCziD,EAAM0iD,QAAQ55C,QAAQ,SAAA64C,GAAU,MAAAA,GAAOgB,eAGzCjkD,KAAKirC,QAAQhmC,QAAQgF,KAAKsL,EAAAA,UAAU,MAAOqF,EAAAA,UAAU5a,KAAKuiD,WAAWr9C,UAAU,WAC7ErF,EAAKqkD,gBACLrkD,EAAK4jD,0BAITna,EAAF3kC,UAAA+4B,UAAE,WACM19B,KAAK8hD,WACP9hD,KAAKmkD,oBAIT7a,EAAF3kC,UAAAoP,YAAE,SAAY9O,GAGNA,EAAR,UACMjF,KAAKsjD,aAAa33C,QAItB29B,EAAF3kC,UAAAsD,YAAE,WACEjI,KAAKuiD,SAAS52C,OACd3L,KAAKuiD,SAAStuC,WACdjU,KAAKsjD,aAAarvC,YAIpBq1B,EAAF3kC,UAAA08B,OAAE,WACErhC,KAAKoqC,UAAYpqC,KAAKy6B,QAAUz6B,KAAK21B,QAIvC2T,EAAF3kC,UAAAgxB,KAAE,WAAA,GAAF91B,GAAAG,MACQA,KAAKW,UAAaX,KAAKirC,SAAYjrC,KAAKirC,QAAQ9lC,SAAUnF,KAAKqtC,aAInErtC,KAAKyrC,aAAezrC,KAAK2U,QAAQrU,cAAcmuB,wBAG/CzuB,KAAK+sC,iBAAmBvsC,SAAS4jD,iBAAiBpkD,KAAK2U,QAAQrU,eAAe,cAE9EN,KAAKqtC,YAAa,EAClBrtC,KAAKgZ,YAAYyB,0BAA0B,MAC3Cza,KAAKqkD,4BACLrkD,KAAKskD,0BACLtkD,KAAKoY,mBAAmBxB,eAGxB5W,KAAKmS,QAAQ4qC,SAAS3qB,eAAenoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACvDrF,EAAKktC,kBAAoBltC,EAAK4qC,WAAWzU,YACzCn2B,EAAK4qC,WAAWzU,WAAWqB,iBAC7Bx3B,EAAK4qC,WAAWzU,WAAWqB,eAAe1kB,MAAM4xC,SAAc1kD,EAAKktC,iBAA3E,UAMEzD,EAAF3kC,UAAA81B,MAAE,WACMz6B,KAAKqtC,aACPrtC,KAAKqtC,YAAa,EAClBrtC,KAAKgZ,YAAYyB,0BAA0Bza,KAAK4qC,SAAW,MAAQ,OACnE5qC,KAAKoY,mBAAmBxB,eACxB5W,KAAKyiD,eAUTnZ,EAAF3kC,UAAA+pB,WAAE,SAAWztB,GACLjB,KAAKirC,SACPjrC,KAAKwkD,qBAAqBvjD,IAW9BqoC,EAAF3kC,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAKwiD,UAAY5zB,GAUnB0a,EAAF3kC,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKyiD,WAAa7zB,GASpB0a,EAAF3kC,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,EAChB/uB,KAAKoY,mBAAmBxB,eACxB5W,KAAKsjD,aAAa33C,QAIpBF,OAAFC,eAAM49B,EAAN3kC,UAAA,iBAAE,WACE,MAAO3E,MAAKqtC,4CAId5hC,OAAFC,eAAM49B,EAAN3kC,UAAA,gBAAE,WACE,MAAO3E,MAAK8qC,SAAW9qC,KAAKgrC,gBAAgBlmB,SAAW9kB,KAAKgrC,gBAAgBlmB,SAAS,oCAIvFrZ,OAAFC,eAAM49B,EAAN3kC,UAAA,oBAAE,WACE,GAAI3E,KAAKstC,MACP,MAAO,EAGT,IAAIttC,KAAKkiD,UAAW,CAClB,GAAMuC,GAAkBzkD,KAAKgrC,gBAAgBlmB,SAAS3Y,IAAI,SAAA82C,GAAU,MAAAA,GAAOyB,WAO3E,OALI1kD,MAAK4qC,UACP6Z,EAAgBE,UAIXF,EAAgBtX,KAAK,MAG9B,MAAOntC,MAAKgrC,gBAAgBlmB,SAAS,GAAG4/B,2CAI1Cpb,EAAF3kC,UAAAimC,OAAE,WACE,QAAO5qC,KAAKmW,MAA2B,QAApBnW,KAAKmW,KAAKlV,OAI/BqoC,EAAF3kC,UAAAgV,eAAE,SAAerY,GACRtB,KAAKW,WACRX,KAAKoqC,UAAYpqC,KAAK4kD,mBAAmBtjD,GAAStB,KAAK6kD,qBAAqBvjD,KAKxEgoC,EAAV3kC,UAAAkgD,qBAAA,SAA+BvjD,GAC3B,GAAMsY,GAAUtY,EAAMsY,QAChBkrC,EAAalrC,IAAYoT,EAAAA,YAAcpT,IAAYkT,EAAAA,UACrDlT,IAAYiT,EAAAA,YAAcjT,IAAYmT,EAAAA,WACxBnT,KAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAGhCla,KAAK8qC,UAAYxpC,EAAMyjD,SAAWD,GACnDxjD,EAAMC,iBACNvB,KAAK21B,QACK31B,KAAK8qC,UACf9qC,KAAKgZ,YAAYoB,UAAU9Y,IAKvBgoC,EAAV3kC,UAAAigD,mBAAA,SAA6BtjD,GACzB,GAAMsY,GAAUtY,EAAMsY,QAChBkrC,EAAalrC,IAAYoT,EAAAA,YAAcpT,IAAYkT,EAAAA,SACnDk4B,EAAUhlD,KAAKgZ,WAErB,IAAIY,IAAYC,EAAAA,MAAQD,IAAYG,EAAAA,IAClCzY,EAAMC,iBACNqY,IAAYC,EAAAA,KAAOmrC,EAAQlrC,qBAAuBkrC,EAAQhrC,wBACrD,IAAI8qC,GAAcxjD,EAAMyjD,OAE7BzjD,EAAMC,iBACNvB,KAAKy6B,YACA,IAAK7gB,IAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAAU8qC,EAAQ3a,WAGxD,GAAIrqC,KAAKkiD,WAAatoC,IAAYqrC,EAAAA,GAAK3jD,EAAM4jD,QAAS,CAC3D5jD,EAAMC,gBACN,IAAM4jD,GAAuBnlD,KAAKirC,QAAQrlC,KAAK,SAAAw/C,GAAO,OAACA,EAAIzkD,WAAaykD,EAAItgC,UAE5E9kB,MAAKirC,QAAQ7gC,QAAQ,SAAA64C,GACdA,EAAOtiD,WACVwkD,EAAuBlC,EAAOc,SAAWd,EAAOgB,kBAG/C,CACL,GAAMoB,GAAyBL,EAAQlH,eAEvCkH,GAAQ5qC,UAAU9Y,GAEdtB,KAAKkiD,WAAa4C,GAAcxjD,EAAMgkD,UAAYN,EAAQ3a,YAC1D2a,EAAQlH,kBAAoBuH,GAC9BL,EAAQ3a,WAAWkb,4BAlBrBjkD,GAAMC,iBACNyjD,EAAQ3a,WAAWkb,yBAsBvBjc,EAAF3kC,UAAA2nB,SAAE,WACOtsB,KAAKW,WACRX,KAAK6iD,UAAW,EAChB7iD,KAAKsjD,aAAa33C,SAQtB29B,EAAF3kC,UAAA4nB,QAAE,WACEvsB,KAAK6iD,UAAW,EAEX7iD,KAAKW,UAAaX,KAAKoqC,YAC1BpqC,KAAKyiD,aACLziD,KAAKoY,mBAAmBxB,eACxB5W,KAAKsjD,aAAa33C,SAOtB29B,EAAF3kC,UAAA6gD,YAAE,WAAA,GAAF3lD,GAAAG,IACIA,MAAKyqC,WAAWgb,eAAex7C,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACrDrF,EAAK6lD,gCACL7lD,EAAKuY,mBAAmB8S,gBACxBrrB,EAAKyqC,2BACLzqC,EAAK8lD,MAAMrlD,cAAcy9C,UAAYl+C,EAAKgsC,cAK9CvC,EAAF3kC,UAAAihD,eAAE,WACE,MAAO5lD,MAAKgqC,iBAAmB,OAAOhqC,KAAKgqC,iBAAiB6b,MAAU,IAKhEvc,EAAV3kC,UAAA+gD,yCACI,IAAK3a,EAAAA,iCAAmC/qC,KAAK8qC,SAAU,CACrD,GAAMgb,GAAiB9lD,KAAK2lD,MAAMrlD,cAAcylD,cAAc,uBAC1DD,KACF/a,EAAAA,gCAAkCt+B,GAA+Bq5C,EAAe7tC,eAMtFxM,OAAFC,eAAM49B,EAAN3kC,UAAA,aAAE,WACE,OAAQ3E,KAAKgrC,iBAAmBhrC,KAAKgrC,gBAAgBgb,2CAG/C1c,EAAV3kC,UAAA8+C,0CAGIlyC,SAAQC,UAAUC,KAAK,WACrB5R,EAAK2kD,qBAAqB3kD,EAAKiiD,UAAYjiD,EAAKiiD,UAAU7gD,MAAQpB,EAAKwpB,WAQnEigB,EAAV3kC,UAAA6/C,qBAAA,SAA+BvjD,aAC3B,IAAIjB,KAAK8qC,UAAY7pC,EAAO,CAC1B,IAAK6I,MAAMC,QAAQ9I,GACjB,KAAMglD,KAGRjmD,MAAKgrC,gBAAgB8G,QACrB7wC,EAAMmJ,QAAQ,SAAC87C,GAAsB,MAAArmD,GAAKsmD,aAAaD,KACvDlmD,KAAKomD,kBACA,CACLpmD,KAAKgrC,gBAAgB8G,OACrB,IAAMuU,GAAsBrmD,KAAKmmD,aAAallD,EAI1ColD,IACFrmD,KAAKgZ,YAAYoC,cAAcirC,GAInCrmD,KAAKoY,mBAAmBxB,gBAOlB0yB,EAAV3kC,UAAAwhD,aAAA,SAAuBllD,cACbolD,EAAsBrmD,KAAKirC,QAAQ5qB,KAAK,SAAC4iC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOhiD,OAAiBpB,EAAKsiD,aAAac,EAAOhiD,MAAQA,GAChE,MAAOqlD,GAKP,MAJIzhD,GAAAA,aAEF0hD,QAAQC,KAAKF,IAER,IAQX,OAJID,IACFrmD,KAAKgrC,gBAAgB+Y,OAAOsC,GAGvBA,GAID/c,EAAV3kC,UAAAk/C,qCACI7jD,MAAKgZ,YAAc,GAAIytC,GAAAA,2BAAsCzmD,KAAKirC,SAC/DqR,gBACAoK,0BACAjsC,0BAA0Bza,KAAK4qC,SAAW,MAAQ,OAErD5qC,KAAKgZ,YAAYujC,OAAOtyC,KAAK2Q,EAAAA,UAAU5a,KAAKuiD,WAAWr9C,UAAU,WAG/DrF,EAAKgY,QACLhY,EAAK46B,UAGPz6B,KAAKgZ,YAAYvC,OAAOxM,KAAK2Q,EAAAA,UAAU5a,KAAKuiD,WAAWr9C,UAAU,WAC3DrF,EAAKwtC,YAAcxtC,EAAK8lD,MAC1B9lD,EAAK8mD,8BACK9mD,EAAKwtC,YAAextC,EAAKirC,WAAYjrC,EAAKmZ,YAAYqxB,YAChExqC,EAAKmZ,YAAYqxB,WAAWkb,2BAM1Bjc,EAAV3kC,UAAAu/C,oCACU0C,EAAqB36C,EAAAA,MAAMjM,KAAKirC,QAAQhmC,QAASjF,KAAKuiD,SAE5DviD,MAAK+iD,uBAAuB94C,KAAK2Q,EAAAA,UAAUgsC,IAAqB1hD,UAAU,SAAA5D,GACxEzB,EAAKgnD,UAAUvlD,EAAMgtB,OAAQhtB,EAAMwlD,aAE/BxlD,EAAMwlD,cAAgBjnD,EAAKirC,UAAYjrC,EAAKwtC,aAC9CxtC,EAAK46B,QACL56B,EAAKgY,WAMT5L,EAAAA,MAAJC,UAAA,GAAalM,KAAKirC,QAAQ9+B,IAAI,SAAA82C,GAAU,MAAAA,GAAOvvC,iBACxCzJ,KAAK2Q,EAAAA,UAAUgsC,IACf1hD,UAAU,WACTrF,EAAKuY,mBAAmBxB,eACxB/W,EAAKyjD,aAAa33C,SAGtB3L,KAAK+mD,iBAICzd,EAAV3kC,UAAAkiD,UAAA,SAAoB5D,EAAmB6D,GACnC,GAAME,GAAchnD,KAAKgrC,gBAAgBic,WAAWhE,EAEhC,OAAhBA,EAAOhiD,OAAkBjB,KAAKkiD,WAKhCe,EAAOn+B,SAAW9kB,KAAKgrC,gBAAgB+Y,OAAOd,GAAUjjD,KAAKgrC,gBAAgBiZ,SAAShB,GAElF6D,GACF9mD,KAAKgZ,YAAYoC,cAAc6nC,GAG7BjjD,KAAK8qC,WACP9qC,KAAKomD,cAEDU,GAKF9mD,KAAK6X,WAlBTorC,EAAOgB,WACPjkD,KAAKgrC,gBAAgB8G,QACrB9xC,KAAKknD,kBAAkBjE,EAAOhiD,QAqB5B+lD,IAAgBhnD,KAAKgrC,gBAAgBic,WAAWhE,IAClDjjD,KAAKknD,oBAGPlnD,KAAKsjD,aAAa33C,QAIZ29B,EAAV3kC,UAAAyhD,iCACI,IAAIpmD,KAAK8qC,SAAU,CACjB,GAAMqc,GAAUnnD,KAAKirC,QAAQ3vB,SAE7Btb,MAAKgrC,gBAAgBr8B,KAAK,SAACG,EAAGC,GAC5B,MAAOlP,GAAKwvC,eAAiBxvC,EAAKwvC,eAAevgC,EAAGC,EAAGo4C,GAC1BA,EAAQv3C,QAAQd,GAAKq4C,EAAQv3C,QAAQb,KAEpE/O,KAAKsjD,aAAa33C,SAKd29B,EAAV3kC,UAAAuiD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADErnD,KAAK8qC,SACQ9qC,KAA4B,SAAEmM,IAAI,SAAA82C,GAAU,MAAAA,GAAOhiD,QAEpDjB,KAAK8kB,SAAY9kB,KAA0B,SAAEiB,MAAQmmD,EAGrEpnD,KAAKqpB,OAASg+B,EACdrnD,KAAK8tB,YAAY5W,KAAKmwC,GACtBrnD,KAAKwiD,UAAU6E,GACfrnD,KAAKsvC,gBAAgBp4B,KAAK,GAAIuqC,IAAgBzhD,KAAMqnD,IACpDrnD,KAAKoY,mBAAmBxB,gBAIlB0yB,EAAV3kC,UAAAoiD,yBACI/mD,KAAK0iD,WAAa1iD,KAAKirC,QAAQ9+B,IAAI,SAAA82C,GAAU,MAAAA,GAAOniC,KAAIqsB,KAAK,MAOvD7D,EAAV3kC,UAAA2/C,mCACQtkD,KAAKgZ,cACHhZ,KAAKstC,MACPttC,KAAKgZ,YAAYc,qBAEjB9Z,KAAKgZ,YAAYoC,cAAcpb,KAAKgrC,gBAAgBlmB,SAAS,MAM3DwkB,EAAV3kC,UAAAgiD,uCACI,GAAMW,GAAoBtnD,KAAKgZ,YAAY8kC,iBAAmB,EACxDyJ,EAAaC,EAA8BF,EAAmBtnD,KAAKirC,QACrEjrC,KAAK8sC,aAET9sC,MAAK2lD,MAAMrlD,cAAcy9C,UAAY0J,EACnCH,EAAoBC,EACpBvnD,KAAKypC,iBACLzpC,KAAK2lD,MAAMrlD,cAAcy9C,UAz3BQ,MA+3BrCzU,EAAF3kC,UAAAkT,MAAE,WACE7X,KAAKE,YAAYI,cAAcuX,SAIzByxB,EAAV3kC,UAAA+iD,gBAAA,SAA0BzE,GACtB,MAAOjjD,MAAKirC,QAAQx7B,OAAO,SAACk4C,EAA4BC,EAAoBt9C,GAC1E,WAAkBjI,KAAXslD,EAAwB1E,IAAW2E,EAAUt9C,MAAQjI,GAAaslD,OACxEtlD,KAIGinC,EAAV3kC,UAAA0/C,qCACI,GAAM7a,GAAaxpC,KAAKypC,iBAClBgT,EAAQz8C,KAAK+rC,gBACb8b,EAAcl2C,KAAKE,IAAI4qC,EAAQjT,EA94BF,KA+4B7Bse,EAAwBrL,EAAQjT,EAGhCJ,EAAY0e,EAAwBD,EAGtC3e,EACAlpC,KAAKstC,MAAQ,EAAIttC,KAAK0nD,gBAAgB1nD,KAAKgrC,gBAAgBlmB,SAAS,GAExEokB,IAAwBse,EAA8Bte,EAAsBlpC,KAAKirC,QAC7EjrC,KAAK8sC,aAIT,IAAM3D,GAAe0e,EAAc,CACnC7nD,MAAK6rC,WAAa7rC,KAAKupC,wBAAwBL,EAAsBC,EAAcC;qDACnFppC,KAAKgpC,SAAWhpC,KAAKipC,yBAAyBC,EAAsBC,EAAcC,GAElFppC,KAAKqpC,4BAA4BD,IAUnCE,EAAF3kC,UAAA4kC,wBAAE,SAAwB3sB,EAAuBusB,EACvBC,GACtB,GAAMI,GAAaxpC,KAAKypC,iBAClBC,EAA4BF,EAAa5sB,EACzC+sB,EAAmBH,EAAa,EAMhCI,EAAwBF,EAA4BP,EAAeQ,CACzE,OAAOh4B,MAAKE,IAAIF,KAAKoK,IAAI,EAAG6tB,GAAwBR,IAItDE,EAAF3kC,UAAAklC,cAAE,WAGE,MAAO7pC,MAAKwU,eAAiB,KAAOxU,KAAKuU,WAAavU,KAAK8pC,aAI7DR,EAAF3kC,UAAAolC,mBAAE,WACE,MAAI/pC,MAAKwU,eACAxU,KAAKwU,eAKTxU,KAAKgqC,kBAAqBhqC,KAAKgqC,iBAAiBC,sBACnDjqC,KAAK6pC,gBAIA7pC,KAAKgqC,iBAAiBE,UAAY,KAHhC,MAOXZ,EAAF3kC,UAAAwlC,yBAAE,WACE,MAAInqC,MAAKoqC,WAAapqC,KAAKgZ,aAAehZ,KAAKgZ,YAAYqxB,WAClDrqC,KAAKgZ,YAAYqxB,WAAWvpB,GAG9B,MAUDwoB,EAAV3kC,UAAA2lC,oCACI,GAKIC,GALEC,EAAcxqC,KAAKyqC,WAAWzU,WAAWqB,eAAe5I,wBACxDic,EAAe1qC,KAAKqY,eAAesyB,kBACnC/S,EAAQ53B,KAAK4qC,SACbC,EAAe7qC,KAAK8qC,SAAWC,EAAAA,gCAj+BH,GAk+BGt+B,EAIrC,IAAIzM,KAAK8qC,SACPP,EAAUQ,EAAAA,oCACL,CACL,GAAIjmB,GAAW9kB,KAAKgrC,gBAAgBlmB,SAAS,IAAM9kB,KAAKirC,QAAQC,KAChEX,GAAUzlB,GAAYA,EAASqmB,MAv+BQ1+B,GAHP,GA8+B7BmrB,IACH2S,IAAY,EAId,IAAMa,GAAe,GAAKZ,EAAYx3B,KAAOu3B,GAAW3S,EAAQiT,EAAe,IACzEQ,EAAgBb,EAAYzS,MAAQwS,EAAUG,EAAaz3B,OACxC2kB,EAAQ,EAAIiT,EAGjCO,GAAe,EACjBb,GAAWa,EAj+B4B,EAk+B9BC,EAAgB,IACzBd,GAAWc,EAn+B4B,GAy+BzCrrC,KAAKyqC,WAAWF,QAAU54B,KAAKic,MAAM2c,GACrCvqC,KAAKyqC,WAAWzU,WAAWsV,kBAQrBhC,EAAV3kC,UAAAskC,yBAAA,SAAmCrsB,EAAuBusB,EACxBC,GAC9B,GAGImC,GAHE/B,EAAaxpC,KAAKypC,iBAClB+B,GAA0BhC,EAAaxpC,KAAKyrC,aAAarsB,QAAU,EACnEssB,EAAsB/5B,KAAKg6B,MAjhCE,IAihC8BnC,EAIjE,IAAIxpC,KAAK4rC,wBACP,MAAO,EAGT,IAAwB,IAApB5rC,KAAK6rC,WACPN,EAA2B3uB,EAAgB4sB,MACtC,IAAIxpC,KAAK6rC,aAAezC,EAAW,CACxC,GAAM0C,GAAsB9rC,KAAK+rC,gBAAkBL,EAC7CM,EAAuBpvB,EAAgBkvB,EAIzCG,EACAzC,GAAcxpC,KAAK+rC,gBAAkBvC,EAliCR,KAkiCgDA,CAMjF+B,GAA2BS,EAAuBxC,EAAayC,MAK/DV,GAA2BpC,EAAeK,EAAa,CAMzD,OAAO73B,MAAKic,OAAkC,EAA5B2d,EAAgCC,IAS5ClC,EAAV3kC,UAAA0kC,4BAAA,SAAsCD,GAClC,GAAMI,GAAaxpC,KAAKypC,iBAClBiB,EAAe1qC,KAAKqY,eAAesyB,kBAEnCuB,EAAoBlsC,KAAKyrC,aAAane,IAriCH,EAsiCnC6e,EACFzB,EAAatrB,OAASpf,KAAKyrC,aAAaxT,OAviCH,EAyiCnCmU,EAAiBz6B,KAAK06B,IAAIrsC,KAAKgpC,UAC/BsD,EACF36B,KAAKE,IAAI7R,KAAK+rC,gBAAkBvC,EAtkCD,KAukC7B+C,EAAoBD,EAAmBF,EAAiBpsC,KAAKyrC,aAAarsB,MAE5EmtB,GAAoBJ,EACtBnsC,KAAKwsC,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BlsC,KAAKysC,iBAAiBL,EAAgBF,EAAmB9C,GAExDppC,KAAK0sC,iBAAmB1sC,KAAK2sC,2BAKzBrD,EAAV3kC,UAAA6nC,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMS,GAAwBj7B,KAAKic,MAAM2e,EAAoBJ,EAI7DnsC,MAAK6rC,YAAce,EACnB5sC,KAAKgpC,UAAY4D,EACjB5sC,KAAK0sC,iBAAmB1sC,KAAK2sC,0BAKzB3sC,KAAK6rC,YAAc,IACrB7rC,KAAK6rC,WAAa,EAClB7rC,KAAKgpC,SAAW,EAChBhpC,KAAK0sC,iBAAmB,mBAKpBpD,EAAV3kC,UAAA8nC,iBAAA,SAA2BL,EAAwBF,EACxB9C,GAEvB,GAAMyD,GAAwBl7B,KAAKic,MAAMwe,EAAiBF,EAW1D,IAPAlsC,KAAK6rC,YAAcgB,EACnB7sC,KAAKgpC,UAAY6D,EACjB7sC,KAAK0sC,iBAAmB1sC,KAAK2sC,0BAKzB3sC,KAAK6rC,YAAczC,EAIrB,MAHAppC,MAAK6rC,WAAazC,EAClBppC,KAAKgpC,SAAW,OAChBhpC,KAAK0sC,iBAAmB,gBAMpBpD,EAAV3kC,UAAAgoC,mCACI,GAAMnD,GAAaxpC,KAAKypC,iBAClB+B,GAA0BhC,EAAaxpC,KAAKyrC,aAAarsB,QAAU,CAEzE,OAAO,QADSzN,KAAK06B,IAAIrsC,KAAKgpC,UAAYwC,EAAyBhC,EAAa,GACpF,UAIUF,EAAV3kC,UAAAonC,yBACI,MAAO/rC,MAAKirC,QAAQ9lC,OAASnF,KAAK8sC,aAAa3nC,QAIzCmkC,EAAV3kC,UAAA8kC,0BACI,MApoCiC,GAooC1BzpC,KAAK+sC,kBAOdzD,EAAF3kC,UAAAqoC,kBAAE,SAAkBC,GAChBjtC,KAAKktC,iBAAmBD,EAAIE,KAAK,MAOnC7D,EAAF3kC,UAAAyoC,iBAAE,WACEptC,KAAK6X,QACL7X,KAAK21B,QAOPlqB,OAAFC,eAAM49B,EAAN3kC,UAAA,wBAAE,WACE,MAAO3E,MAAKqtC,aAAertC,KAAKstC,sDAplCpCtuC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACVqE,SAAU,27CACVC,QAAF,ujEACErE,QAAF,WAAA,gBAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACF0I,KAAA,UACMshC,YAAN,KACIjG,kBAAJ,WACIgL,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACI1rC,uBAAwB,sBACxB2rC,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5BzvC,MAAJ,aACI0wB,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEA3X,YACA42B,GAAAC,gBAEA7mC,YACAC,QAAA6mC,GAAA5mC,YAAA6hC,IACA9hC,QAAA8mC,GAAA7mC,YAAA6hC,8FAnMAtqC,KAAQC,EAAAA,SAKRD,KAAEinB,KAYFjnB,KAAE0I,EAAAA,aAsBF1I,KAAEge,EAAAA,eAAFvb,aAAAzC,KAAAsD,EAAAA,aA5BAtD,KAAEuvC,EAAAA,OAAF9sC,aAAAzC,KAAAsD,EAAAA,aA/BAtD,KAAQwvC,EAAAA,mBAAR/sC,aAAAzC,KAAAsD,EAAAA,aAiDAtD,KAA6DyvC,GAA7DhtC,aA0aKzC,KA1aLsD,EAAAA,aAAAtD,KAA8B0vC,EAAAA,UAA9BjtC,aAAAzC,KAAA2vC,EAAAA,OAAA3vC,KAAAsD,EAAAA,aAsBAtD,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAtBA3C,SAAkDqD,GAAlDZ,aAAAzC,KA6aKuD,EAAAA,OA7aLZ,MAAAitC,SA+aAtF,EAAAjqC,wGAxJAorC,aAAAzrC,KAAAsV,EAAAA,UAAA3S,MAAAktC,EAAAA,uBAGA5D,UAAAjsC,KAAAoJ,EAAAA,gBAAAzG,MAAAmtC,IAAAtH,aAAA,MAGAsF,eAAA9tC,KAAAoJ,EAAAA,gBAAAzG,MAAAotC,MAGA7a,aAAAl1B,KAAAO,EAAAA,QAGAyvC,gBAAAhwC,KAAAu/B,EAAAA,aAAkB58B,MAAlBstC,MAGAnF,cAAA9qC,KAAAO,EAAAA,QAGAojC,WAAA3jC,KAAAO,EAAAA,QAGAurC,WAAA9rC,KAAAO,EAAAA,QAQA2vC,yBAAAlwC,KAAAO,EAAAA,QAQA4vC,cAAAnwC,KAAAO,EAAAA,QAWA0B,QAAAjC,KAAAO,EAAAA,QAWAgV,YAAAvV,KAAAO,EAAAA,MAAQoC,MAAR,gBAcA6S,iBAAAxV,KAAAO,EAAAA,MAAAoC,MAAA,qBAWAytC,oBAAApwC,KAAAO,EAAAA,QAGA8vC,iBAAArwC,KAAGO,EAAAA,QAGHuhB,KAAA9hB,KAAAO,EAAAA,QAMA46B,eAAAn7B,KAAAwY,EAAAA,SAGA6kB,gBAAQr9B,KAARwY,EAAAA,OAAA7V,MAAA,YAoBA46B,gBAAAv9B,KAAAwY,EAAAA,OAAA7V,MAAA,YAGA2tC,kBAAAtwC,KAAAwY,EAAAA,SAIAsW,cAAA9uB,KAAAwY,EAAAA,UAYA8xB,mCmD3dA,sBAgBAtqC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAyxB,EAAAA,cACAgb,GACAxsC,IAEFK,SAAUosC,GAAoBlG,GAAW2F,GAAkBM,GAAiBxsC,IAC5EU,cAAe6lC,GAAW2F,IAC1B1nC,WAAYkoC,QAzBdC,KCkBaC,IAIXC,aAAcj7B,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyBjC,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,cAC7DD,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCwL,EAAAA,WACrE7N,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,WAAYwY,OAAQ,IAClD1a,EAAAA,OAAOugB,QAAS,GAAKre,UAAW,cAAewY,OAAQ,KACvD1a,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,WAAYwY,OAAQ,QAEpDtY,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoCrC,EAAAA,OAAOugB,QAAS,SnDmB7E2c,GAAqB,GAcrBC,GACT,GAAI/9B,GAAAA,eAAqC,+BAQhCg+B,IACXvoC,QAASsoC,GACT5uB,MAAOiX,EAAAA,SACP/W,WAAY4uB,IAWDC,GACT,GAAIl+B,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAASi+B,mBA2Gb,QAAFC,GACYtb,EACA30B,EACAkwC,EACA78B,EACApB,EACA5N,EACA8rC,EACAlwC,EACqCmwC,EACzBn6B,EAEVo6B,GAZZ,GAAF1wC,GAAAG,IACYA,MAAZ60B,SAAYA,EACA70B,KAAZE,YAAYA,EACAF,KAAZowC,kBAAYA,EACApwC,KAAZuT,kBAAYA,EACAvT,KAAZmS,QAAYA,EACAnS,KAAZuE,UAAYA,EACAvE,KAAZqwC,eAAYA,EACArwC,KAAZG,cAAYA,EACqCH,KAAjDswC,gBAAiDA,EACzBtwC,KAAxBmW,KAAwBA,EAEVnW,KAAduwC,gBAAcA,EAvFdvwC,KAAAyV,UAAuC,QACvCzV,KAAA6mC,WAA+B,EAmC7B7mC,KAAFwwC,UAA4CxwC,KAAKuwC,gBAAgBC,UAG/DxwC,KAAFywC,UAA4CzwC,KAAKuwC,gBAAgBE,UAEjEzwC,KAAA0wC,SAAqB,GA6BrB1wC,KAAA2wC,iBAA6B,GAAIhY,KAGjC34B,KAAAwY,WAAgC,GAAI7E,GAAAA,OAgBhC,IAAMrB,GAAuBpS,EAAYI,aAIpCiE,GAAUqsC,KAAQrsC,EAAUssC,SAC/B7wC,KAAK2wC,iBACFzX,IAAI,aAAc,WAAM,MAAAr5B,GAAK0S,SAC7B2mB,IAAI,aAAc,WAAM,MAAAr5B,GAAKgT,SAC7BzI,QAAQ,SAAC0mC,EAAUxvC,GAAU,MAAAgR,GAAQy+B,iBAAiBzvC,EAAOwvC,KAGzC,UAArBx+B,EAAQ0+B,UAA6C,aAArB1+B,EAAQ0+B,WAM1C1+B,EAAQK,MAAMs+B,iBAAmB3+B,EAAQK,MAAMu+B,WAAa5+B,EAAQK,MAAMw+B,aAAe,IAMvF7+B,EAAQ8+B,WAAiD,SAApC9+B,EAAQK,MAAsB,iBACrDL,EAAQK,MAAsB,eAAI,IAGpCxS,EAAcW,QAAQZ,GAAa+J,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,SAAA2O,GAEvEA,EAEiB,aAAXA,GACT1B,EAAQ8I,IAAI,WAAM,MAAApb,GAAK0S,SAFvBJ,EAAQ8I,IAAI,WAAM,MAAApb,GAAKgT,KAAK,OAhPpC,MA8HEpH,QAAFC,eACMykC,EADNxrC,UAAA,gBAAE,WACkC,MAAO3E,MAAKyV,eAC9C,SAAaxU,GACPA,IAAUjB,KAAKyV,YACjBzV,KAAKyV,UAAYxU,EAEbjB,KAAK8wB,cACP9wB,KAAKqxC,kBAEDrxC,KAAKsxC,kBACPtxC,KAAqB,iBAAEuS,KAAK,GAG9BvS,KAAK8wB,YAAYwa,oDAMvB7/B,OAAFC,eACMykC,EADNxrC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,GAGnCjB,KAAK6mC,WACP7mC,KAAK6S,KAAK,oCAadpH,OAAFC,eACMykC,EADNxrC,UAAA,eAAE,WACgB,MAAO3E,MAAK0wC,cAC5B,SAAYzvC,GACVjB,KAAKqwC,eAAekB,kBAAkBvxC,KAAKE,YAAYI,cAAeN,KAAK0wC,UAG3E1wC,KAAK0wC,SAAoB,MAATzvC,GAAgB,GAAGA,GAAQ6E,OAAS,IAE/C9F,KAAK0wC,UAAY1wC,KAAKwxC,oBACzBxxC,KAAK6S,KAAK,IAEV7S,KAAKyxC,wBACLzxC,KAAKqwC,eAAeqB,SAAS1xC,KAAKE,YAAYI,cAAeN,KAAK41B,2CAKtEnqB,OAAFC,eACMykC,EADNxrC,UAAA,oBAAE,WACqB,MAAO3E,MAAK2xC,mBACjC,SAAiB1wC,GACfjB,KAAK2xC,cAAgB1wC,EACjBjB,KAAKsxC,kBACPtxC,KAAK4xC,iBAAiB5xC,KAAK2xC,gDA+D/BxB,EAAFxrC,UAAAsD,YAAE,WAAA,GAAFpI,GAAAG,IACQA,MAAK8wB,cACP9wB,KAAK8wB,YAAYmB,UACjBjyB,KAAKsxC,iBAAmB,MAIrBtxC,KAAKuE,UAAUqsC,MAClB5wC,KAAK2wC,iBAAiBvmC,QAAQ,SAAC0mC,EAAUxvC,GACvC,MAAAzB,GAAKK,YAAYI,cAAcuxC,oBAAoBvwC,EAAOwvC,KAE5D9wC,KAAK2wC,iBAAiBmB,SAGxB9xC,KAAKwY,WAAW7M,OAChB3L,KAAKwY,WAAWvE,WAEhBjU,KAAKqwC,eAAekB,kBAAkBvxC,KAAKE,YAAYI,cAAeN,KAAK41B,SAC3E51B,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCiwC,EAAFxrC,UAAA4N,KAAE,SAAKw/B,GAAL,GAAFlyC,GAAAG,IACI,QADJ,KAAA+xC,IAAOA,EAAgB/xC,KAAKwwC,YACpBxwC,KAAKW,UAAaX,KAAK41B,WAAY51B,KAAKwxC,qBACzCxxC,KAAqB,iBAAEgyC,gBAAmBhyC,KAAqB,iBAAEiyC,gBADpE,CAKA,GAAMjc,GAAah2B,KAAK22B,gBAExB32B,MAAKkyC,UACLlyC,KAAKmyC,QAAUnyC,KAAKmyC,SAAW,GAAI7b,GAAAA,gBAAgB8b,GAAkBpyC,KAAKuT,mBAC1EvT,KAAKsxC,iBAAmBtb,EAAWpgB,OAAO5V,KAAKmyC,SAAS3b,SACxDx2B,KAAKsxC,iBAAiBe,cACnBpoC,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aACpBtT,UAAU,WAAM,MAAArF,GAAKqyC,YACxBlyC,KAAK4xC,iBAAiB5xC,KAAK2xC,eAC3B3xC,KAAKyxC,wBACLzxC,KAAqB,iBAAEuS,KAAKw/B,KAI9B5B,EAAFxrC,UAAAkO,KAAE,SAAKk/B,OAAP,KAAAA,IAAOA,EAAgB/xC,KAAKywC,WACpBzwC,KAAKsxC,kBACPtxC,KAAKsxC,iBAAiBz+B,KAAKk/B,IAK/B5B,EAAFxrC,UAAA08B,OAAE,WACErhC,KAAKwxC,oBAAsBxxC,KAAK6S,OAAS7S,KAAKuS,QAIhD49B,EAAFxrC,UAAA6sC,kBAAE,WACE,QAASxxC,KAAKsxC,kBAAoBtxC,KAAKsxC,iBAAiBgB,aAI1DnC,EAAFxrC,UAAAgV,eAAE,SAAe3C,GACThX,KAAKwxC,qBAAuBx6B,EAAE4C,UAAY24B,EAAAA,SAC5Cv7B,EAAE0jB,kBACF16B,KAAK6S,KAAK,KAKds9B,EAAFxrC,UAAA6tC,gBAAE,WACExyC,KAAK6S,KAAK7S,KAAKuwC,gBAAgBkC,oBAIzBtC,EAAVxrC,UAAAgyB,oCACI,IAAI32B,KAAK8wB,YACP,MAAO9wB,MAAK8wB,WAId,IAAM4hB,GAAW1yC,KAAK60B,SAASjhB,WAC5B++B,oBAAoB3yC,KAAKE,aACzB0yC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsB/yC,KAAKowC,kBAC9B4C,4BAA4BhzC,KAAKE,YA2BpC,OAzBAwyC,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgBjpC,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,SAAAuR,GAC9D5W,EAAKyxC,kBACH76B,EAAO08B,yBAAyBC,kBAAoBvzC,EAAKyxC,iBAAiBgB,aAG5EzyC,EAAKsS,QAAQ8I,IAAI,WAAM,MAAApb,GAAKgT,KAAK,OAKvC7S,KAAK8wB,YAAc9wB,KAAK60B,SAASqD,QAC/BrpB,UAAW7O,KAAKmW,KAChBuhB,iBAAkBgb,EAClBxe,WA5S6B,oBA6S7Bmf,eAAgBrzC,KAAKswC,oBAGvBtwC,KAAKqxC,kBAELrxC,KAAK8wB,YAAYqG,cACdltB,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aACpBtT,UAAU,WAAM,MAAArF,GAAKqyC,YAEjBlyC,KAAK8wB,aAINqf,EAAVxrC,UAAAutC,mBACQlyC,KAAK8wB,aAAe9wB,KAAK8wB,YAAYnb,eACvC3V,KAAK8wB,YAAY/a,SAGnB/V,KAAKsxC,iBAAmB,MAIlBnB,EAAVxrC,UAAA0sC,2BACI,GAAMz9B,GACF5T,KAAgB,YAAEszC,YAA4B,iBAC5Cz/B,EAAS7T,KAAKuzC,aACdC,EAAUxzC,KAAKyzC,qBAErB7/B,GAAS8/B,eACb5d,MAAUjiB,EAAO8/B,KAASH,EAAQG,MAClC7d,MAAUjiB,EAAO+/B,SAAaJ,EAAQI,aAQpCzD,EAAFxrC,UAAA4uC,WAAE,WACE,GAEIM,GAFEC,GAAS9zC,KAAKmW,MAA2B,OAAnBnW,KAAKmW,KAAKlV,MAChC2S,EAAW5T,KAAK4T,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBigC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZpgC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBkgC,GACV,SAAZlgC,IAAwBkgC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZpgC,GACa,SAAZA,GAAuBkgC,GACX,QAAZlgC,IAAuBkgC,GAGxB,KAAMG,IAAkCrgC,EAFxCigC,IAAkBE,QAAS,MAAOC,QAAS,UAKtC,GAAXvjC,GAAAzQ,KAAAk0C,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBtjC,EAAAkb,EAI6BqoB,QAJ7BvjC,EAAAob,KASEskB,EAAFxrC,UAAA8uC,oBAAE,WACE,GAEIU,GAFEL,GAAS9zC,KAAKmW,MAA2B,OAAnBnW,KAAKmW,KAAKlV,MAChC2S,EAAW5T,KAAK4T,QAGtB,IAAgB,SAAZA,EACFugC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZzgC,EACTugC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZzgC,GACa,QAAZA,GAAsBkgC,GACV,SAAZlgC,IAAwBkgC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZzgC,GACa,SAAZA,GAAuBkgC,GACX,QAAZlgC,IAAuBkgC,GAGxB,KAAMG,IAAkCrgC,EAFxCugC,IAAmBC,SAAU,QAASC,SAAU,UAK3C,GAAX5jC,GAAAzQ,KAAAk0C,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjB3jC,EAAAkb,EAI8B0oB,SAJ9B5jC,EAAAob,KASUskB,EAAVxrC,UAAA8sC,2CAGQzxC,MAAKsxC,mBACPtxC,KAAKsxC,iBAAiB1b,QAAU51B,KAAK41B,QACrC51B,KAAKsxC,iBAAiBhK,gBAEtBtnC,KAAKmS,QAAQ6hB,iBAAiB5B,eAAenoB,KAC3CC,EAAAA,KAAK,GACL0Q,EAAAA,UAAU5a,KAAKwY,aACftT,UAAU,WACNrF,EAAKyxC,kBACPzxC,EAAgB,YAAEyrC,qBAOlB6E,EAAVxrC,UAAAitC,iBAAA,SAA2B0C,GACnBt0C,KAAKsxC,mBACPtxC,KAAKsxC,iBAAiBgD,aAAeA,EACrCt0C,KAAKsxC,iBAAiBhK,kBAKlB6I,EAAVxrC,UAAAuvC,gBAAA,SAA0BvoB,EAA4BE,GAelD,MAdsB,UAAlB7rB,KAAK4T,UAA0C,UAAlB5T,KAAK4T,SAC1B,QAANiY,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBApYA7sB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,eACVvC,SAAU,aACVpD,MACE0kB,cAAe,SACfiM,YAAa,yBACbolB,aAAc,6DAhGlBv1C,KAAEm5B,EAAAA,UAeFn5B,KAAE0I,EAAAA,aATF1I,KAAQggC,EAAAA,mBAgBRhgC,KAAEyH,EAAAA,mBAHFzH,KAAEC,EAAAA,SAZFD,KAAQoD,EAAAA,WAhBRpD,KAAQw1C,EAAAA,gBAARx1C,KAAuB2D,EAAAA,eAqMvB3D,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYmuC,QApMZ9wC,KAAQge,EAAAA,eAARvb,aAAAzC,KAqMKsD,EAAAA,aACLtD,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBsuC,2BAjFxBr8B,WAAA5U,KAAGO,EAAAA,MAAHoC,MAAS,wBAmBThB,WAAA3B,KAAGO,EAAAA,MAAHoC,MAAS,wBAYT6uC,YAAAxxC,KAAGO,EAAAA,MAAHoC,MAAS,yBAGT8uC,YAAAzxC,KAAGO,EAAAA,MAAHoC,MAAS,yBAKTi0B,UAAA52B,KAAGO,EAAAA,MAAHoC,MAAS,gBAiBT2yC,eAAAt1C,KAAGO,EAAAA,MAAHoC,MAAS,sBAtLTwuC,mBAkiBE,QAAFiC,GACYh6B,EACA4c,GADAh1B,KAAZoY,mBAAYA,EACApY,KAAZg1B,oBAAYA,EAbVh1B,KAAFy0C,YAAmC,UAGnCz0C,KAAA00C,qBAAyC,EAGzC10C,KAAA20C,QAA2C,GAAIhhC,GAAAA,QAG7C3T,KAAF40C,WAA4C50C,KAAKg1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAphBzF,MA8hBEkb,GAAFztC,UAAA4N,KAAE,SAAKw/B,GAAL,GAAFlyC,GAAAG,IAEQA,MAAKiyC,iBACPxgB,aAAazxB,KAAKiyC,gBAClBjyC,KAAKiyC,eAAiB,MAIxBjyC,KAAK00C,qBAAsB,EAC3B10C,KAAKgyC,eAAiBjgB,WAAW,WAC/BlyB,EAAK40C,YAAc,UACnB50C,EAAKmyC,eAAiB,KAItBnyC,EAAKynC,iBACJyK,IAOLK,EAAFztC,UAAAkO,KAAE,SAAKk/B,GAAL,GAAFlyC,GAAAG,IAEQA,MAAKgyC,iBACPvgB,aAAazxB,KAAKgyC,gBAClBhyC,KAAKgyC,eAAiB,MAGxBhyC,KAAKiyC,eAAiBlgB,WAAW,WAC/BlyB,EAAK40C,YAAc,SACnB50C,EAAKoyC,eAAiB,KAItBpyC,EAAKynC,iBACJyK,IAILK,EAAFztC,UAAA0tC,YAAE,WACE,MAAOryC,MAAK20C,QAAQviB,gBAItBggB,EAAFztC,UAAA2tC,UAAE,WACE,MAA4B,YAArBtyC,KAAKy0C,aAGdrC,EAAFztC,UAAAkwC,gBAAE,WACE70C,KAAK00C,qBAAsB,GAG7BtC,EAAFztC,UAAAmwC,eAAE,SAAexzC,GACb,GAAM2V,GAAU3V,EAAkC,OAElC,YAAZ2V,GAAyBjX,KAAKsyC,aAChCtyC,KAAK20C,QAAQhpC,OAGC,YAAZsL,GAAqC,WAAZA,IAC3BjX,KAAK00C,qBAAsB,IAS/BtC,EAAFztC,UAAAowC,uBAAE,WACM/0C,KAAK00C,qBACP10C,KAAK6S,KAAK,IASdu/B,EAAFztC,UAAA2iC,cAAE,WACEtnC,KAAKoY,mBAAmBxB,+BApI5B5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,wBACE8B,SAAU,mOACVC,QAAF,wVACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEwY,YAAao4B,GAAfC,cACEpxC,2GAKEw2C,cAAJ,wGAxfA5C,iCoDZA,sBAoBApzC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEM,EAAAA,WACAL,EAAAA,aACAyxB,EAAAA,cACAxxB,IAEFK,SAAU+sC,GAAYiC,GAAkBrvC,IACxCU,cAAe0sC,GAAYiC,IAC3B5d,iBAAkB4d,IAClB7qC,WACEwoC,IACCvoC,QAASgpB,EAAAA,sBAAuBC,SAAUC,SAhC/CukB,gCCsBEj1C,KAAFiF,QAAoC,GAAI0O,GAAAA,QAGtC3T,KAAFk1C,kBAA8B,kBAG5Bl1C,KAAFm1C,cAA0B,YAGxBn1C,KAAFo1C,kBAA8B,gBAG5Bp1C,KAAFq1C,eAA2B,aAGzBr1C,KAAFs1C,cAA0B,YAGxBt1C,KAAFu1C,cAAkB,SAACllC,EAAce,EAAkBjM,GAC/C,GAAc,GAAVA,GAA2B,GAAZiM,EAAiB,MAAO,QAAQjM,CAEnDA,GAASwM,KAAKoK,IAAI5W,EAAQ,EAE1B,IAAM+L,GAAab,EAAOe,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAa/L,EAC1BwM,KAAKE,IAAIX,EAAaE,EAAUjM,GAChC+L,EAAaE,GAErB,OAAiDjM,GApDjD,sBAgBAnG,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,8GAhBzBwjC,KA8DaC,IAEXjuC,QAASguC,GACTt0B,OAAQ,GAAI5e,GAAAA,SAAY,GAAI6e,GAAAA,SAAYq0B,KACxCp0B,WAAYs0B,IC9BdC,GAAA,yBApCA,MAAAA,MAuDAC,GAAA,yBAvDA,MAAAA,MAwDaC,GACTpd,EAAiBmd,mBAqFnB,QAAFE,GAAqBr0B,EACCrJ,GADpB,GAAFvY,GAEIC,EAFJC,KAAAC,OAAAA,WAAqBH,GAArB4hB,MAAqBA,EACC5hB,EAAtBuY,mBAAsBA,EArDpBvY,EAAFk2C,WAAuB,EASrBl2C,EAAFm2C,QAAoB,EAkBpBn2C,EAAAo2C,oBAQAp2C,EAAAq2C,eAA0B,EAS1Br2C,EAAAs2C,uBAAkC,EAGhCt2C,EAAFwQ,KAAqD,GAAIkG,GAAAA,aAQrD1W,EAAKu2C,aAAe30B,EAAMxc,QAAQC,UAAU,WAAM,MAAArF,GAAKuY,mBAAmBxB,mBAR9E,MA7DkClS,GAAlCoxC,EAAAh2C,GAQE2L,OAAFC,eACMoqC,EADNnxC,UAAA,iBAAE,WAC0B,MAAO3E,MAAK+1C,gBACtC,SAAc90C,GACZjB,KAAK+1C,WAAapkC,KAAKoK,IAAIhD,EAAAA,qBAAqB9X,GAAQ,GACxDjB,KAAKoY,mBAAmBxB,gDAK1BnL,OAAFC,eACMoqC,EADNnxC,UAAA,cAAE,WACuB,MAAO3E,MAAKg2C,aACnC,SAAW/0C,GACTjB,KAAKg2C,QAAUj9B,EAAAA,qBAAqB9X,GACpCjB,KAAKoY,mBAAmBxB,gDAK1BnL,OAAFC,eACMoqC,EADNnxC,UAAA,gBAAE,WACyB,MAAO3E,MAAKq2C,eACrC,SAAap1C,GACXjB,KAAKq2C,UAAY1kC,KAAKoK,IAAIhD,EAAAA,qBAAqB9X,GAAQ,GACvDjB,KAAKs2C,mEAKP7qC,OAAFC,eACMoqC,EADNnxC,UAAA,uBAAE,WACkC,MAAO3E,MAAKi2C,sBAC9C,SAAoBh1C,GAClBjB,KAAKi2C,kBAAoBh1C,OAAakL,IAAI,SAAAoqC,GAAK,MAAAx9B,GAAAA,qBAAqBw9B,KACpEv2C,KAAKs2C,mEAKP7qC,OAAFC,eACMoqC,EADNnxC,UAAA,oBAAE,WAC8B,MAAO3E,MAAKk2C,mBAC1C,SAAiBj1C,GACfjB,KAAKk2C,cAAgBl4B,EAAAA,sBAAsB/c,oCAM7CwK,OAAFC,eACMoqC,EADNnxC,UAAA,4BAAE,WACsC,MAAO3E,MAAKm2C,2BAClD,SAAyBl1C,GACvBjB,KAAKm2C,sBAAwBn4B,EAAAA,sBAAsB/c,oCAgBrD60C,EAAFnxC,UAAAuP,SAAE,WACElU,KAAKw2C,cAAe,EACpBx2C,KAAKs2C,kCACLt2C,KAAKw5B,oBAGPsc,EAAFnxC,UAAAsD,YAAE,WACEjI,KAAKo2C,aAAarlC,eAIpB+kC,EAAFnxC,UAAA8xC,SAAE,WACE,GAAKz2C,KAAK02C,cAAV,CAEA,GAAMC,GAAoB32C,KAAKmR,SAC/BnR,MAAKmR,YACLnR,KAAK42C,eAAeD,KAItBb,EAAFnxC,UAAAkyC,aAAE,WACE,GAAK72C,KAAK82C,kBAAV,CAEA,GAAMH,GAAoB32C,KAAKmR,SAC/BnR,MAAKmR,YACLnR,KAAK42C,eAAeD,KAItBb,EAAFnxC,UAAAoyC,UAAE,WAEE,GAAK/2C,KAAK82C,kBAAV,CAEA,GAAMH,GAAoB32C,KAAKmR,SAC/BnR,MAAKmR,UAAY,EACjBnR,KAAK42C,eAAeD,KAItBb,EAAFnxC,UAAAqyC,SAAE,WAEE,GAAKh3C,KAAK02C,cAAV,CAEA,GAAMC,GAAoB32C,KAAKmR,SAC/BnR,MAAKmR,UAAYnR,KAAKi3C,mBAAqB,EAC3Cj3C,KAAK42C,eAAeD,KAItBb,EAAFnxC,UAAAmyC,gBAAE,WACE,MAAO92C,MAAKmR,WAAa,GAAsB,GAAjBnR,KAAKoR,UAIrC0kC,EAAFnxC,UAAA+xC,YAAE,WACE,GAAMQ,GAAel3C,KAAKi3C,mBAAqB,CAC/C,OAAOj3C,MAAKmR,UAAY+lC,GAAiC,GAAjBl3C,KAAKoR,UAI/C0kC,EAAFnxC,UAAAsyC,iBAAE,WACE,MAAKj3C,MAAKoR,SAIHO,KAAKC,KAAK5R,KAAKmF,OAASnF,KAAKoR,UAH3B,GAeX0kC,EAAFnxC,UAAAwyC,gBAAE,SAAgB/lC,GAGd,GAAMF,GAAalR,KAAKmR,UAAYnR,KAAKoR,SACnCulC,EAAoB32C,KAAKmR,SAE/BnR,MAAKmR,UAAYQ,KAAKg6B,MAAMz6B,EAAaE,IAAa,EACtDpR,KAAKoR,SAAWA,EAChBpR,KAAK42C,eAAeD,IAOdb,EAAVnxC,UAAA2xC,2CACSt2C,KAAKw2C,eAGLx2C,KAAKoR,WACRpR,KAAKq2C,UAA2C,GAA/Br2C,KAAKo3C,gBAAgBjyC,OAClCnF,KAAKo3C,gBAAgB,GAxNL,IA4NtBp3C,KAAKq3C,0BAA4Br3C,KAAKo3C,gBAAgBhyC,SAES,IAA3DpF,KAAKq3C,0BAA0BznC,QAAQ5P,KAAKoR,WAC9CpR,KAAKq3C,0BAA0BztC,KAAK5J,KAAKoR,UAI3CpR,KAAKq3C,0BAA0B1oC,KAAK,SAACG,EAAGC,GAAM,MAAAD,GAAIC,IAClD/O,KAAKoY,mBAAmBxB,iBAIlBk/B,EAAVnxC,UAAAiyC,eAAA,SAAyBD,GACrB32C,KAAKqQ,KAAK6G,MACRy/B,kBAANA,EACMxlC,UAAWnR,KAAKmR,UAChBC,SAAUpR,KAAKoR,SACfjM,OAAQnF,KAAKmF,yBA3MnBnG,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,eACVqE,SAAU,ugFACVC,QAAF,8xBACE1H,MACFC,MAAA,iBAEAI,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFA7DAk3C,EAAAz2C,kEAsEA8F,SAAAnG,KAAAO,EAAAA,QAGA6R,WAAApS,KAAAO,EAAAA,QASA63C,kBAAAp4C,KAAAO,EAAAA,QASA+3C,eAAAt4C,KAAAO,EAAAA,QASAg4C,uBAAAv4C,KAAQO,EAAAA,QASR8Q,OAAArR,KAAAwY,EAAAA,UAiBAs+B,mCCzIA,sBAiBA92C,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAykB,GACAmoB,GACAuF,IAEF7xC,SAAU0yC,IACVryC,cAAeqyC,IACfvuC,WAAYkuC,QA1Bd+B,KZmCAC,GAAA,WACE,QAAFA,GAAqBv3C,GAAAF,KAArBE,YAAqBA,EApCrB,MAAAu3C,MA4CaC,GACTxzC,EAAWuzC,GAAoB,WAOtBnU,GAA4B,GAAIvxB,GAAAA,eAC3C,6BACCC,WAAY,OAAQC,QAAS0lC,KAoB5BC,GAAgB,iBA0BlB,QAAFrU,GAAqBrjC,EAAiCiS,EACUsqB,EAKHob,GAN3D,GAAFh4C,GAOIC,EAPJC,KAAAC,KAOUE,IAPVF,IAAqBH,GAArBK,YAAqBA,EAAiCL,EAAtDsS,QAAsDA,EACUtS,EAAhE48B,eAAgEA,EAqB9D58B,EAAFi4C,kBAAqB,EAarBj4C,EAAAwpB,OAA2B,EAM3BxpB,EAAAk4C,aAAiC,EAS/Bl4C,EAAF4jC,aAA2B,GAAIltB,GAAAA,aAG/B1W,EAAAm4C,0BAAoD5pC,EAAAA,aAAaC,MAS/DxO,EAAFi7B,KAAwE,cAGtEj7B,EAAF+3C,cAAkB,oBAAoBA,IAjDlC,IAAMK,GAAOJ,GAAYA,EAASK,SAAWL,EAASK,SAAS9U,MAAM,KAAK,GAAK,SAC/EvjC,GAAKs4C,oBAAsB,QAAQF,EAAvC,IAA+Cp4C,EAAK+3C,cAApD,KACI/3C,EAAKi4C,iBAAsC,mBAAnBrb,IA4C5B,MAhEoC/3B,GAApC6+B,EAAAzjC,GA2BE2L,OAAFC,eACM63B,EADN5+B,UAAA,aAAE,WACsB,MAAO3E,MAAKqpB,YAClC,SAAUvN,GACR9b,KAAKqpB,OAAS+uB,GAAMt8B,GAAK,GAGrB9b,KAAK83C,kBACP93C,KAAKq4C,oDAMT5sC,OAAFC,eACM63B,EADN5+B,UAAA,mBAAE,WAC4B,MAAO3E,MAAK+3C,kBACxC,SAAgBj8B,GAAa9b,KAAK+3C,aAAeK,GAAMt8B,GAAK,oCA+B5DynB,EAAF5+B,UAAA2zC,kBAAE,WAEE,OAAQzjC,UAAW,UADL7U,KAAKiB,MAAQ,IAC/B,MAOEsiC,EAAF5+B,UAAA4zC,iBAAE,WACE,GAAkB,WAAdv4C,KAAK86B,KAAmB,CAE1B,OAAQjmB,UAAW,UADL7U,KAAKw4C,YAAc,IACvC,OAIEjV,EAAF5+B,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACSA,MAAK83C,kBAGR93C,KAAKmS,QAAQM,kBAAiB,WAC5B5S,EAAKm4C,0BACDS,EAAAA,UAA2B54C,EAAK2jC,iBAAiBljC,cAAe,iBAC/D2J,KAAK3E,EAAAA,OAAM,SAAG0R,GACb,MAAAA,GAAE0hC,SAAW74C,EAAK2jC,iBAAiBljC,iBACpC4E,UAAU,SAAAw7B,GAAK,MAAA7gC,GAAKsS,QAAQ8I,IAAI,WAAM,MAAApb,GAAKw4C,0BAKtD9U,EAAF5+B,UAAAsD,YAAE,WACEjI,KAAKg4C,0BAA0BjnC,eAIzBwyB,EAAV5+B,UAAA0zC,4BACsB,gBAAdr4C,KAAK86B,MAAwC,WAAd96B,KAAK86B,MACtC96B,KAAKyjC,aAAa93B,MAAM1K,MAAOjB,KAAKiB,wBAjI1CjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACEvC,SAAU,iBACVpD,MACF0I,KAAA,cACMyxC,gBAAN,IACIC,gBAAJ,MACIjpB,uBAAJ,QACIqW,cAAe,OACfvnC,MAAJ,mBACI6xB,kCAAJ,oBAEAzuB,QAAA,SACAoE,SAAA,spBACEC,QAAS;y3JACTrH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,iFApFAI,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,2BAMAvxB,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA2hC,SA0FAC,EAAAlkC,oEAmBAmkC,mBAAQxkC,KAARsV,EAAAA,UAAA3S,MAAA,qBAaA8hC,eAAAzkC,KAAAwY,EAAAA,SAKAsjB,OAAA97B,KAAAO,EAAAA,SAmBAgkC,mCClKA,sBAcAvkC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcC,IACxBK,SAAUmgC,GAAgBxgC,IAC1BU,cAAe8/B,QAjBjBG,KCgCMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqB1jC,GAAAF,KAArBE,YAAqBA,EA3CrB,MAAA0jC,MA6CaC,GACT3/B,EAAW0/B,GAAwB,WAgB1BE,GACT,GAAI/xB,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAAS8xB,KAYTC,GAAmC,27CAoGvC,QAAFC,GAAqB/jC,EACPgkC,EACsCz/B,EAEa0/B,EAEvC3D,GANxB,GAAF3gC,GAQIC,EARJC,KAAAC,KAQUE,IARVF,IAAqBH,GAArBK,YAAqBA,EAE+BL,EAApD4E,UAAoDA,EAEa5E,EAAjEskC,cAAiEA,EAEvCtkC,EAA1B2gC,SAA0BA,EAxD1B3gC,EAAAwpB,OAAmB,EAEnBxpB,EAAAukC,oBAA+B,EAY7BvkC,EAAFwkC,gBAAoD,mBAAvBxkC,EAAKskC,iBAC1BtkC,EAAK2gC,WAAa3gC,EAAK2gC,SAAS8D,iBAYxCzkC,EAAA0kC,UAAsBZ,GAYpB9jC,EAAFi7B,KAAuC,cAoBnCj7B,EAAKukC,mBAAqBF,EAASM,MAAQN,EAASO,QAEhDjE,IACEA,EAASkE,WACX7kC,EAAK6kC,SAAWlE,EAASkE,UAGvBlE,EAASmE,cACX9kC,EAAK8kC,YAAcnE,EAASmE,aAMhC,IAAMC,GACJ,sCAAqC/kC,EAAKukC,mBAAqB,YAAc,IADnF,mBAGIlkC,GAAYI,cAAckF,UAAU2Y,IAAIymB,KAlC5C,MA5CwClgC,GAAxCu/B,EAAAnkC,GAoBE2L,OAAFC,eACMu4B,EADNt/B,UAAA,gBAAE,WACyB,MAAO3E,MAAKukC,eACrC,SAAahX,GACXvtB,KAAKukC,UAAYxrB,EAAAA,qBAAqBwU,GAEjCvtB,KAAKokC,oBAAuBH,EAAmBY,UAAU7L,IAAIh5B,KAAKukC,YACrEvkC,KAAK8kC,oDAMTr5B,OAAFC,eACMu4B,EADNt/B,UAAA,mBAAE,WAEE,MAAO3E,MAAK+kC,cAAgB/kC,KAAK0kC,SAAW,QAE9C,SAAgBzjC,GACdjB,KAAK+kC,aAAehsB,EAAAA,qBAAqB9X,oCAO3CwK,OAAFC,eACMu4B,EADNt/B,UAAA,aAAE,WAEE,MAAqB,gBAAd3E,KAAK86B,KAAyB96B,KAAKqpB,OAAS,OAErD,SAAU2b,GACRhlC,KAAKqpB,OAAS1X,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI,IAAKkH,EAAAA,qBAAqBisB,sCAiC/Dv5B,OAAFC,eAAMu4B,EAANt/B,UAAA,qBAAE,WACE,OAAQ3E,KAAK0kC,SA1KS,IA0KuB,mCAI/Cj5B,OAAFC,eAAMu4B,EAANt/B,UAAA,gBAAE,WACE,GAAMsgC,GAA+B,EAArBjlC,KAAKklC,cAAoBllC,KAAK2kC,WAC9C,OAAO,OAAOM,EAAlB,IAA6BA,mCAI3Bx5B,OAAFC,eAAMu4B,EAANt/B,UAAA,4BAAE,WACE,MAAO,GAAIgN,KAAKwzB,GAAKnlC,KAAKklC,+CAI5Bz5B,OAAFC,eAAMu4B,EAANt/B,UAAA,yBAAE,WACE,MAAkB,gBAAd3E,KAAK86B,KACA96B,KAAKolC,sBAAwB,IAAMplC,KAAKqpB,QAAU,IAIvDrpB,KAAKokC,oBAAoC,kBAAdpkC,KAAK86B,KACC,GAA5B96B,KAAKolC,qBAGP,sCAIT35B,OAAFC,eAAMu4B,EAANt/B,UAAA,0BAAE,WACE,MAAO3E,MAAK2kC,YAAc3kC,KAAK0kC,SAAW,qCAIpCT,EAAVt/B,UAAAmgC,4BACI,GAAIO,GAAWpB,EAAmBoB,QAE7BA,KACHA,EAAWrlC,KAAKyE,UAAU6gC,cAAc,SACxCtlC,KAAKyE,UAAU8gC,KAAKC,YAAYH,GAChCpB,EAAmBoB,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAW1lC,KAAK2lC,oBAAqB,GAGzE1B,EAAmBY,UAAU1mB,IAAIne,KAAK0kC,WAIhCT,EAAVt/B,UAAAghC,6BACI,MAAO3B,IAEF4B,QAAQ,eAAgB,GAAG,IAAO5lC,KAAKolC,sBACvCQ,QAAQ,aAAc,GAAG,GAAM5lC,KAAKolC,sBACpCQ,QAAQ,YAAa,GAAG5lC,KAAK0kC,WApItCT,EAAAY,UAA6B,GAAIgB,MAAalC,KAM9CM,EAAAoB,SAAmD,oBAlCnDrmC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,uBACEvC,SAAU,qBACVpD,MACF0I,KAAA,cACMzI,MAAN,uBACI6xB,kCAAJ,kBACIwV,mBAAJ,WACIC,oBAAJ,WACIrW,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBqW,cAAJ,QAEAnkC,QAAA,SACAoE,SAAA,8sBACEC,QAAS,mkGACTrH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA3GAI,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cALArH,KAAQyD,OAAQhB,aAAhBzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,2BA0KAvxB,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAQZ,MAAvBmiC,SAGAG,EAAA5kC,uEArCAy7B,OAAA97B,KAAAO,EAAAA,QAYA0B,QAAAjC,KAAAO,EAAAA,SAYA0kC,uCA4HEE,EAAF3D,qCAAE,OAGF3gC,GAAAi7B,KAAA,gBAHAj7B,EACA,6BAOAb,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,oBA1BA+C,KAAA,cACA4zB,KAAA,gBACAr8B,MAAA,mCACM6xB,kCAAN,kBACIwV,mBAAJ,WACIC,oBAAJ,YAEAlkC,QAAA,SACAoE,SAAA,8sBACAC,QAAA,mkGACArH,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAqnC,EAAAlf,eAAA,WAAA,QACA/nB,KAAA0I,EAAAA,0MArRA1I,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAmiC,SAwRAmC,GAEAhC,ICjSAiC,GAAA,yBAPA,sBAaAlnC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBD,EAAAA,cAC3BM,SACE6gC,GACAgC,GACAljC,IAEFU,cACEwgC,GACAgC,QAtBJC,KCmDInG,GAAe,EAONoG,IACX3+B,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAmwB,MAC9BjG,OAAO,GAITkG,GAAA,WACE,QAAFA,GAEW/X,EAEArtB,GAFAjB,KAAXsuB,OAAWA,EAEAtuB,KAAXiB,MAAWA,EAtEX,MAAAolC,MA4EAC,GAAA,yBA5EA,MAAAA,MA6EaC,GACT3mC,EAAc0mC,mBAiIhB,QAAFF,GAAsBI,GAApB,GAAF3mC,GACIC,EADJC,KAAAC,OAAAA,WAAsBH,GAAtB2mC,gBAAsBA,EA9GtB3mC,EAAAwpB,OAAwB,KAGxBxpB,EAAA4mC,MAA0B,mBAAmB1G,KAG7ClgC,EAAA6mC,UAA6C,KAG7C7mC,EAAA8mC,gBAAoC,EAGpC9mC,EAAA+mC,eAA+C,QAG/C/mC,EAAAgnC,WAA+B,EAG/BhnC,EAAA+gC,WAA+B,EAG7B/gC,EAAFguB,8BAAwD,aAMtDhuB,EAAF2sB,UAAyB,aAOvB3sB,EAAF4W,OAA4D,GAAIF,GAAAA,eAnIhE,MA6FmC7R,GAAnC0hC,EAAAtmC,GA6CE2L,OAAFC,eACM06B,EADNzhC,UAAA,YAAE,WACqB,MAAO3E,MAAKymC,WACjC,SAASxlC,GACPjB,KAAKymC,MAAQxlC,EACbjB,KAAK8mC,2DAIPr7B,OAAFC,eACM06B,EADNzhC,UAAA,qBAAE,WAEE,MAAO3E,MAAK4mC,oBAEd,SAAkB9qB,GAChB9b,KAAK4mC,eAAuB,WAAN9qB,EAAiB,SAAW,QAClD9b,KAAK+mC,uDASPt7B,OAAFC,eACM06B,EADNzhC,UAAA,aAAE,WACmB,MAAO3E,MAAKqpB,YAC/B,SAAU2b,GACJhlC,KAAKqpB,SAAW2b,IAElBhlC,KAAKqpB,OAAS2b,EAEdhlC,KAAKgnC,gCACLhnC,KAAKinC,8DAITb,EAAFzhC,UAAAsiC,0BAAE,WACMjnC,KAAK0mC,YAAc1mC,KAAK0mC,UAAUrG,UACpCrgC,KAAK0mC,UAAUrG,SAAU,IAQ7B50B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WACiB,MAAO3E,MAAK0mC,eAC7B,SAAa5hB,GACX9kB,KAAK0mC,UAAY5hB,EACjB9kB,KAAKiB,MAAQ6jB,EAAWA,EAAS7jB,MAAQ,KACzCjB,KAAKinC,6DAIPx7B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY7oB,EAAAA,sBAAsB/c,GACvCjB,KAAK+mC,uDAIPt7B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,GACvCjB,KAAK+mC,uDAWPX,EAAFzhC,UAAAqD,mBAAE,WAIEhI,KAAK2mC,gBAAiB,GAOxBP,EAAFzhC,UAAAuiC,OAAE,WACMlnC,KAAKwsB,WACPxsB,KAAKwsB,aAID4Z,EAAVzhC,UAAAmiC,6CACQ9mC,MAAKmnC,SACPnnC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GACnBA,EAAM9kB,KAAOziB,EAAKyiB,QAMhB8jB,EAAVzhC,UAAAqiC,oDAEUK,EAAuC,OAAnBrnC,KAAK0mC,WAAsB1mC,KAAK0mC,UAAUzlC,QAAUjB,KAAKqpB,MAE/ErpB,MAAKmnC,UAAYE,IACnBrnC,KAAK0mC,UAAY,KACjB1mC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GACnBA,EAAM/G,QAAUxgC,EAAKoB,QAAUmmC,EAAMnmC,MACjCmmC,EAAM/G,UACRxgC,EAAK6mC,UAAYU,OAOzBhB,EAAFzhC,UAAAqnB,iBAAE,WACMhsB,KAAK2mC,gBACP3mC,KAAKyW,OAAOS,KAAK,GAAImvB,IAAermC,KAAc,UAAGA,KAAKqpB,UAI9D+c,EAAFzhC,UAAAoiC,oBAAE,WACM/mC,KAAKmnC,SACPnnC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GAAS,MAAAA,GAAME,mBAQxClB,EAAFzhC,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKiB,MAAQA,EACbjB,KAAKwmC,gBAAgB5vB,gBAQvBwvB,EAAFzhC,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAK6tB,8BAAgCe,GAQvCwX,EAAFzhC,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKwsB,UAAYoC,GAOnBwX,EAAFzhC,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,EAChB/uB,KAAKwmC,gBAAgB5vB,+BA3NzB5X,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACVvC,SAAU,gBACV2F,WAAY4+B,IACZ3nC,MACE0I,KAAQ,aACRzI,MAAS,mBAEXoD,QAAS,oDA5EX7C,KAAEE,EAAAA,uCAoHFuX,SAAAzX,KAAGwY,EAAAA,SAGH2vB,UAAAnoC,KAAGoJ,EAAAA,gBAAHzG,MAAmBsU,EAAAA,WAAW,WAAM,MAAAsxB,OAAmBC,aAAa,MAIpEllB,OAAAtjB,KAAGO,EAAAA,QAQHqnB,gBAAA5nB,KAAGO,EAAAA,QAeH0B,QAAAjC,KAAGO,EAAAA,QAsBHulB,WAAA9lB,KAAGO,EAAAA,QASHoB,WAAA3B,KAAGO,EAAAA,QAQHojC,WAAA3jC,KAAGO,EAAAA,SAxMH6mC,GA6FmCG,IAuNnCkB,GAAA,WAME,QAAFA,GAAqBvnC,GAAAF,KAArBE,YAAqBA,EA1TrB,MAAAunC,MA8TaC,GAELxjC,EAAWvE,EAAmBD,EAAc+nC,KAAsB,yBAwJxE,QAAFF,GAA0BI,EACZrjC,EACQkiC,EACArmC,EACAynC,EAC0CnL,GAL9D,GAAF58B,GAMIC,EANJC,KAAAC,KAMUsE,IANVtE,WAEsBH,GAAtB2mC,gBAAsBA,EACA3mC,EAAtBM,cAAsBA,EACAN,EAAtB+nC,iBAAsBA,EAC0C/nC,EAAhE48B,eAAgEA,EA/HhE58B,EAAA8gC,UAA8B,gBAAeZ,GAG3ClgC,EAAFihB,GAAwBjhB,EAAK8gC,UA6F3B9gC,EAAF4W,OAA4D,GAAIF,GAAAA,aAShE1W,EAAAghC,UAA8B,EAS9BhhC,EAAAwpB,OAAwB,KAGxBxpB,EAAAgoC,+BAAuD,aAenDhoC,EAAK8nC,WAAaA,EAElB9nC,EAAKgoC,+BACHD,EAAiBE,OAAO,SAAChnB,EAAYwB,GAC/BxB,IAAOjhB,EAAKihB,IAAMwB,IAASziB,EAAKyiB,OAClCziB,EAAKwgC,SAAU,OAjBzB,MA3HoC37B,GAApC6iC,EAAAznC,GAqBE2L,OAAFC,eACM67B,EADN5iC,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACV,GAAM8mC,GAAkB/pB,EAAAA,sBAAsB/c,EAC1CjB,MAAK6gC,WAAakH,IACpB/nC,KAAK6gC,SAAWkH,EACZA,GAAmB/nC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW1mC,QAAUjB,KAAKiB,MACvEjB,KAAK2nC,WAAW7iB,SAAW9kB,MACjB+nC,GAAmB/nC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW1mC,QAAUjB,KAAKiB,QAI/EjB,KAAK2nC,WAAW7iB,SAAW,MAGzBijB,GAEF/nC,KAAK4nC,iBAAiBI,OAAOhoC,KAAK8gB,GAAI9gB,KAAKsiB,MAE7CtiB,KAAKwmC,gBAAgB5vB,iDAKzBnL,OAAFC,eACM67B,EADN5iC,UAAA,aAAE,WACmB,MAAO3E,MAAKqpB,YAC/B,SAAUpoB,GACJjB,KAAKqpB,SAAWpoB,IAClBjB,KAAKqpB,OAASpoB,EACU,OAApBjB,KAAK2nC,aACF3nC,KAAKqgC,UAERrgC,KAAKqgC,QAAUrgC,KAAK2nC,WAAW1mC,QAAUA,GAEvCjB,KAAKqgC,UACPrgC,KAAK2nC,WAAW7iB,SAAW9kB,yCAOnCyL,OAAFC,eACM67B,EADN5iC,UAAA,qBAAE,WAEE,MAAO3E,MAAK4mC,gBAAmB5mC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW/gB,eAAkB,aAEtF,SAAkB3lB,GAChBjB,KAAK4mC,eAAiB3lC,mCAKxBwK,OAAFC,eACM67B,EADN5iC,UAAA,gBAAE,WAEE,MAAO3E,MAAK6mC,WAAkC,OAApB7mC,KAAK2nC,YAAuB3nC,KAAK2nC,WAAWhnC,cAExE,SAAaM,GACX,GAAMgnC,GAAmBjqB,EAAAA,sBAAsB/c,EAC3CjB,MAAK6mC,YAAcoB,IACrBjoC,KAAK6mC,UAAYoB,EACjBjoC,KAAKwmC,gBAAgB5vB,iDAKzBnL,OAAFC,eACM67B,EADN5iC,UAAA,gBAAE,WAEE,MAAO3E,MAAK4gC,WAAc5gC,KAAK2nC,YAAc3nC,KAAK2nC,WAAWhF,cAE/D,SAAa1hC,GACXjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,oCAczCwK,OAAFC,eAAM67B,EAAN5iC,UAAA,eAAE,WAAwB,OAAU3E,KAAK8gB,IAAM9gB,KAAK2gC,WAApD,0CAyCE4G,EAAF5iC,UAAAkT,MAAE,WACE7X,KAAKG,cAAci7B,SAASp7B,KAAKmhC,cAAe,aAQlDoG,EAAF5iC,UAAA2iC,cAAE,WAGEtnC,KAAKwmC,gBAAgB5vB,gBAGvB2wB,EAAF5iC,UAAAuP,SAAE,WACMlU,KAAK2nC,aAEP3nC,KAAKqgC,QAAUrgC,KAAK2nC,WAAW1mC,QAAUjB,KAAKqpB,OAE9CrpB,KAAKsiB,KAAOtiB,KAAK2nC,WAAWrlB,OAIhCilB,EAAF5iC,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACIA,MAAKG,cACFW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAA+7B,IACJA,GAAephC,EAAK8nC,YACvB9nC,EAAK8nC,WAAWT,YAKxBK,EAAF5iC,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,aACvCF,KAAK6nC,kCAICN,EAAV5iC,UAAAqnB,4BACIhsB,KAAKyW,OAAOS,KAAK,GAAImvB,IAAermC,KAAMA,KAAKqpB,UAGjDke,EAAF5iC,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAGpC4mC,EAAF5iC,UAAAy8B,cAAE,SAAc9/B,GAQZA,EAAMo5B,mBAOR6M,EAAF5iC,UAAAyjC,eAAE,SAAe9mC,GAIbA,EAAMo5B,iBAEN,IAAM2N,GAAoBroC,KAAK2nC,YAAc3nC,KAAKiB,QAAUjB,KAAK2nC,WAAW1mC,KAC5EjB,MAAKqgC,SAAU,EACfrgC,KAAKgsB,mBAEDhsB,KAAK2nC,aACP3nC,KAAK2nC,WAAW9Z,8BAA8B7tB,KAAKiB,OACnDjB,KAAK2nC,WAAWT,SACZmB,GACFroC,KAAK2nC,WAAW3b,oCArPxBhtB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,++BACVC,QAAF,o9DACErE,QAAF,QAAA,gBAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,iBACEpD,MACFC,MAAA,mBACM6pC,4BAAN,UACIC,6BAAJ,WACIjY,kCAAJ,sCACIiS,kBAAJ,OACIiG,YAAJ,sDAMA3pC,gBAAAC,EAAAA,wBAAAC,4GAiIAC,KAAsCE,EAAAA,oBArctCF,KAAE2D,EAAAA,eAJF3D,KAAEypC,EAAAA,4BAPFzpC,KAAQyD,OAARhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,4BAqdAgX,EAAAloC,0DA5HAkV,YAAAvV,KAAAO,EAAAA,MAAAoC,MAAA,gBAGA6S,iBAAAxV,KAAAO,EAAAA,MAAAoC,MAAA,qBAGA+mC,kBAAG1pC,KAAHO,EAAAA,MAAAoC,MAAA,sBAGA0+B,UAAArhC,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAAO,EAAAA,QAGAqnB,gBAAG5nB,KAAHO,EAAAA,QAwBAoB,WAAA3B,KAAAO,EAAAA,QAkBAojC,WAAA3jC,KAAAO,EAAAA,QAUAkX,SAAAzX,KAAAwY,EAAAA,SAaA2pB,gBAAAniC,KAAQsV,EAAAA,UAAR3S,MAAA,YAqCA4lC,mCCtdA,sBAcAvoC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCK,SAAUgjC,GAAemB,GAAgBxkC,IACzCU,cAAe2iC,GAAemB,QAjBhCoB,KCiBa/M,IAIXC,gBAAiBlnB,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsBjC,EAAAA,OAC1BkC,UAAa,OACbjC,WAAc,aAEhBgC,EAAAA,MAAM,OAAQjC,EAAAA,OAEZi2B,aAAc,OACdh2B,WAAc,YAEhBmC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CZoBH6zB,GACT,GAAI92B,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAAS62B,oBAqBb,QAAFtK,GACcpmB,EAC6C2wB,EACrDzkC,EACAs6B,EACAC,GALJ,GAAFh/B,GAMIC,EANJC,KAAAC,KAMUsE,EAAYs6B,EAAkBC,IANxC7+B,WACcH,GAAduY,mBAAcA,EAC6CvY,EAA3DkpC,WAA2DA,IArD3D,MAkDsCrkC,GAAtC85B,EAAA1+B,GAUE0+B,EAAF75B,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK+oC,WAAW3K,sBAAsBl5B,UAAU,WAC9CrF,EAAKuY,mBAAmBxB,iCAxB9B5X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,qBACE8B,SAAU,4BACVzH,MACFC,MAAA,qBACMqgC,yBAAN,kCACIC,0BAAJ,oCAEAlgC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JAzDAI,KAAE0I,EAAAA,aAgEF1I,KAAuEggC,EAAAA,mBA3DvEhgC,KAAEC,EAAAA,UAMFu/B,oEAiMAx+B,MAAAE,YAAAA;oBAAEF,KAAF65B,kBAAAA,EAAsB75B,KAAtBG,cAAAA,EACsBH,KAAtBuE,UAAAA,EACsBvE,KAAtBmS,QAAAA,EACsBnS,KAAtB85B,KAAAA,EACsB95B,KAAtB+5B,qCAAA,sDAnGA/5B,KAAAg6B,MAAA,OAaAh6B,KAAAi6B,eAAA,EASAj6B,KAAAk6B,YAAA,0FAwBE,GAAF3jB,GAAAA,cAAA,6FA0CEvW,KAAFm6B,aAAAj1B,UAAA,SAAAk1B,GA6GAA,GA/FAv6B,EAAsBi6B,OACtBj6B,EAAAk6B,qCAAAl6B,EAAAi6B,KAAA,eAEUj6B,EAAKw6B,qBAAfx6B,EAAAy6B,YACAz6B,EAAA06B,cAKA16B,EAAA26B,+OAUA36B,EAAA46B,QACAn5B,EAAiCo5B,wBAlDjC,MAwDAjvB,QAAOC,eAAPivB,EAAAh2B,UAAA,YA7HA5D,uDAEAE,EAAA,QAAAA,EAAA,MAAA,2BAEAjB,KAAAyV,UAAAxU,EACQjB,KAAK46B,kBAAkB1jB,SAG/B/V,YAAA,EACAC,cAAA,8CAIAL,+DAEAf,KAAA66B,aAAAlvB,QAEAxK,YAAA,EACAC,cAAA,sDAIAL,uHAEEK,cAAF,mDAIAL,iHAEEK,cAAF,uDAkBAL,mGAEAI,YAAA,EACAC,cAAA,qDAGAL,6JAEAI,YAAA,EAIAC,cAAA,uDAGAL,mGAEAI,YAAA,EACAC,cAAA,qDAGAL,kJAEAI,YAAA,EAIAC,cAAA,6DAAAL,eAYA,MAAAf,MAAAo6B,QAAA,SAAAp6B,KAAA86B,MAEA35B,YAAA,EACAC,cAAA,iEAyCApB,KAAAs6B,WAAAS,+BAAAtpB,KAAA,SAAAupB,2JAmBA,GAAAC,GAAAj7B,KAAA85B,MAAA95B,KAAA85B,KAAAoB,8DAEAl7B,KAAA+5B,+CAAAoB,aAEAn7B,KAAAG,cAAAi7B,SAAAp7B,KAAA+5B,qCAAA/5B,KAAAq7B,YAGAr7B,KAAAE,YAAAI,cAAAypB,QAEA/pB,KAAO+5B,qCAAP,KACA/5B,KAAAq7B,WAAA,+HAMAr7B,KAAAs6B,WAAAgB,QAAAt7B,KAAAq6B,6KAeAr6B,KAAAs6B,WAAAiB,WAGA9vB,OAAAC,eAAAivB,EAAAh2B,UAAA,qHASEvD,cAAF,2JAqCA,YAdA,KAAAo6B,IAAAA,GAAAx7B,KAAAo6B,YAAA,KAAAqB,IAAAA,EAAA,WAASz7B,KAAT07B,QAAAF,EAAAA,GAGQx7B,KAARqzB,gBAAArzB,KAAA27B,kBAAA,OAAA,eAEQ37B,KAARq7B,WAAAI,IAGAz7B,KAAAqzB,gBAAA,OAAArzB,KAAAw6B,iBAEMx6B,KAAKs6B,aACXt6B,KAAAs6B,WAAAgB,QAAAt7B,KAAAq6B,qBAGA,GAAA9oB,SAAqB,SAArBC,GACA3R,EAAAs6B,aAAAlwB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,SAAAywB,GAAA,MAAAnkB,GAAAmkB,EAAA,OAAA,+JAWA,IAAA1e,EAAArH,QAAA,SAAA,SAAAyH,GACA,SAAAJ,GAAuC,IAAvCI,EAAAzH,QAAA,UAEQ5P,KAARm6B,aAAAjjB,KAA+BlX,KAA/B07B,UAGAjwB,OAAAC,eAAAivB,EAAAh2B,UAAA,UACA5D,sGAGAI,YAAA,EACAC,cAAA,mBAAApC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,kCA3RA8B,SAAA,0EACEsR,YAAFqkB,GAAAC,iBACEr9B,MACFC,MAAA,aACAq9B,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI77B,SAAJ,MAEA1B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIA+7B,EAAA5T,eAAA,WAAA,QACA/nB,KAAA0I,EAAAA,+EAlGA1I,KAAEC,EAAAA,SAhBFD,SAA8CqD,GAA9CZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAIAs0B,EAAAt7B,gBAkBAuU,WAAA5U,KAAAO,EAAAA,QAsMAu7B,OAAA97B,KAAAO,EAAAA,iEAjGA46B,eAAAn7B,KAAAwY,EAAAA,SAaA6kB,gBAAAr9B,KAAAwY,EAAAA,OAAA7V,MAAA,YASA26B,cAAAt9B,KAAAwY,EAAAA,SAMA+kB,gBAAAv9B,KAAAwY,EAAAA,OAAA7V,MAAA,YAeA66B,cAAAx9B,KAAAwY,EAAAA,SAKAojB,oBAAA57B,KAAAwY,EAAAA,OAAA7V,MAAA,qBAMAy4B,SAAAp7B,KAAAO,EAAAA,SAeAo7B,qFA6RA36B,KAAAqkB,SAAAA,EAIcrkB,KAAdmS,QAAAA,EAJEnS,KAAFoY,mBAAAA,EAAkCpY,KAAlCy8B,eAAAA,EAKiEz8B,KAAjE08B,cAAA,GAAAnmB,GAAAA,aAxCEvW,KAAFwY,WAAA,GAAA7E,GAAAA,QAgBA3T,KAAA28B,gBAAA,GAAAhpB,GAAAA,6FAUAwC,GAEAA,EAAAM,OAAAxM,KAAA2Q,EAAAA,UAAA5a,KAAAwY,aAAAtT,UAAA,4DAkBAlF,KAAA48B,UAAAC,EAvFA,MAyFApxB,QAAAC,eAAAoxB,EAAAn4B,UAAA,SAGI5D,mEAxFJ0K,OAAAC,eAAAoxB,EAAAn4B,UAAA,wEAGA8G,OAAAC,eAAAoxB,EAAAn4B,UAAA,6IAYA8G,OAAAC,eAAAoxB,EAAAn4B,UAAA,+IAQA3E,KAAA+8B,mBAGA7D,8FAKE93B,cAAF,IAEAqK,OAAAC,eAAAoxB,EAAAn4B,UAAA,oFAmCEvD,cAAF,IAEA07B,EAAAn4B,UAAAqD,8BAqBA,GAAAnI,GAAAG,6FAAAH,EAAAm9B,SAAA5yB,QAAA,SAAA6yB,GAAAp9B,EAAAq9B,mBAAAD,GACAp9B,EAAkBs9B,qBAAlBF,GACAp9B,EAAAu9B,iBAAAH,OAGAp9B,EAAAm9B,SAAA73B,QACQtF,EAAKw9B,cAAbx9B,EAAiCy9B,SACzBz9B,EAAKw9B,cAAbx9B,EAAA09B,QACA19B,EAAA29B,wBAGA39B,EAAAuY,mBAAAxB,iBAEA5W,KAAA28B,gBAAA1yB,KAAAwzB,EAAAA,aAAA,IAGA7iB,EAAAA,UAAW5a,KAAXwY,aAA6BtT,UAA7B,WAAA,MAAArF,GAAA29B,2BAOAV,EAAAn4B,UAAAsD,uBAEAjI,KAAA28B,gBAAA1oB,+EAOE,kFAKA,iEAEF6oB,EAAAn4B,UAAA+4B,qBAEA,GAAA79B,GAAAG,uCAAAA,KAAAmS,QAMGM,kBANH,WAAA,MAAA5S,GAAA88B,gBAAAhxB,yMAcA,iBAAArK,EAAA2V,SAAA,mBACoBpX,EADpB48B,gBAIA58B,EAAcwkB,SAAd/jB,cAAAkF,UAAA2Y,IAAA,mDAGMte,EAANuY,mBAAAxB,iBAEA,SAAAqmB,EAAAnC,MAEMmC,EAAN9C,aAAAlwB,KAAA2Q,EAAAA,UAAA5a,KAAAg9B,SAAA/3B,UAAAC,UAAA,WACA,MAAArF,GAAA89B,mBAAAV,EAAA7C,sEAeA6C,EAAArC,kBAAA3wB,KAAA2Q,EAAAA,UAAA5a,KAAAg9B,SAAA/3B,UAAAC,UAAA,WACArF,EAAAsS,QAAA6hB,iBAAA5B,eAAAnoB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,6KAWAA,UAAA,qCACArF,EAAAuY,mBAAAxB,8HAWQ5W,KAAKqkB,SAAb/jB,cAAAkF,UAAA0Y,OAAA,mDAQU,sGACoB,MAA9Bre,EAAsB09B,gBAIZ19B,EAAM09B,KAAhBN,IAGA,MAAAp9B,EAAAy9B,QACAM,GAAA,SACA/9B,EAAAy9B,OAAAL,KAGAj9B,KAAA69B,OAAA79B,KAAA89B,MAAA,KAEA99B,KAAAmW,MAAA,QAAAnW,KAAAmW,KAAAlV,OACAjB,KAAA89B,MAAA99B,KAAAu9B,KAEQv9B,KAAR69B,OAAsB79B,KAAtBs9B,SAIMt9B,KAAK89B,MAAQ99B,KAAKs9B,OAClBt9B,KAAK69B,OAAS79B,KAAKu9B,6BAQf,8KAKVv9B,KAAA08B,cAAAxlB,iCAGA4lB,EAAAn4B,UAAAo5B,6BAEA,GAAAl+B,GAAAG,6BAAAsF,OAAA,SAAA23B,GAAA,MAAAA,KAAAA,EAAAe,cAAAn+B,EAAAo+B,iBAAAhB,KAAA7yB,QAAA,SAAA6yB,GAAA,MAAA,GAAAxC,WAKAqC,EAAAn4B,UAAAu5B,8BAEA,MAAAl+B,MAAAq9B,cAAAr9B,KAAAs9B,SAAoBt9B,KAApBi+B,iBAAAj+B,KAAAs9B,uGAKU,SAAVL,8EAIU,SAAVA,8HAgBQ,GAAR,QAAYj9B,KAAK89B,MAAjBhD,8BAGa,IAAb,QAAA96B,KAAsB89B,MAAtBhD,KAAA,CAEQ,GAAI7nB,GAAQjT,KAApB89B,MAAAK,MACAnrB,IAAAC,EAAA8kB,GAAqB9kB,EAErB,GAAAjT,KAAA69B,QAAA79B,KAAA69B,OAAAzD,OACA,GAAA,QAAQp6B,KAAK69B,OAAb/C,KACA/C,GAAA/3B,KAAA69B,OAAAM,WAGa,IAAb,QAAAn+B,KAAA69B,OAAA/C,KAAA,CAEQ,GAAR7nB,GAAAjT,KAAA69B,OAAAM,MACApG,IAAA9kB,EAAAD,GAAAC,4HAcQjT,KAARmS,QAAqB8I,IAArB,WAAA,MAA8Cpb,GAA9Cu+B,sBAAAzyB,KAAA9L,EAAAw+B,oCAKAr/B,KAAUgH,EAAAA,UAAVrE,OAAAwC,SAAA,uBACAvC,SAAA,09EA7UApD,MACAC,MAAA,uBACA6/B,iDAAA,qBAEEz/B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAk+B,EAAA/V,eAAA,WAAA,QACA/nB,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAAsD,EAAAA,aACAtD,KAAA0I,EAAAA,aACA1I,KAAAC,EAAAA,sLA9XA69B,EAAAz9B,gBAMA29B,WAAAh+B,KAAAoJ,EAAAA,gBAAAzG,MAAAg5B,MAXA9kB,WAAA7W,KAAAu/B,EAAAA,aAAA58B,MAAA68B,MAsdAC,eAAAz/B,KAAAsV,EAAAA,UAAA3S,MAAA68B,MACAE,WAAA1/B,KAAAO,EAAAA,sEAjFAu9B,oBChXE,QAAF6B,GACMvoB,EAC+CwgB,EAC/CtyB,EACAs6B,EACAC,GACN,MAAI/+B,GAAJC,KAAAC,KAAUoW,EAAmBwgB,EAAWtyB,EAAYs6B,EAAkBC,IAAtE7+B,KA3BA,MAoBuC0E,GAAvCi6B,EAAA7+B,kBAZAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,4BACVzH,MACFC,MAAA,yCACMqgC,yBAAN,kCACIC,0BAAJ,oCAEAlgC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JA1BAI,KAAE0I,EAAAA,aAiCF1I,KAAgEggC,EAAAA,mBAxBhEhgC,KAAEC,EAAAA,UACF0/B,OAoBAM,GAAA,SAAAn/B,gBAqCA,GAAAD,GAAA,OAAAC,GAAAA,EAAAoM,MAAAlM,KAAA4M,YAAA5M,IAcA,+CATAH,EAAAq/B,gBAAA,EASAr/B,EAZA,MAvCA6E,GAAAu6B,EAAAn/B,wDAuCAiB,6HAEEK,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADApC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,oCA9CA8B,SAAA,0EACEsR,YAAFqkB,GAAAC,iBACEr9B,MACFC,MAAA,yBACA8B,SAAA,KACAu7B,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI+C,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEAxgC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAGAqgC,EAAA5/B,gBACAigC,kBAAAtgC,KAAAO,EAAAA,QACAggC,cAAAvgC,KAAAO,EAAAA,yCAGA0/B,GASAtE,IASA6E,GAAA,SAAA1/B,+DAmBA,cACyC0/B,EAAzC/9B,4jFAbAjD,MACAC,MAAA,6CACA6/B,iDAAA,qBAEEz/B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAGA4gC,EAAIngC,gBACJ29B,WAAGh+B,KAAHoJ,EAAAA,gBAAAzG,MAAAs9B,MACAppB,WAAA7W,KAAAu/B,EAAAA,aAAA58B,MAAAg9B,OAEAa,OC7GAC,GAAA,yBAPA,sBAgBAzgC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACA28B,EAAAA,gBACAC,EAAAA,gBAEFv8B,SACEL,GACA43B,GACAmC,GACA0B,GACAS,GACAO,GACAb,IAEFl7B,cACEk3B,GACAmC,GACA0B,GACAS,GACAO,GACAb,QAtCJc,KCmBaG,GACX,GAAI7tB,GAAAA,eAA6C,oCAC/CC,WAAY,OACZC,QAAS,WAAM,OAAE4tB,oBAAoB,EAAOC,kBAAkB,MC2B9DC,GAAe,EAENC,IACXx4B,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAiqB,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEW9R,EAEA+R,GAFArgC,KAAXsuB,OAAWA,EAEAtuB,KAAXqgC,QAAWA,EA/DX,MAAAD,MAoEAE,GAAA,WACE,QAAFA,GAAqBpgC,GAAAF,KAArBE,YAAqBA,EArErB,MAAAogC,MAuEaC,GAML7gC,EAAcwE,EAAWvE,EAAmBC,EAAc0gC,KAAsB,0BAyGtF,QAAFJ,GAAc57B,EAKAC,EACQpE,EACAiY,EACe7X,EACf4R,EAEGquB,EACuC/D,EAC9BtmB,GAbhC,GAAFtW,GAcIC,EAdJC,KAAAC,KAcUsE,IAdVtE,WAMsBH,GAAtBM,cAAsBA,EACAN,EAAtBuY,mBAAsBA,EAEAvY,EAAtBsS,QAAsBA,EAEGtS,EAAzB2gC,SAAyBA,EACuC3gC,EAAhE48B,eAAgEA,EAC9B58B,EAAlCsW,KAAkCA,EA5FlCtW,EAAA4gC,SAAqB,SAACC,KACtB7gC,EAAA2sB,UAAsB,aAEtB3sB,EAAA8gC,UAA8B,uBAAsBZ,GACpDlgC,EAAA+gC,WAA+B,EAC/B/gC,EAAAghC,UAA8B,EAG9BhhC,EAAAihC,WAAsB,EAkBpBjhC,EAAFyiB,KAAiC,KAG/BziB,EAAFihB,GAAwBjhB,EAAK8gC,UAG3B9gC,EAAF+mB,cAA+C,QAK7C/mB,EAAF0U,UAAkD,KAGhD1U,EAAF2U,eAA4D,KAe1D3U,EAAF4W,OACM,GAAIF,GAAAA,aAOR1W,EAAFkhC,aAAwD,GAAIxqB,GAAAA,aAQ1D1W,EAAFmhC,WAAsD,GAAIzqB,GAAAA,aAuBtD1W,EAAKU,SAAWC,SAASD,IAAa,IAjB1C,MAhFoCmE,GAApCw7B,EAAApgC,GA8CE2L,OAAFC,eACMw0B,EADNv7B,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAASjB,KAAK4gC,UAAY5iB,EAAAA,sBAAsB/c,oCAG7DwK,OAAFC,eACMw0B,EADNv7B,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACVjB,KAAK6gC,SAAW7iB,EAAAA,sBAAsB/c,GACtCjB,KAAKoY,mBAAmBxB,gDAsB1BnL,OAAFC,eAAMw0B,EAANv7B,UAAA,eAAE,WAAwB,OAAU3E,KAAK8gB,IAAM9gB,KAAK2gC,WAApD,0CAuBET,EAAFv7B,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKG,cACFW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAA+7B,GACJA,GAMH1vB,QAAQC,UAAUC,KAAK,WAAM,MAAA5R,GAAK2sB,iBAK1C0T,EAAFv7B,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCggC,EAAFv7B,UAAAu8B,eAAE,SAAe5/B,GAcb,GAVAA,EAAMo5B,kBAED16B,KAAK8gC,WACR9gC,KAAK+gC,aAAa7pB,OAOhBlX,KAAK8gC,WAAa9gC,KAAKwgC,SAASX,mBAElC,YADA7/B,KAAKmhC,cAAc7gC,cAAc+/B,QAAUrgC,KAAKqgC,QAKlDrgC,MAAKqgC,QAAUrgC,KAAKmhC,cAAc7gC,cAAc+/B,QAIhDrgC,KAAKgsB,oBAIPkU,EAAFv7B,UAAAy8B,cAAE,SAAc9/B,GAQZA,EAAMo5B,mBAIRwF,EAAFv7B,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKqgC,UAAYp/B,GAInBi/B,EAAFv7B,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAKygC,SAAW7R,GAIlBsR,EAAFv7B,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKwsB,UAAYoC,GAInBsR,EAAFv7B,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,EAChB/uB,KAAKoY,mBAAmBxB,gBAI1BspB,EAAFv7B,UAAAkT,MAAE,WACE7X,KAAKG,cAAci7B,SAASp7B,KAAKmhC,cAAe,aAIlDjB,EAAFv7B,UAAA08B,OAAE,WACErhC,KAAKqgC,SAAWrgC,KAAKqgC,QACrBrgC,KAAKygC,SAASzgC,KAAKqgC,UAMbH,EAAVv7B,UAAAqnB,4BACIhsB,KAAKygC,SAASzgC,KAAKqgC,SACnBrgC,KAAKyW,OAAOS,KAAK,GAAIkpB,IAAqBpgC,KAAMA,KAAKqgC,WAI/CH,EAAVv7B,UAAA28B,mBAAA,SAA6BC,GACzB,GAAIhT,GAAcgT,EAAWvhC,KAAKwhC,eAAkB,GAOpD,OAJIxhC,MAAKyhC,mBACPlT,GAAc,KAGT5c,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI0c,EAAY,OAG1C2R,EAAFv7B,UAAA+8B,aAAE,WACE,IAAK1hC,KAAKW,WAAaX,KAAK8gC,UAAW,CACrC,GAAMa,GAAU3hC,KAAK4hC,SAASthC,aAC9BN,MAAKwhC,eAAiBxhC,KAAK6hC,YAAYvhC,cAAcwhC,YAAcH,EAAQG,YAC3EH,EAAQn8B,UAAU2Y,IAAI,gBAEtBne,KAAKyhC,iBAAmBzhC,KAAKqgC,QAC7BrgC,KAAK8gC,WAAY,IAIrBZ,EAAFv7B,UAAAo9B,QAAE,SAAQzgC,GACN,GAAItB,KAAK8gC,UAAW,CAClB,GAAMjyB,GAAY7O,KAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,OAAmB,EAAI,CAChEjB,MAAKgiC,gBAAkBhiC,KAAKshC,mBAAmBhgC,EAAM2gC,OAASpzB,EAE9D,IAAMqzB,GAASliC,KAAKgiC,gBAAkB,IAAOhiC,KAAKwhC,eAAiB3yB,CACnE7O,MAAK4hC,SAASthC,cAAcqS,MAAMkC,UAAY,eAAeqtB,EAAnE,cAIEhC,EAAFv7B,UAAAw9B,WAAE,WAAA,GAAFtiC,GAAAG,IACI,IAAIA,KAAK8gC,UAAW,CAClB,GAAMsB,GAAkBpiC,KAAKgiC,gBAAkB,EAE3CI,KAAoBpiC,KAAKqgC,UAC3BrgC,KAAKghC,WAAW9pB,OACXlX,KAAKwgC,SAASV,mBACjB9/B,KAAKqgC,QAAU+B,EACfpiC,KAAKgsB,qBAMThsB,KAAKmS,QAAQM,kBAAkB,WAAM,MAAAsf,YAAW,WAC1ClyB,EAAKihC,YACPjhC,EAAKihC,WAAY,EACjBjhC,EAAK+hC,SAASthC,cAAckF,UAAU0Y,OAAO,gBAI7Cre,EAAK+hC,SAASthC,cAAcqS,MAAMkC,UAAY,UAOtDqrB,EAAFv7B,UAAA09B,mBAAE,WAMEriC,KAAKoY,mBAAmB8S,gCA9R5BlsB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACEvC,SAAU,iBACVpD,MACFC,MAAA,mBACM6jC,OAAN,KACIC,kBAAJ,OACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,4BACIpS,kCAAJ,uCAEArqB,SAAA,gpCACAC,QAAA,gnGACEqB,WAAFy4B,IACEn+B,QAAS,WAAX,gBAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFA9EAC,KAAE2D,EAAAA,eAPF3D,KAAQE,EAAAA,oBAHRF,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAQA3C,KAAEC,EAAAA,SA8KFD,SAAAqD,GAAAZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAyBi+B,QApKzB5gC,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,2BAsKAvxB,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAAsD,EAAAA,cAvLA49B,EAAA7gC,0HAkHAijB,OAAAtjB,KAAAO,EAAAA,QAGAuhB,KAAA9hB,KAAAO,EAAAA,QAGAqnB,gBAAA5nB,KAAAO,EAAAA,QAGAgV,YAAAvV,KAAAO,EAAAA,MAAAoC,MAAA,gBAGA6S,iBAAAxV,KAAAO,EAAAA,MAAAoC,MAAA,qBAKAghC,WAAA3jC,KAAAO,EAAAA,QAGA8gC,UAAArhC,KAAAO,EAAAA,QAGAkX,SAAAzX,KAAAwY,EAAAA,SAKAupB,eAAA/hC,KAAQwY,EAAAA,SAORwpB,aAAAhiC,KAAAwY,EAAAA,SAQA2pB,gBAAAniC,KAAAsV,EAAAA,UAAA3S,MAAA,YAcAu+B,mCCpLA,sBAeAlhC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CE,SAAU88B,GAAgBn9B,IAC1BU,cAAey8B,IACf34B,YACGC,QAASgpB,EAAAA,sBAAuBC,SAAUC,SApB/CkS,KfyEa5T,IACXxnB,QAASy4B,EAAAA,kBACTx4B,YAAawO,EAAAA,WAAW,WAAM,MAAAkT,MAC9BgX,OAAO,GAIT9R,GAAA,yBAhFA,MAAAA,MA2FAwU,GAAA,WACE,QAAFA,GAAqB3iC,GAAAF,KAArBE,YAAqBA,EA5FrB,MAAA2iC,MA8FaC,GAKLpjC,EAAcwE,EAAWtE,EAAcijC,IAAgB,0BAyW7D,QAAF1Z,GAAc7kB,EACQnE,EACAiY,EACYjC,EACG5V,EAE2Bk8B,GAN9D,GAAF58B,GAOIC,EAPJC,KAAAC,KAOUsE,IAPVtE,WACsBH,GAAtBM,cAAsBA,EACAN,EAAtBuY,mBAAsBA,EACYvY,EAAlCsW,KAAkCA,EAG8BtW,EAAhE48B,eAAgEA,EAzThE58B,EAAAkjC,SAAoB,EAYpBljC,EAAAmjC,KAAyB,IAiBzBnjC,EAAAypB,KAAyB,EAezBzpB,EAAAojC,MAA0B,EAM1BpjC,EAAAqjC,aAAiC,EAiBjCrjC,EAAAupB,cAA2C,EA4B3CvpB,EAAAwpB,OAAkC,KAelCxpB,EAAA+pB,WAAsB,EAGpB/pB,EAAF4W,OAA6D,GAAIF,GAAAA,aAG/D1W,EAAFkuB,MAA4D,GAAIxX,GAAAA,aAO9D1W,EAAFiuB,YAAgE,GAAIvX,GAAAA,aA6BlE1W,EAAF2sB,UAAyB,aAIzB3sB,EAAA6pB,SAA6B,EAM3B7pB,EAAF4rB,YAAwB,EAMtB5rB,EAAFmB,WAAuB,EA2GvBnB,EAAA+qB,qBAAyC,EAGzC/qB,EAAAurB,kBAAiD,KAEjDvrB,EAAAguB,8BAAgE,aAMhEhuB,EAAAwW,uBAAmCjI,EAAAA,aAAaC,MA8B5CxO,EAAKU,SAAWC,SAASD,IAAa,IAxB1C,MA5S+BmE,GAA/BykB,EAAArpB,GAGE2L,OAAFC,eACMyd,EADNxkB,UAAA,cAAE,WACwB,MAAO3E,MAAK+iC,aACpC,SAAW9hC,GACTjB,KAAK+iC,QAAU/kB,EAAAA,sBAAsB/c,oCAKvCwK,OAAFC,eACMyd,EADNxkB,UAAA,WAAE,WACoB,MAAO3E,MAAKgjC,UAChC,SAAQlnB,GACN9b,KAAKgjC,KAAOjqB,EAAAA,qBAAqB+C,EAAG9b,KAAKgjC,MACzChjC,KAAK0pB,SAAW1pB,KAAK2pB,qBAAqB3pB,KAAKqpB,QAG/CrpB,KAAKoY,mBAAmBxB,gDAK1BnL,OAAFC,eACMyd,EADNxkB,UAAA,WAAE,WACoB,MAAO3E,MAAKspB,UAChC,SAAQxN,GACN9b,KAAKspB,KAAOvQ,EAAAA,qBAAqB+C,EAAG9b,KAAKspB,MAGrB,OAAhBtpB,KAAKqpB,SACPrpB,KAAKiB,MAAQjB,KAAKspB,MAEpBtpB,KAAK0pB,SAAW1pB,KAAK2pB,qBAAqB3pB,KAAKqpB,QAG/CrpB,KAAKoY,mBAAmBxB,gDAK1BnL,OAAFC,eACMyd,EADNxkB,UAAA,YAAE,WACqB,MAAO3E,MAAKijC,WACjC,SAASnnB,GACP9b,KAAKijC,MAAQlqB,EAAAA,qBAAqB+C,EAAG9b,KAAKijC,OAEtCjjC,KAAKijC,MAAQ,GAAM,IACrBjjC,KAAKupB,gBAAkBvpB,KAAKijC,MAAME,WAAWC,MAAM,KAAKC,MAAOl+B,QAIjEnF,KAAKoY,mBAAmBxB,gDAK1BnL,OAAFC,eACMyd,EADNxkB,UAAA,kBAAE,WAC4B,MAAO3E,MAAKkjC,iBACxC,SAAejiC,GAAkBjB,KAAKkjC,YAAcllB,EAAAA,sBAAsB/c;kBAO1EwK,OAAFC,eACMyd,EADNxkB,UAAA,oBAAE,WACqB,MAAO3E,MAAKopB,mBACjC,SAAiBnoB,GAEbjB,KAAKopB,cADO,SAAVnoB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB8X,EAAAA,qBAAqB9X,EAAOjB,KAA4B,eAExD,mCAMzByL,OAAFC,eACMyd,EADNxkB,UAAA,aAAE,WAME,MAHoB,QAAhB3E,KAAKqpB,SACPrpB,KAAKiB,MAAQjB,KAAKspB,MAEbtpB,KAAKqpB,YAEd,SAAUvN,GACR,GAAIA,IAAM9b,KAAKqpB,OAAQ,CACrB,GAAIpoB,GAAQ8X,EAAAA,qBAAqB+C,EAI7B9b,MAAKupB,kBACPtoB,EAAQuoB,WAAWvoB,EAAMwoB,QAAQzpB,KAAKupB,mBAGxCvpB,KAAKqpB,OAASpoB,EACdjB,KAAK0pB,SAAW1pB,KAAK2pB,qBAAqB3pB,KAAKqpB,QAG/CrpB,KAAKoY,mBAAmBxB,iDAa5BnL,OAAFC,eACMyd,EADNxkB,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4pB,eACtC,SAAa3oB,GACXjB,KAAK4pB,UAAY5L,EAAAA,sBAAsB/c,oCAkBzCwK,OAAFC,eAAMyd,EAANxkB,UAAA,oBAAE,WACE,MAAI3E,MAAK6pB,YACA7pB,KAAK6pB,YAAY7pB,KAAKiB,OAM3BjB,KAAKupB,iBAAmBvpB,KAAKiB,OAASjB,KAAKiB,MAAQ,GAAM,EACpDjB,KAAKiB,MAAMwoB,QAAQzpB,KAAKupB,iBAG1BvpB,KAAKiB,OAAS,mCAIvBkoB,EAAFxkB,UAAAkT,MAAE,WACE7X,KAAK8pB,qBAIPX,EAAFxkB,UAAAolB,KAAE,WACE/pB,KAAKgqB,oBAOPve,OAAFC,eAAMyd,EAANxkB,UAAA,eAAE,WAAwB,MAAO3E,MAAKiqB,OAAOjqB,KAAK0pB,2CAmBhDje,OAAFC,eAAMyd,EAANxkB,UAAA,mBAAE,WAGE,MAAO3E,MAAKkqB,UAAYlqB,KAAKmqB,OAASnqB,KAAKmqB,wCAK7C1e,OAAFC,eAAMyd,EAANxkB,UAAA,mBAAE,WACE,MAAwB,KAAjB3E,KAAKoqB,yCAOd3e,OAAFC,eAAMyd,EAANxkB,UAAA,iBAAE,WACE,MAAI3E,MAAKW,SA3Rc,EA8RnBX,KAAKqqB,cAAgBrqB,KAAKsqB,WACrBtqB,KAAKgB,UAzRiB,GAHG,EA8R3B,mCAITyK,OAAFC,eAAMyd,EAANxkB,UAAA,8BAAE,WACE,GAAM4lB,GAAOvqB,KAAKkqB,SAAW,IAAM,IAC7BM,EAAQxqB,KAAKkqB,SAAW,OAAM,EAAIlqB,KAAKoqB,SAAjD,MAAmE,EAAIpqB,KAAKoqB,QAA5E,QAGI,QAEEvV,UAAW,YAAY0V,EAA7B,KAJiBvqB,KAAKyqB,2BAA6B,IAAM,IAIbzqB,KAAK0qB,UAAjD,eAAyEF,EAAzE,sCAKE/e,OAAFC,eAAMyd,EAANxkB,UAAA,wBAAE,WACE,GAAM4lB,GAAOvqB,KAAKkqB,SAAW,IAAM,IAC7BM,EAAQxqB,KAAKkqB,SAAW,MAAMlqB,KAAKoqB,QAA7C,MAA+DpqB,KAAKoqB,QAApE,QAGI,QAEEvV,UAAW,YAAY0V,EAA7B,KAJiBvqB,KAAKyqB,2BAA6B,GAAK,KAIZzqB,KAAK0qB,UAAjD,eAAyEF,EAAzE,sCAKE/e,OAAFC,eAAMyd,EAANxkB,UAAA,6BAAE,WAME,OACEkQ,UAAa,aANJ7U,KAAKkqB,SAAW,IAAM,KAMrC,KAHgBlqB,KAAKkqB,UAAoC,OAAxBlqB,KAAK2qB,gBAAgC,IAAL,IAChD3qB,KAAK4qB,qBAAuB,EAAI,IAEjD,uCAKEnf,OAAFC,eAAMyd,EAANxkB,UAAA,oBAAE,WACE,GAAIkmB,GAAuC,IAA5B7qB,KAAK4qB,qBAChBE,EAAiB9qB,KAAKkqB,SAAW,OAAOW,EAAhD,IAAiEA,EAAjE,QACQN,EAAOvqB,KAAKkqB,SAAW,IAAM,IAI7Ba,EAAQ/qB,KAAKkqB,UAAoC,OAAxBlqB,KAAK2qB,gBAAiC,GAAN,IACzDK,EAAUhrB,KAAKkqB,UAAoC,OAAxBlqB,KAAK2qB,gBAA+C,GAApB,kBAC3DzkB,GACF4kB,eAAkBA,EAElBjW,UAAa,0BAA0B0V,EAA7C,IAAqDQ,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAIhrB,KAAKqqB,aAAerqB,KAAK0qB,UAAW,CAItCxkB,EAAO,WAHIlG,KAAKkqB,SACXlqB,KAAKirB,YAAc,SAAW,MAC9BjrB,KAAKirB,YAAc,QAAU,SACJjrB,KAAK0qB,UAAzC,KAGI,MAAOxkB,oCAGTuF,OAAFC,eAAMyd,EAANxkB,UAAA,6BAAE,WAOE,OACEkQ,UAAa,aAPJ7U,KAAKkqB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxBlqB,KAAK2qB,iBAA6B3qB,KAAKkqB,SAAgClqB,KAAKirB,aAAxBjrB,KAAKirB,aACjCjrB,KAAKoqB,QAAU,EAAIpqB,KAAKoqB,SAEzD,uCA4BUjB,EAAVxkB,UAAA8lB,oCACI,MAAgC,OAAxBzqB,KAAK2qB,iBAA6B3qB,KAAKkqB,SAAgClqB,KAAKirB,aAAxBjrB,KAAKirB,aAI3D9B,EAAVxkB,UAAAgmB,yBACI,MAAQ3qB,MAAKmW,MAA2B,OAAnBnW,KAAKmW,KAAKlV,MAAkB,MAAQ,OAe3DkoB,EAAFxkB,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,IACIA,MAAKG,cACAW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAC2O,GACVhU,EAAKmB,YAAc6S,GAAqB,aAAXA,EAC7BhU,EAAKuY,mBAAmB8S,kBAE1BlrB,KAAKmW,OACPnW,KAAKqW,uBAAyBrW,KAAKmW,KAAKM,OAAOvR,UAAU,WACvDrF,EAAKuY,mBAAmBxB,mBAK9BuS,EAAFxkB,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,aACvCF,KAAKqW,uBAAuBtF,eAG9BoY,EAAFxkB,UAAAwmB,cAAE,WACMnrB,KAAKW,WAMTX,KAAKorB,kBAAoBprB,KAAKqrB,uBAC9BrrB,KAAKsrB,+BAGPnC,EAAFxkB,UAAA4mB,SAAE,SAASjqB,GACP,IAAItB,KAAKW,SAAT,CAIA,GAAI6qB,GAAWxrB,KAAKiB,KACpBjB,MAAKyrB,YAAa,EAClBzrB,KAAK8pB,oBACL9pB,KAAK0rB,0BAA0BC,EAAGrqB,EAAMsqB,QAASC,EAAGvqB,EAAMwqB,UAGtDN,GAAYxrB,KAAKiB,QACnBjB,KAAK+rB,kBACL/rB,KAAKgsB,sBAIT7C,EAAFxkB,UAAAsnB,SAAE,SAAS3qB,GACP,IAAItB,KAAKW,SAAT,CAMKX,KAAKyrB,YACRzrB,KAAKksB,cAAc,MAIrB5qB,EAAMC,gBAEN,IAAIiqB,GAAWxrB,KAAKiB,KACpBjB,MAAK0rB,0BAA0BC,EAAGrqB,EAAM6qB,OAAOR,EAAGE,EAAGvqB,EAAM6qB,OAAON,IAG9DL,GAAYxrB,KAAKiB,OACnBjB,KAAK+rB,oBAIT5C,EAAFxkB,UAAAunB,cAAE,SAAc5qB,GACRtB,KAAKW,UAAYX,KAAKyrB,aAK1BzrB,KAAKmrB,gBAELnrB,KAAKyrB,YAAa,EAClBzrB,KAAK8pB,oBACL9pB,KAAKosB,mBAAqBpsB,KAAKiB,MAE3BK,IACFtB,KAAK0rB,0BAA0BC,EAAGrqB,EAAM6qB,OAAOR,EAAGE,EAAGvqB,EAAM6qB,OAAON,IAClEvqB,EAAMC,oBAIV4nB,EAAFxkB,UAAA0nB,YAAE,WACErsB,KAAKyrB,YAAa,EAEdzrB,KAAKosB,oBAAsBpsB,KAAKiB,OAAUjB,KAAKW,UACjDX,KAAKgsB,mBAEPhsB,KAAKosB,mBAAqB,MAG5BjD,EAAFxkB,UAAA2nB,SAAE,WAGEtsB,KAAKorB,kBAAoBprB,KAAKqrB,uBAC9BrrB,KAAKsrB,8BAGPnC,EAAFxkB,UAAA4nB,QAAE,WACEvsB,KAAKwsB,aAGPrD,EAAFxkB,UAAA8nB,WAAE,SAAWnrB,GACT,IAAItB,KAAKW,SAAT,CAEA,GAAI6qB,GAAWxrB,KAAKiB,KAEpB,QAAQK,EAAMsY,SACZ,IAAK8S,GAAAA,QACH1sB,KAAK2sB,WAAW,GAChB,MACF,KAAKC,GAAAA,UACH5sB,KAAK2sB,YAAY,GACjB,MACF,KAAK5S,GAAAA,IACH/Z,KAAKiB,MAAQjB,KAAK+b,GAClB,MACF,KAAKlC,GAAAA,KACH7Z,KAAKiB,MAAQjB,KAAK6R,GAClB,MACF,KAAKgb,GAAAA,WAQH7sB,KAAK2sB,WAAmC,OAAxB3sB,KAAK2qB,gBAA2B,GAAK,EACrD,MACF,KAAKmC,GAAAA,SACH9sB,KAAK2sB,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEH/sB,KAAK2sB,WAAmC,OAAxB3sB,KAAK2qB,iBAA4B,EAAI,EACrD,MACF,KAAKqC,GAAAA,WACHhtB,KAAK2sB,YAAY,EACjB,MACF,SAGE,OAGAnB,GAAYxrB,KAAKiB,QACnBjB,KAAK+rB,kBACL/rB,KAAKgsB,oBAGPhsB,KAAKyrB,YAAa,EAClBnqB,EAAMC,mBAGR4nB,EAAFxkB,UAAAsoB,SAAE,WACEjtB,KAAKyrB,YAAa,GAIZtC,EAAVxkB,UAAAgoB,WAAA,SAAqBO,GACjBltB,KAAKiB,MAAQjB,KAAKiqB,QAAQjqB,KAAKiB,OAAS,GAAKjB,KAAKmtB,KAAOD,EAAUltB,KAAK6R,IAAK7R,KAAK+b,MAI5EoN,EAAVxkB,UAAA+mB,yBAAA,SAAmC0B,GAC/B,GAAKptB,KAAKorB,kBAAV,CAIA,GAAIiC,GAASrtB,KAAKkqB,SAAWlqB,KAAKorB,kBAAkBkC,IAAMttB,KAAKorB,kBAAkBpY,KAC7Eua,EAAOvtB,KAAKkqB,SAAWlqB,KAAKorB,kBAAkBhM,OAASpf,KAAKorB,kBAAkBnY,MAC9Eua,EAAextB,KAAKkqB,SAAWkD,EAAIvB,EAAIuB,EAAIzB,EAG3CvB,EAAUpqB,KAAKiqB,QAAQuD,EAAeH,GAAUE,EAUpD,IARIvtB,KAAKyqB,6BACPL,EAAU,EAAIA,GAOA,IAAZA,EACFpqB,KAAKiB,MAAQjB,KAAK6R,QACb,IAAgB,IAAZuY,EACTpqB,KAAKiB,MAAQjB,KAAK+b,QACb,CACL,GAAM0R,GAAaztB,KAAK0tB,gBAAgBtD,GAIlCuD,EAAehc,KAAKic,OAAOH,EAAaztB,KAAK6R,KAAO7R,KAAKmtB,MAAQntB,KAAKmtB,KAAOntB,KAAK6R,GAGxF7R,MAAKiB,MAAQjB,KAAKiqB,OAAO0D,EAAc3tB,KAAK6R,IAAK7R,KAAK+b,QAKlDoN,EAAVxkB,UAAAqnB,4BACIhsB,KAAK6tB,8BAA8B7tB,KAAKiB,OACxCjB,KAAK8tB,YAAY5W,KAAKlX,KAAKiB,OAC3BjB,KAAKyW,OAAOS,KAAKlX,KAAKue,uBAIhB4K,EAAVxkB,UAAAonB,2BACI/rB,KAAK+tB,MAAM7W,KAAKlX,KAAKue,uBAIf4K,EAAVxkB,UAAA2mB,sCACI,GAAKtrB,KAAKguB,cAAiBhuB,KAAKorB,kBAIhC,GAAyB,QAArBprB,KAAKguB,aAAwB,CAC/B,GAAIC,GAAYjuB,KAAKkqB,SAAWlqB,KAAKorB,kBAAkBhM,OAASpf,KAAKorB,kBAAkBnY,MACnFib,EAAgBD,EAAYjuB,KAAKmtB,MAAQntB,KAAK+b,IAAM/b,KAAK6R,KACzDsc,EAAexc,KAAKC,KAloBG,GAkoB6Bsc,GACpDE,EAAgBD,EAAenuB,KAAKmtB,IACxCntB,MAAK4qB,qBAAuBwD,EAAgBH,MAE5CjuB,MAAK4qB,qBAAuB5qB,KAAKguB,aAAehuB,KAAKmtB,MAAQntB,KAAK+b,IAAM/b,KAAK6R,MAKzEsX,EAAVxkB,UAAA4Z,mBAAA,SAA6Btd,OAA7B,KAAAA,IAA6BA,EAAQjB,KAAKiB,MACtC,IAAIK,GAAQ,GAAI+sB,GAKhB,OAHA/sB,GAAMgtB,OAAStuB,KACfsB,EAAML,MAAQA,EAEPK,GAID6nB,EAAVxkB,UAAAglB,qBAAA,SAA+B1oB,GAC3B,QAASA,GAAS,GAAKjB,KAAK6R,MAAQ7R,KAAK+b,IAAM/b,KAAK6R,MAI9CsX,EAAVxkB,UAAA+oB,gBAAA,SAA0Ba,GACtB,MAAOvuB,MAAK6R,IAAM0c,GAAcvuB,KAAK+b,IAAM/b,KAAK6R,MAI1CsX,EAAVxkB,UAAAslB,OAAA,SAAiBhpB,EAAe4Q,EAASkK,GACrC,WADJ,KAAAlK,IAAgCA,EAAhC,OAAA,KAAAkK,IAAyCA,EAAzC,GACWpK,KAAKoK,IAAIlK,EAAKF,KAAKE,IAAI5Q,EAAO8a,KAQ/BoN,EAAVxkB,UAAA0mB,gCACI,MAAOrrB,MAAKwuB,eAAiBxuB,KAAKwuB,eAAeluB,cAAcmuB,wBAA0B,MAOnFtF,EAAVxkB,UAAAmlB,6BACI9pB,KAAKE,YAAYI,cAAcuX,SAIzBsR,EAAVxkB,UAAAqlB,4BACIhqB,KAAKE,YAAYI,cAAcypB,QAOjCZ,EAAFxkB,UAAA+pB,WAAE,SAAWztB,GACTjB,KAAKiB,MAAQA,GAQfkoB,EAAFxkB,UAAAgqB,iBAAE,SAAiBC,GACf5uB,KAAK6tB,8BAAgCe,GAQvCzF,EAAFxkB,UAAAkqB,kBAAE,SAAkBD,GAChB5uB,KAAKwsB,UAAYoC,GAQnBzF,EAAFxkB,UAAAmqB,iBAAE,SAAiBC,GACf/uB,KAAKW,SAAWouB,kBA1qBpB/vB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACV2F,WAAFynB,IACExwB,MACFywB,UAAA,aACMC,SAAN,YACI/sB,UAAW,mBACXgtB,YAAJ,qBACIC,UAAW,aACXnM,eAAJ,kBACIoM,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACI9wB,MAAJ,aACIyI,KAAJ,SACIsoB,aAAJ,WACIztB,uBAAJ,WACI0tB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIC,kCAAJ,uCAEArqB,SAAA,ipBACAC,QAAA,4uPACErE,QAAF,WAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFAnH3CC,KAAEE,EAAAA,oBAlBFF,KAAQge,EAAAA,eAARvb,aAAAzC,KAAAsD,EAAAA,aAgBAtD,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAfA3C,KAAQyD,OAARhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA4uB,EAAAA,4BAycApH,EAAA9pB,6DA9TAwS,MAAA7S,KAAAO,EAAAA,QAQA4tB,OAAAnuB,KAAAO,EAAAA,QAYA+qB,aAAAtrB,KAAAO,EAAAA,QAiBAyuB,eAAAhvB,KAAAO,EAAAA,QAeA0B,QAAAjC,KAAAO,EAAAA,QASAsqB,cAAA7qB,KAAAO,EAAAA,QAcA2qB,WAAAlrB,KAAAO,EAAAA,QAgCAkX,SAAAzX,KAAAwY,EAAAA,SAGAuW,QAAA/uB,KAAAwY,EAAAA,SAQAsW,cAAA9uB,KAAAwY,EAAAA,SAGAgX,iBAAAxvB,KAAAsV,EAAAA,UAAA3S,MAAA,oBAgLAwnB,mCC7bA,sBAeAnqB,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcC,IACxBK,SAAU+lB,GAAWpmB,IACrBU,cAAe0lB,IACf5hB,YAAaC,QAASgpB,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFjxB,GAAAG,IACsBA,MAAtB8wB,YAAsBA,EAlBtB9wB,KAAA+wB,gBAAqC,GAAIpd,GAAAA,QAGzC3T,KAAAgxB,aAAkC,GAAIrd,GAAAA,QAGtC3T,KAAAixB,UAA+B,GAAItd,GAAAA,QASnC3T,KAAAkxB,oBAA+B,EAI3BlxB,KAAK6wB,kBAAoBA,EAEzB7wB,KAAKmxB,WAAWjsB,UAAU,WAAM,MAAArF,GAAKuxB,YACrCP,EAAkBQ,QAAQnsB,UAAU,WAAM,MAAArF,GAAKyxB,mBAvDnD,MA2DEV,GAAFjsB,UAAAysB,QAAE,WACOpxB,KAAK+wB,gBAAgBQ,QACxBvxB,KAAK6wB,kBAAkBW,OAEzBC,aAAazxB,KAAK0xB,qBAIpBd,EAAFjsB,UAAAgtB,kBAAE,WACO3xB,KAAKixB,UAAUM,SAClBvxB,KAAKkxB,oBAAqB,EAC1BlxB,KAAKixB,UAAUtlB,OACf3L,KAAKixB,UAAUhd,aAUnB2c,EAAFjsB,UAAAitB,gBAAE,WACE5xB,KAAK2xB,qBAIPf,EAAFjsB,UAAAktB,cAAE,SAAcC,GAAd,GAAFjyB,GAAAG,IACIA,MAAK0xB,mBAAqBK,WAAW,WAAM,MAAAlyB,GAAKuxB,WAAWU,IAI7DlB,EAAFjsB,UAAAqtB,MAAE,WACOhyB,KAAKgxB,aAAaO,SACrBvxB,KAAKgxB,aAAarlB,OAClB3L,KAAKgxB,aAAa/c,aAKd2c,EAAVjsB,UAAA2sB,0BACItxB,KAAK8wB,YAAYmB,UAEZjyB,KAAKixB,UAAUM,QAClBvxB,KAAKixB,UAAUhd,WAGjBjU,KAAK+wB,gBAAgBplB,MAAMumB,kBAAmBlyB,KAAKkxB,qBACnDlxB,KAAK+wB,gBAAgB9c,WACrBjU,KAAKkxB,oBAAqB,GAI5BN,EAAFjsB,UAAAwtB,eAAE,WACE,MAAOnyB,MAAK+wB,gBAAgBqB,gBAI9BxB,EAAFjsB,UAAA0tB,YAAE,WACE,MAAOryB,MAAK6wB,kBAAkByB,UAIhC1B,EAAFjsB,UAAAwsB,SAAE,WACE,MAAOnxB,MAAKixB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAIxgB,GAAAA,eAAoB,mBAW1DygB,GAAA,wBAEExyB,KAAFyyB,WAAoC,YAMlCzyB,KAAF0yB,oBAAiC,GAM/B1yB,KAAF8xB,SAAsB,EASpB9xB,KAAF6H,KAAoB,KAGlB7H,KAAF2yB,mBAAuD,SAGrD3yB,KAAF4yB,iBAAmD,SArDnD,MAAAJ,oBCgCE,QAAFK,GACWC,EACqBjrB,GADrB7H,KAAX8yB,YAAWA,EAEP9yB,KAAK6H,KAAOA,EADhB,MAKEgrB,GAAFluB,UAAAouB,OAAE,WACE/yB,KAAK8yB,YAAYnB,qBAInBlmB,OAAFC,eAAMmnB,EAANluB,UAAA,iBAAE,WACE,QAAS3E,KAAK6H,KAAKkrB,uDA5BvB/zB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,8JACVC,QAAF,yUACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,+HAWAo0B,KCjBaG,IAIXC,cAAete,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgBjC,EAAAA,OACpBkC,UAAW,aACXqe,QAAS,KAEXte,EAAAA,MAAM,UAAWjC,EAAAA,OACfkC,UAAW,WACXqe,QAAS,KAEXne,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqCrC,EAAAA,OAChFugB,QAAS,wBCoCb,QAAFC,GACYhhB,EACAjS,EACAkY,EAEDgb,GALT,GAAFvzB,GAOIC,EAPJC,KAAAC,OAAAA,WACYH,GAAZsS,QAAYA,EACAtS,EAAZK,YAAYA,EACAL,EAAZuY,mBAAYA,EAEDvY,EAAXuzB,eAAWA,EAnBXvzB,EAAA2Y,YAAuB,EAMrB3Y,EAAFwxB,QAAmC,GAAI1d,GAAAA,QAGrC9T,EAAFyyB,SAAoC,GAAI3e,GAAAA,QAGtC9T,EAAFwzB,gBAAoB,SATpB,MAL0C3uB,GAA1CyuB,EAAArzB,GA2BEqzB,EAAFxuB,UAAA2uB,sBAAE,SAAyBC,GAGvB,MAFAvzB,MAAKwzB,qBACLxzB,KAAKyzB,wBACEzzB,KAAK0zB,cAAcJ,sBAAsBC,IAIlDJ,EAAFxuB,UAAAgvB,qBAAE,SAAwBJ,GAGtB,MAFAvzB,MAAKwzB,qBACLxzB,KAAKyzB,wBACEzzB,KAAK0zB,cAAcC,qBAAqBJ,IAIjDJ,EAAFxuB,UAAAivB,eAAE,SAAetyB,GACN,GAAA+V,GAAX/V,EAAA+V,UAAsBJ,EAAtB3V,EAAA2V,OAMI,KAJiB,SAAZA,GAAoC,SAAdI,GAAqC,WAAZJ,IAClDjX,KAAK6zB,gBAGS,YAAZ5c,EAAuB,CAGzB,GAAM6c,GAAU9zB,KAAKsyB,QAErBtyB,MAAKmS,QAAQ8I,IAAI,WACf6Y,EAAQnoB,OACRmoB,EAAQ7f,eAMdkf,EAAFxuB,UAAAovB,MAAE,WACO/zB,KAAKwY,aACRxY,KAAKqzB,gBAAkB,UACvBrzB,KAAKoY,mBAAmB8S,kBAK5BiI,EAAFxuB,UAAA6sB,KAAE,WAKE,MADAxxB,MAAKqzB,gBAAkB,SAChBrzB,KAAKqxB,SAId8B,EAAFxuB,UAAAsD,YAAE,WACEjI,KAAKwY,YAAa,EAClBxY,KAAK6zB,iBAOCV,EAAVxuB,UAAAkvB,mCACI7zB,MAAKmS,QAAQ6hB,iBAAiB5B,eAAenoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACnErF,EAAKwxB,QAAQ1lB,OACb9L,EAAKwxB,QAAQpd,cAKTkf,EAAVxuB,UAAA8uB,iCACI,GAAMnhB,GAAuBtS,KAAKE,YAAYI,cACxC2zB,EAAej0B,KAAKozB,eAAec,UAErCD,KACEnqB,MAAMC,QAAQkqB,GAEhBA,EAAa7pB,QAAQ,SAAA+pB,GAAY,MAAA7hB,GAAQ9M,UAAU2Y,IAAIgW,KAEvD7hB,EAAQ9M,UAAU2Y,IAAI8V,IAIqB,WAA3Cj0B,KAAKozB,eAAeT,oBACtBrgB,EAAQ9M,UAAU2Y,IAAI,wBAGqB,QAAzCne,KAAKozB,eAAeR,kBACtBtgB,EAAQ9M,UAAU2Y,IAAI,sBAKlBgV,EAAVxuB,UAAA6uB,8BACI,GAAIxzB,KAAK0zB,cAAc/d,cACrB,KAAMye,OAAM,4FAvIlBp1B,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,8CACVC,QAAF,uYACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE2Y,YAAFyb,GAAAC,eACEz0B,MACF0I,KAAc,QACRzI,MAAN,0BACI41B,WAAJ,kBACIC,gBAAJ,sGAzBAt1B,KAAEE,EAAAA,oBAFFF,KAAEwzB,MAUFW,EAAA9zB,6EA2BA8zB,mDCzDA,sBAkBAn0B,KAAC4D,EAAAA,SAADjB,OACEkB,SACE0xB,EAAAA,cACAvxB,EAAAA,aACAF,EAAAA,aACAykB,GACAxkB,IAEFK,SAAU+vB,GAAsBpwB,IAChCU,cAAe0vB,GAAsBN,IACrC2B,iBAAkBrB,GAAsBN,QA5B1C4B,KCiCaC,GACT,GAAI3iB,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAAS0iB,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCl1B,KAAd60B,SAAcA,EACA70B,KAAd80B,MAAcA,EACA90B,KAAd+0B,UAAcA,EACA/0B,KAAdg1B,oBAAcA,EACwBh1B,KAAtCi1B,gBAAsCA,EACej1B,KAArDk1B,eAAqDA,EAtBrDl1B,KAAAm1B,wBAAgE,KAtDhE,MAyDE1pB,QAAFC,eAAMkpB,EAANjwB,UAAA,0BAAE,WACE,GAAMywB,GAASp1B,KAAKi1B,eACpB,OAAOG,GAASA,EAAOC,mBAAqBr1B,KAAKm1B,6BAGnD,SAAuBl0B,GACjBjB,KAAKi1B,gBACPj1B,KAAKi1B,gBAAgBI,mBAAqBp0B,EAE1CjB,KAAKm1B,wBAA0Bl0B,mCAmBnC2zB,EAAFjwB,UAAA2wB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOx1B,MAAKy1B,QAAQF,EAAWC,IAUjCZ,EAAFjwB,UAAA+wB,iBAAE,SAAiBzvB,EAA4BuvB,GAE3C,MAAOx1B,MAAKy1B,QAAQxvB,EAAUuvB,IAShCZ,EAAFjwB,UAAAgxB,KAAE,SAAKC,EAAiB7C,EAAqByC,OAA7C,KAAAzC,IAAwBA,EAAxB,GAEI,IAAM8C,GAAVC,MAAwB91B,KAAKk1B,eAAmBM,EAU5C,OANAK,GAAQhuB,MAAQ+tB,QAApBA,EAA6B7C,OAA7BA,GAES8C,EAAQnD,sBACXmD,EAAQnD,oBAAsBkD,GAGzB51B,KAAKs1B,kBAAkBzC,GAAgBgD,IAMhDjB,EAAFjwB,UAAAysB,QAAE,WACMpxB,KAAKq1B,oBACPr1B,KAAKq1B,mBAAmBjE,WAI5BwD,EAAFjwB,UAAAsD,YAAE,WAEMjI,KAAKm1B,yBACPn1B,KAAKm1B,wBAAwB/D,WAOzBwD,EAAVjwB,UAAAoxB,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW,GAAIqB,WACrE5D,GAAmBgD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBnD,GAAsBqC,EAAOtgB,iBAAkBghB,GACjEK,EAAmDP,EAAWpgB,OAAOygB,EAE3E,OADAE,GAAaC,SAASpD,eAAiBoC,EAChCe,EAAaC,UAMd5B,EAAVjwB,UAAA8wB,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAItD,IAAwBxyB,KAAKk1B,eAAmBwB,GACjEV,EAAah2B,KAAK22B,eAAenB,GACjCoB,EAAY52B,KAAK+1B,yBAAyBC,EAAYR,GACtD1C,EAAc,GAAIlC,IAAyCgG,EAAWZ,EAE5E,IAAIS,YAAmBvjB,GAAAA,YAAa,CAClC,GAAMqgB,GAAS,GAAIpf,GAAAA,eAAesiB,EAAO,MACvCI,UAAWrB,EAAO3tB,KAClBirB,YAARA,GAGMA,GAAY0D,SAAWI,EAAUjD,qBAAqBJ,OACjD,CACL,GAAM2C,GAAWl2B,KAAK82B,gBAAgBtB,EAAQ1C,GACxCS,EAAS,GAAI+C,GAAAA,gBAAgBG,MAASp0B,GAAW6zB,GACjDa,EAAaH,EAAUtD,sBAAyBC,EAGtDT,GAAY0D,SAAWO,EAAWP,SAkBpC,MAZAx2B,MAAKg1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAASjtB,KACpD2Q,EAAAA,UAAUob,EAAWmB,cAAcltB,KAAKC,EAAAA,KAAK,MAC7ChF,UAAU,SAAA0P,GACNA,EAAMwiB,QACRpB,EAAWqB,eAAe7xB,UAAU2Y,IAAI,yBAExC6X,EAAWqB,eAAe7xB,UAAU0Y,OAAO,2BAI/Cle,KAAKs3B,iBAAiBxE,EAAa0C,GACnCx1B,KAAKq1B,mBAAqBvC,EACnB9yB,KAAKq1B,oBAINT,EAAVjwB,UAAA2yB,iBAAA,SAA2BxE,EAAkC0C,aAEzD1C,GAAYX,iBAAiBjtB,UAAU,WAEjCrF,EAAKw1B,oBAAsBvC,IAC7BjzB,EAAKw1B,mBAAqB,QAI1Br1B,KAAKq1B,oBAGPr1B,KAAKq1B,mBAAmBlD,iBAAiBjtB,UAAU,WACjD4tB,EAAYjC,kBAAkBkD,UAEhC/zB,KAAKq1B,mBAAmBjE,WAGxB0B,EAAYjC,kBAAkBkD,QAI5ByB,EAAO1D,UAAY0D,EAAO1D,SAAW,GACvCgB,EAAYT,cAAcntB,UAAU,WAAM,MAAA4tB,GAAYjB,cAAc2D,EAAe,YAGjFA,EAAO9C,qBACT1yB,KAAK80B,MAAMyC,SAAS/B,EAAO9C,oBAAqB8C,EAAO/C,aAQnDmC,EAAVjwB,UAAAgyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAc3oB,UAAY2mB,EAAO3mB,SAEjC,IAAI6oB,GAAmB13B,KAAK60B,SAASjhB,WAAW+jB,SAE1CC,EAA6B,QAArBpC,EAAO3mB,UACfgpB,EAC0B,SAA9BrC,EAAO7C,oBACwB,UAA9B6C,EAAO7C,qBAAmCiF,GACZ,QAA9BpC,EAAO7C,oBAAgCiF,EACpCE,GAAWD,GAAwC,WAA9BrC,EAAO7C,kBAgBlC,OAfIkF,GACFH,EAAiB1kB,KAAK,KACb8kB,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BxC,EAAO5C,iBACT8E,EAAiBpK,IAAI,KAErBoK,EAAiBO,OAAO,KAG1BT,EAAcE,iBAAmBA,EAC1B13B,KAAK60B,SAASqD,OAAOV,IAQtB5C,EAAVjwB,UAAAmyB,gBACA,SAAMtB,EACA1C,GAEF,GAAMmD,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBj2B,KAAK+0B,UAAW,GAAIqB,WAC3DxF,GAAgBkC,IAChBP,GAAoBiD,EAAO3tB,yBA1OlC7I,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAYyiB,2CArCzBz1B,KAAQm5B,EAAAA,UAFRn5B,KAAQo5B,EAAAA,gBAURp5B,KAAEq5B,EAAAA,WATFr5B,KAAQs5B,EAAAA,qBAkERt5B,KAAuD41B,EAAvDnzB,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBmiB,EAAAA,aAjDnBniB,KAA4BwzB,GAA5B/wB,aAAAzC,KAkDOuD,EAAAA,OAlDPZ,MAkDc+yB,uOA5EdE,KC0DA2D,GAAA,yBA1DA,MAAAA,MA2DaC,GACTC,EAAiB74B,EAAc24B,qFAWjC14B,GAAF64B,UAAc,GAAIC,KAGhB94B,EAAF6T,cAA2B,GAAIC,GAAAA,QAS7B9T,EAAFkjB,MAAiD,MAWjDljB,EAAA+4B,WAAsC,GAYpC/4B,EAAFoQ,WAAqE,GAAIsG,GAAAA,eA1GzE,MAoE6B7R,GAA7Bif,EAAA7jB,GAkBE2L,OAAFC,eACMiY,EADNhf,UAAA,iBAAE,WACiC,MAAO3E,MAAK44B,gBAC7C,SAAc/pB,GACZ,GAAIhK,EAAAA,aAAegK,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMgqB,IAA6BhqB,EAErC7O,MAAK44B,WAAa/pB,mCAQpBpD,OAAFC,eACMiY,EADNhf,UAAA,oBAAE,WAC8B,MAAO3E,MAAKqiB,mBAC1C,SAAiBvG,GAAc9b,KAAKqiB,cAAgBrE,EAAAA,sBAAsBlC,oCAU1E6H,EAAFhf,UAAA4d,SAAE,SAASuW,GACP,IAAKA,EAAShY,GACZ,KAAMiY,KAGR,IAAI/4B,KAAK04B,UAAUM,IAAIF,EAAShY,IAC9B,KAAMmY,IAAgCH,EAAShY,GAEjD9gB,MAAK04B,UAAUQ,IAAIJ,EAAShY,GAAIgY,IAOlCnV,EAAFhf,UAAA6d,WAAE,SAAWsW,GACT94B,KAAK04B,UAAUS,OAAOL,EAAShY,KAIjC6C,EAAFhf,UAAAgK,KAAE,SAAKmqB,GACC94B,KAAK4O,QAAUkqB,EAAShY,IAC1B9gB,KAAK4O,OAASkqB,EAAShY,GACvB9gB,KAAK6O,UAAYiqB,EAAS/V,MAAQ+V,EAAS/V,MAAQ/iB,KAAK+iB,OAExD/iB,KAAK6O,UAAY7O,KAAKo5B,qBAAqBN,GAG7C94B,KAAKiQ,WAAWiH,MAAMtI,OAAQ5O,KAAK4O,OAAQC,UAAW7O,KAAK6O,aAI7D8U,EAAFhf,UAAAy0B,qBAAE,SAAqBN,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMjV,GAAwC,MAAzBiV,EAASjV,aAAuBiV,EAASjV,aAAe7jB,KAAK6jB,aAC9EwV,EAAqBC,GAAsBR,EAAS/V,OAAS/iB,KAAK+iB,MAAOc,GAGzE0V,EAAqBF,EAAmBzpB,QAAQ5P,KAAK6O,WAAa,CAEtE,OADI0qB,IAAsBF,EAAmBl0B,SAAUo0B,EAAqB,GACrEF,EAAmBE,IAG5B5V,EAAFhf,UAAAuP,SAAE,WACElU,KAAKw5B,oBAGP7V,EAAFhf,UAAAoP,YAAE,WACE/T,KAAK0T,cAAc/H,QAGrBgY,EAAFhf,UAAAsD,YAAE,WACEjI,KAAK0T,cAAcO,2BAvGvBjV,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,YACVvC,SAAU,UACVC,QAAS,mDAWX+M,SAAA5P,KAAGO,EAAAA,MAAHoC,MAAS,mBAMTohB,QAAA/jB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGTkN,YAAA7P,KAAGO,EAAAA,MAAHoC,MAAS,sBAcTkiB,eAAA7kB,KAAGO,EAAAA,MAAHoC,MAAS,yBAMTsO,aAAAjR,KAAGwY,EAAAA,OAAH7V,MAAU,oBA1GVgiB,GAoE6B6U,IvBlDvBjY,GAA4BkZ,GAAmBC,SAAW,IAC9BC,GAAgBC,eAGrCtW,IASXC,UAAW5O,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDiD,YAAa7O,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDkD,aAAc9O,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDmD,aAAc/O,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyCjC,EAAAA,OAAOugB,QAAS,KAC/Dte,EAAAA,MAAM,kCAAmCjC,EAAAA,OAAOugB,QAAS,OACzDte,EAAAA,MAAM,4EACFjC,EAAAA,OAAOugB,QAAS,KAEpBne,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQuL,OAUhCuB,cAAenN,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,qBAClBlC,EAAAA,OAAOkC,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA;gGAAOkC,UAAW,kBAClBlC,EAAAA,OAAOkC,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,oBAClBlC,EAAAA,OAAOkC,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,kBAClBlC,EAAAA,OAAOkC,UAAW,yBAExBD,EAAAA,MAAM,yEACFjC,EAAAA,OAAOkC,UAAW,mBACtBD,EAAAA,MAAM,qCACFjC,EAAAA,OAAOkC,UAAW,sBACtBD,EAAAA,MAAM,kCACFjC,EAAAA,OAAOkC,UAAW,uBAIxB4L,cAAe9L,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACT2L,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBC,UAAU,oCCrF3C5gB,KAAFiF,QAAoC,GAAI0O,GAAAA,QAGtC3T,KAAF6gB,gBAAoB,SAACC,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeA9hB,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,8GAfzBgP,KAkCaC,IAEXzZ,QAASwZ,GACTE,OAAQ,GAAI5e,GAAAA,SAAY,GAAI6e,GAAAA,SAAYH,KACxCI,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GACT3hB,EAAc0hB,mBAoGhB,QAAFE,GAAqBC,EACPrL,EACmBtG,EACA4R,GAH/B,GAAF7hB,GAKIC,EALJC,KAAAC,OAAAA,IAOI,IAPiBH,EAArB4hB,MAAqBA,EAEY5hB,EAAjCiQ,MAAiCA,EACAjQ,EAAjC6hB,cAAiCA,EAtC/B7hB,EAAF8hB,oBAAgC,EAU9B9hB,EAAF+hB,gBAAmC,GAKjC/hB,EAAFgiB,4BAA+B,EAS7BhiB,EAAFiiB,cAA+C,SAkBtChS,EACH,KAAMiS,YAGRliB,GAAKmiB,sBAAwB/V,EAAAA,MAAM6D,EAAMG,WAAYH,EAAM4D,cAAe+N,EAAMxc,SAC3EC,UAAU,WACLrF,EAAKoiB,aACPpiB,EAAKqiB,yBAIFriB,EAAKoiB,aAAepiB,EAAKsiB,YAA0C,WAA5BtiB,EAAKsiB,WAAWlL,UAC1DpX,EAAKgiB,4BAA6B,EAClChiB,EAAKuiB,8BAA8B/K,UAAW,SAAUJ,QAASpX,EAAK+hB,mBAGxExL,EAAkBQ,mBA5B5B,MAtCmClS,GAAnC8c,EAAA1hB,GAsCE2L,OAAFC,eACM8V,EADN7c,UAAA,oBAAE,WAC8B,MAAO3E,MAAKqiB,mBAC1C,SAAiBvG,GAAK9b,KAAKqiB,cAAgBrE,EAAAA,sBAAsBlC,oCA8BjE0F,EAAF7c,UAAAuP,SAAE,YACOlU,KAAK8gB,IAAM9gB,KAAK0hB,gBACnB1hB,KAAK8gB,GAAK9gB,KAAK0hB,cAAcY,MAI/BtiB,KAAKkiB,wBACLliB,KAAKoiB,8BACAnL,QAASjX,KAAKiiB,YAAc,SAAWjiB,KAAK4hB,kBAEjD5hB,KAAK8P,MAAMyS,SAASviB,OAGtBwhB,EAAF7c,UAAAsD,YAAE,WACEjI,KAAK8P,MAAM0S,WAAWxiB,MACtBA,KAAKgiB,sBAAsBjR,eAO7ByQ,EAAF7c,UAAA8d,yBAAE,SAAyBC,GAEnB1iB,KAAK2iB,eAAiBD,IAE1B1iB,KAAK2hB,mBAAqBe,EAErB1iB,KAAKiiB,cACRjiB,KAAKkiB,wBACDliB,KAAK2hB,mBACP3hB,KAAKoiB,8BAA8B/K,UAAWrX,KAAK4hB,gBAAiB3K,QAAS,SAE7EjX,KAAKoiB,8BAA8B/K,UAAW,OAAQJ,QAASjX,KAAK4hB,qBAU1EJ,EAAF7c,UAAAyd,6BAAE,SAA6BQ,GAC3B5iB,KAAKmiB,WAAaS,EAId5iB,KAAK6hB,6BACP7hB,KAAKmiB,YAAclL,QAAS2L,EAAU3L,WAK1CuK,EAAF7c,UAAA4a,aAAE,WACE,IAAIvf,KAAK2iB,cAAT,CAEA3iB,KAAK8P,MAAMnB,KAAK3O,MAGgB,SAA5BA,KAAKmiB,WAAWlL,SAAkD,WAA5BjX,KAAKmiB,WAAWlL,UACxDjX,KAAK6hB,4BAA6B,EAKpC,IAAMe,GAAsC5iB,KAAKiiB,aAC5C5K,UAAWrX,KAAK4hB,gBAAiB3K,QAAS,WAC1CI,UAAW,SAAUJ,QAASjX,KAAK4hB,gBACxC5hB,MAAKoiB,6BAA6BQ,GAElC5iB,KAAK2hB,oBAAqB,IAI5BH,EAAF7c,UAAAsd,UAAE,WACE,MAAOjiB,MAAK8P,MAAMlB,QAAU5O,KAAK8gB,KACH,QAAzB9gB,KAAK8P,MAAMjB,WAAgD,SAAzB7O,KAAK8P,MAAMjB,YAIpD2S,EAAF7c,UAAAke,wBAAE,WACE,OAAU7iB,KAAKiiB,YAAc,UAAY,IAAKjiB,KAAK4hB,iBAIrDJ,EAAF7c,UAAAme,mBAAE,WACE,GAAMzL,GAAYrX,KAAKmiB,WAAW9K,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAMrX,KAAKmiB,WAAWlL,SAajEuK,EAAF7c,UAAAud,sBAAE,WACEliB,KAAK4hB,gBAAkB5hB,KAAKiiB,YACxBjiB,KAAK8P,MAAMjB,UACV7O,KAAK+iB,OAAS/iB,KAAK8P,MAAMiT,OAGhCvB,EAAF7c,UAAAge,YAAE,WACE,MAAO3iB,MAAK8P,MAAMnP,UAAYX,KAAKW,UASrC6gB,EAAF7c,UAAAqe,sBAAE,WACE,MAAKhjB,MAAKiiB,YAEqB,OAAxBjiB,KAAK8P,MAAMjB,UAAqB,YAAc,aAFrB,qBAtNpC7P,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACEvC,SAAU,gBACVqE,SAAU,qiCACVC,QAAF,6nDACE1H,MACF2D,UAAA,iBACM8gB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEA3kB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACE8C,QAAF,YACE0V,YACF+L,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBxB,cAClBwB,GAAkB7C,4FA3DtBzhB,KAAQ2kB,GAARliB,aAAAzC,KAAAsD,EAAAA,aAdAtD,KAAE4kB,EAAAA,aAAFniB,aAAAzC,KAAAsD,EAAAA,cAHAkf,EAAAniB,4FA8GA0jB,QAAA/jB,KAAAO,EAAAA,QAGAskB,eAAA7kB,KAAAO,EAAAA,SAMAiiB,mCChIA,sBAeAxiB,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,cACVM,SAAUugB,GAASnC,IACnB/d,cAAekgB,GAASnC,IACxBja,WAAY0Z,QAnBd6C,KCYaC,GAAgBC,EAAAA,wFAZ7B,MAiBkCtf,GAAlCuf,EAAAnkB,kBAHAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBAfZ8f,GAiBkCF,+BCEhC/jB,KAAFiF,QAAoC,GAAI0O,GAAAA,QAGtC3T,KAAFkkB,cAA0B,WAtB1B,sBAaAllB,KAAC+hB,EAAAA,WAADpf,OAAaqQ,WAAY,8GAbzBmS,mBCgEE,QAAFC,GACW3C,EACCthB,EACAkkB,EACRjO,GAHOpW,KAAXyhB,MAAWA,EACCzhB,KAAZG,cAAYA,EACAH,KAAZqkB,SAAYA,EAERlkB,EAAcW,QAAQujB,GAAU,GAChCrkB,KAAKskB,kBAAoB7C,EAAMxc,QAAQC,UAAU,WAAM,MAAAkR,GAAkBQ,iBAR7E,MAWEwN,GAAFzf,UAAAsD,YAAE,WACEjI,KAAKskB,kBAAkBvT,cACvB/Q,KAAKG,cAAckB,eAAerB,KAAKqkB,WAIzCD,EAAFzf,UAAA4f,aAAE,WACE,MAAOvkB,MAAKwkB,gBAAiBP,IAAe,KAAOjkB,KAAKwkB,OAI1DJ,EAAFzf,UAAA8f,eAAE,WACE,MAAOzkB,MAAKwkB,gBAAiBP,IAAejkB,KAAKwkB,MAAQ,MAI3DJ,EAAFzf,UAAA+f,gBAAE,WACE,MAAO1kB,MAAKqkB,SAAS/jB,eAIvB8jB,EAAFzf,UAAAggB,gBAAE,WACE,OACEra,MAAOtK,KAAKsK,MACZsE,OAAQ5O,KAAK4O,OACbgS,SAAU5gB,KAAK4gB,WAInBwD,EAAFzf,UAAAkT,MAAE,WACE7X,KAAK0kB,kBAAkB7M,wBA9E3B7Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACE8B,SAAU,muEACVC,QAAF,mzBACE1H,MACFC,MAAA,kBACMyI,KAAN,OAEAxI,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAC,KAAQ0I,EAAAA,aAbR1I,KAAQE,EAAAA,qBAGRklB,EAAA/kB,8DA8BAulB,eAAA5lB,KAAAO,EAAAA,QAGAslB,gBAAA7lB,KAAAO,EAAAA,QAGA+K,QAAAtL,KAAAO,EAAAA,QAGAulB,WAAA9lB,KAAAO,EAAAA,QAGAqP,SAAA5P,KAAAO,EAAAA,QAGAqhB,WAAA5hB,KAAGO,EAAAA,SAMH6kB,KC7CaW,IAKXC,yBAA0BrQ,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOkC,UAAW,2BAA4BjC,WAAY,YAC5EgC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,OAAQjC,WAAY,aACvDgC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOkC,UAAW,0BAA2BjC,WAAY,YACvEmC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BiQ,uBAAwBtQ,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YACpDgC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YAChDgC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOyM,OAAQ,IAAKxM,WAAY,aACjDmC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCHtC,QAAFkQ,GAAqBC,GAAAnlB,KAArBmlB,YAAqBA,EA/BrB,sBAwBAnmB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sEAjBZnF,KAA0BkU,EAAAA,iCAqB1BoP,OAAAtjB,KAAGO,EAAAA,MAAHoC,MAAS,qBA7BTujB,KCiDaE,GAAcC,EAAAA,0BAgBzB,QAAFC,GAAoDC,EAClBC,EAC4BC,GAF5D,GAAF5lB,GAGIC,EAHJC,KAAAC,KAGUulB,EAASE,IAHnBzlB,WACkCH,GAAlC2lB,mBAAkCA,IAJlC,MAF6B9gB,GAA7B4gB,EAAAxlB,GAYEwlB,EAAF3gB,UAAA+gB,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqB7lB,KAAKwlB,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAW/lB,KAAKgmB,WAE/D,OAAOH,IAAsBC,kBA7BjC9mB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACE8B,SAAU,uDACVsB,YAAFC,QAAAye,GAAAxe,YAAA6d,IACE5mB,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,UACE/C,gBAAFC,EAAAA,wBAAAC,0KASAC,SAA6DqD,GAA7DZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAukB,EAAAA,iCAEAZ,EAAAjmB,6DALAimB,cA9DAa,GAAA,SAAArmB,gBAwFA,GAAAD,GAAA,OAAAC,GAAAA,EAAAoM,MAAAlM,KAAA4M,YAAA5M,qEAWA,kEAKAA,MAMGomB,OANH9K,8BACU,GAAVgH,GAAA7R,EAAA6R,KAA8B6C,EAA9B1U,EAAA0U,WACA,OAAAtlB,GAAAwmB,eAAA/D,GAAA6C,IAA2CnlB,KAA3CsmB,OAAArhB,QAAAgF,KAAA2Q,EAAAA,UAAA5a,KAAAwY,aAAAtT,UAAA,WAAA,MAAArF,GAAA0mB,iFAMAvmB,KAAA6d,cAAA3G,QAGAiP,EAAA1kB,aACAzC,KAAA0C,EAAAA,UAAAC,mCA7BAwkB,EAAA9mB,0GAGA+mB,SAAApnB,KAAAoJ,EAAAA,gBAAezG,MAAfujB,MAGArH,gBAAA7e,KAAAwY,EAAAA,UAMA2O,OAnGAK,GAAA,SAAA1mB,gBA0IA,GAAAD,GAAA,OAAAC,GAAAA,EAAAoM,MAAoDlM,KAApD4M,YAAA5M,2JAnBAiG,SAAA,24CACEC,QAAF,wiGACErE,QAAF,iBACErD,MACFC,MAAe,yBACfgoB,yCAAA,yBACAC,4CAAA,4BACMC,mBAAN,aACIzf,KAAJ,WAEAqQ,YAAAwN,GAAAC,0BACAzd,YAAAC,QAAA2e,GAAA1e,YAAA+e,IACA9nB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAynB,EAAAnnB,gBACAunB,gBAAA5nB,KAAAO,EAAAA,gBAIAsnB,GAAA,SAAA/mB,uBAqBA,GAAAD,GAAAC,EAAAC,KAAAC,KAAA0W,EAAAN,EAAA9R,EAAAG,IAAAzE,WACAH,GAAAinB,aAAA,2BAAAD,EAAAplB,aAOAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,qDACA8B,SAAA,m2IA1BApE,QAAA,iBACErD,MACFC,MAAA,uBACAkoB,mBAAA,WACAzf,KAAA,WAEEqQ,YAAFwN,GAAAE,wBACE1d,YAAFC,QAAA2e,GAAA1e,YAAAof,IACAnoB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA8nB,EAAAE,eAAA,WAAA,QACA/nB,KAAAge,EAAAA,eAAAvb,aAAAzC,KAAmCsD,EAAAA,aACnCtD,KAAAE,EAAAA,oBACAF,KAAA0I,EAAAA,8EAxJAye,ICKaa,GAAkBC,EAAAA,eAClBC,GAAsBC,EAAAA,8FAdnC,MA0BoCziB,GAApC0iB,EAAAtnB,kBATAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACV3F,MACE2D,UAAW,kBACXklB,SAAU,QAEZxlB,QAAS,QACT0F,YAAaC,QAAS6d,EAAAA,WAAY5d,YAAa0e,SAxBjDiB,GA0BoCJ,+EA1BpC,MAsCwCtiB,GAAxC4iB,EAAAxnB,kBATAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,6BACV3F,MACE2D,UAAW,sBACXklB,SAAU,QAEZxlB,QAAS,QACT0F,YAAaC,QAAS6d,EAAAA,WAAY5d,YAAa0e,SApCjDmB,GAsCwCJ,gCCtCxC,sBAuBAloB,KAAC4D,EAAAA,SAADjB,OACEkB,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAukB,GACAC,EAAAA,iBACAC,GACAxkB,IAEFG,SACEL,GACAyjB,GACAK,GACAvB,GACArB,GACAkC,GACAiB,GACAE,GACAlD,GACAc,IAEFzhB,cACE+iB,GACAK,GACAvB,GACArB,GACAkC,GACAiB,GACAE,GACAlD,GACAc,IAEF3d,WAAY4c,GAAgB8B,QAxD9ByB,KCYaC,GAAYC,EAAAA,yFAmBvB/nB,GAAFgoB,eAA6B,qBAH7B,MACiCnjB,GAAjCwI,EAAApN,kBAZAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,8BACEvC,SAAU,WACVqE,SAAU6hB,EAAAA,mBACV5hB,QAAF,+wDACE1H,MACFC,MAAA,aAEAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAmO,OCVa6a,GAAcC,EAAAA,WACdC,GAAoBC,EAAAA,iBACpBC,GAAoBC,EAAAA,4FApBjC,MA8BgC1jB,GAAhC4I,EAAAxN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,eACVoD,YAAaC,QAASwgB,EAAAA,WAAYvgB,YAAa6F,QA5BjDA,GA8BgCya,+EA9BhC,MAwCsCrjB,GAAtCyI,EAAArN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBACVoD,YAAaC,QAAS0gB,EAAAA,iBAAkBzgB,YAAa0F,QAtCvDA,GAwCsC8a,+EAxCtC,MAkDsCvjB,GAAtC8I,EAAA1N,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBACVoD,YAAaC,QAAS4gB,EAAAA,iBAAkB3gB,YAAa+F,QAhDvDA,GAkDsC2a,+EAlDtC,MA4DkCzjB,GAAlC2I,EAAAvN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,iBACVoD,YAAaC,QAASoc,EAAAA,aAAcnc,YAAa4F,0BAInDiV,OAAAtjB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGT0mB,SAAArpB,KAAGO,EAAAA,QAGH+oB,YAAAtpB,KAAGO,EAAAA,SApEH8N,GA4DkCuW,EAAAA,6BAoBhC,QAAFlW,GAAc6a,EACAjkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUuoB,EAAWjkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU2Y,IAAI,cAAcoK,EAAUC,wBAnFnE,MA+EmC9jB,GAAnCgJ,EAAA5N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACV3F,MACEC,MAAS,kBACTyI,KAAQ,wDAhEZlI,KAAE4kB,EAAAA,eAJF5kB,KAAmB0I,EAAAA,cARnBgG,GA+EmC+a,EAAAA,8BAiBjC,QAAF7a,GAAc2a,EACAjkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUuoB,EAAWjkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU2Y,IAAI,cAAcoK,EAAUC,wBAnGnE,MA+FmC9jB,GAAnCkJ,EAAA9N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACV3F,MACEC,MAAS,kBACTyI,KAAQ,oDAhFZlI,KAAE4kB,EAAAA,eAJF5kB,KAAmB0I,EAAAA,cARnBkG,GA+FmC8a,EAAAA,8BAiBjC,QAAF/a,GAAc4a,EACAjkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUuoB,EAAWjkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU2Y,IAAI,cAAcoK,EAAUC,wBAnHnE,MA+G6B9jB,GAA7BiJ,EAAA7N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACV3F,MACEC,MAAS,WACTyI,KAAQ,oDAhGZlI,KAAE4kB,EAAAA,eAJF5kB,KAAmB0I,EAAAA,cARnBiG,GA+G6Bgb,EAAAA,SzBxFhBC,GAAmBC,EAAAA,gBACnBC,GAAmBC,EAAAA,gBACnBC,GAAaC,EAAAA,qFAzB1B,MAoCqCvkB,GAArC0I,EAAAtN,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oBACVoD,YAAaC,QAASqhB,EAAAA,gBAAiBphB,YAAa2F,IACpDvL,QAAS,2BAA4B,qCAlCvCuL,GAoCqCwb,+EApCrC,MA+CqClkB,GAArC+I,EAAA3N,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oBACVoD,YAAaC,QAASuhB,EAAAA,gBAAiBthB,YAAagG,IACpD5L,QAAS,2BAA4B,qCA7CvC4L,GA+CqCqb,+EA/CrC,MA2DkCpkB,GAAlC6I,EAAAzN,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,cACVoD,YAAaC,QAASyhB,EAAAA,UAAWxhB,YAAa8F,IAC9C1L,QAAS,4BAA6B,2BAzDxC0L,GA2DkCyb,+EAelC,MACkCtkB,GAAlCiI,EAAA7M,kBAbAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,qCACE8B,SAAUijB,EAAAA,iBACV1qB,MACFC,MAAA;uBACMyI,KAAN,OAEArI,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACEgD,SAAF,eACE2F,YAAFC,QAAAkF,EAAAA,aAAuCjF,YAAvCkF,QAGAA,+CAiBA,MAAA,QAAA7M,GAAAA,EAAAoM,MAAAlM,KAAA4M,YAAA5M,KAHA,+HAVAxB,MACAC,MAAA,iBACAyI,KAAA,OAEErI,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAgD,SAAU,eACV2F,YAAAC,QAAAqF,EAAAA,aAAApF,YAAAqF,QAGAA,GACAD,EAAAA,cAEAE,GAAA,SAAAjN,+DAWA,cAK4BiN,EAA5BtL,uHAbAyF,KAAA,OAEErI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,SACA2F,YAAAC,QAAAwF,EAAAA,OAAAvF,YAAAsF,QAGAA,GACAC,EAAAA,QCxEMC,IAEJC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GAGAjB,GACAI,GACAD,gCApDF,sBAuDA9N,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUgL,EAAAA,eAAgB/K,EAAAA,aAAcC,IACxCK,QAAS6J,GACTxJ,aAAcwJ,OA1DhBa,KC0BMC,GAAmB,iBAUzBC,GAAA,SAAAlO,GAoJE,QAAFkO,GAAc5C,OAAd,KAAAA,IAAcA,KAAZ,IAAFvL,GACIC,EADJC,KAAAC,OAAAA,WA/IAH,GAAAoO,YAAiC,GAAI3C,GAAAA,oBAGrCzL,EAAAqO,QAA6B,GAAI5C,GAAAA,gBAAwB,IAMvDzL,EAAFsO,2BAA+BC,EAAAA,aAAaC,MA0D1CxO,EAAFyO,oBACM,SAACzG,EAAS0G,GACZ,GAAMtN,GAAa4G,EAAK0G,EAExB,IAAIC,EAAAA,eAAevN,GAAQ,CACzB,GAAMwN,GAActH,OAAOlG,EAI3B,OAAOwN,GAAcV,GAAmBU,EAAcxN,EAGxD,MAAOA,IAYTpB,EAAF6O,SAAkD,SAAC7G,EAAW8G,GAC1D,GAAMC,GAASD,EAAKC,OACdC,EAAYF,EAAKE,SACvB,OAAKD,IAAuB,IAAbC,EAERhH,EAAK8G,KAAK,SAACG,EAAGC,GACnB,GAAIC,GAASnP,EAAKyO,oBAAoBQ,EAAGF,GACrCK,EAASpP,EAAKyO,oBAAoBS,EAAGH,GAMrCM,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBdhH,GAsC3ChI,EAAFsP,gBAA4D,SAACtH,EAASvC,GAElE,GAAM8J,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAcxH,EAAKyH,IACvDC,EAAU9D,OAAO+D,KAAK3H,GAAM4H,OAAOL,EAAa,IAAIM,cAGpDC,EAAoBrK,EAAOQ,OAAO4J,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvB9P,EAAK2L,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtCvL,EAAKgQ,8BA3LT,MAoC2CnL,GAA3CsJ,EAAAlO,GAyBE2L,OAAFC,eAAMsC,EAANrJ,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAAS4G,GAAa7H,KAAKwL,MAAMG,KAAK9D,oCAMtC4D,OAAFC,eAAMsC,EAANrJ,UAAA,cAAE,WAAuB,MAAO3E,MAAKkO,QAAQjN,WAC3C,SAAWqE,GAAkBtF,KAAKkO,QAAQvC,KAAKrG,oCAM/CmG,OAAFC,eAAMsC,EAANrJ,UAAA,YAAE,WAA6B,MAAO3E,MAAK8P,WACzC,SAASnB,GACP3O,KAAK8P,MAAQnB,EACb3O,KAAK6P,6DAcPpE,OAAFC,eAAMsC,EAANrJ,UAAA,iBAAE,WAAuC,MAAO3E,MAAK+P,gBACnD,SAAcC,GACZhQ,KAAK+P,WAAaC,EAClBhQ,KAAK6P,6DAoGP7B,EAAFrJ,UAAAkL,0BAAE,WAAA,GAAFhQ,GAAAG,KAOUiQ,EAAyCjQ,KAAK8P,MAChD7D,EAAAA,MAAiBjM,KAAK8P,MAAMG,WAAYjQ,KAAK8P,MAAMI,aACnDC,EAAAA,GAAa,MACXC,EAA8CpQ,KAAK+P,WACrD9D,EAAAA,MAAsBjM,KAAK+P,WAAWM,KAAMrQ,KAAK+P,WAAWG,aAC5DC,EAAAA,GAAa,MAEXG,EAAatQ,KAAKwL,MAElB+E,EAAeC,EAAAA,cAAcF,EAAYtQ,KAAKkO,SACjDjE,KAAKkC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB5I,GAAlB4I,EAAA,EAA4B,OAAA5Q,GAAK6Q,YAAY7I,MAEnC8I,EAAcH,EAAAA,cAAcD,EAAcN,GAC7ChG,KAAKkC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB5I,GAAlB4I,EAAA,EAA4B,OAAA5Q,GAAK+Q,WAAW/I,MAElCgJ,EAAgBL,EAAAA,cAAcG,EAAaP,GAC9CnG,KAAKkC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB5I,GAAlB4I,EAAA,EAA4B,OAAA5Q,GAAKiR,UAAUjJ,KAEvC7H,MAAKmO,2BAA2B4C,cAChC/Q,KAAKmO,2BAA6B0C,EAAc3L,UAAU,SAAA2C,GAAQ,MAAAhI,GAAKoO,YAAYtC,KAAK9D,MAQ1FmG,EAAFrJ,UAAA+L,YAAE,SAAY7I,GAAZ,GAAFhI,GAAAG,IASI,OALAA,MAAKuQ,aACAvQ,KAAKsF,OAAgBuC,EAAKvC,OAAO,SAAA0L,GAAO,MAAAnR,GAAKsP,gBAAgB6B,EAAKnR,EAAKyF,UAAzDuC,EAEf7H,KAAKgQ,WAAahQ,KAAKiR,iBAAiBjR,KAAKuQ,aAAapL,QAEvDnF,KAAKuQ,cAQdvC,EAAFrJ,UAAAiM,WAAE,SAAW/I,GAET,MAAK7H,MAAK2O,KAEH3O,KAAK0O,SAAS7G,EAAKzC,QAASpF,KAAK2O,MAFf9G,GAS3BmG,EAAFrJ,UAAAmM,UAAE,SAAUjJ,GACR,IAAK7H,KAAKgQ,UAAa,MAAOnI,EAE9B,IAAMqJ,GAAalR,KAAKgQ,UAAUmB,UAAYnR,KAAKgQ,UAAUoB,QAC7D,OAAOvJ,GAAKzC,QAAQiM,OAAOH,EAAYlR,KAAKgQ,UAAUoB,WAQxDpD,EAAFrJ,UAAAsM,iBAAE,SAAiBK,GAAjB,GAAFzR,GAAAG,IACIuR,SAAQC,UAAUC,KAAK,WACrB,GAAK5R,EAAKmQ,YAEVnQ,EAAKmQ,UAAU7K,OAASmM,EAGpBzR,EAAKmQ,UAAUmB,UAAY,GAAG,CAChC,GAAMO,GAAgBC,KAAKC,KAAK/R,EAAKmQ,UAAU7K,OAAStF,EAAKmQ,UAAUoB,UAAY,GAAK,CACxFvR,GAAKmQ,UAAUmB,UAAYQ,KAAKE,IAAIhS,EAAKmQ,UAAUmB,UAAWO,OASpE1D,EAAFrJ,UAAAkH,QAAE,WAAY,MAAO7L,MAAKiO,aAMxBD,EAAFrJ,UAAAyH,WAAE,aArSF4B,GAoC2C3B,EAAAA,YCf9ByF,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAFxO,GACYxD,EACAiS,EACiCC,GAFjCpS,KAAZE,YAAYA,EACAF,KAAZmS,QAAYA,EACiCnS,KAA7CoS,kBAA6CA,EAtD7C,MA6DE1O,GAAFiB,UAAA0N,eAAE,SAAeC,GAAf,GAAFzS,GAAAG,IACIA,MAAKuS,OAEgC,mBAA1BC,uBACTxS,KAAKmS,QAAQM,kBAAkB,WAC7BD,sBAAsB,WAAM,MAAA3S,GAAK6S,WAAWJ,OAG9CtS,KAAK0S,WAAWJ,IAKpB5O,EAAFiB,UAAA4N,KAAE,WACEvS,KAAKE,YAAYI,cAAcqS,MAAMC,WAAa,WAIpDlP,EAAFiB,UAAAkO,KAAE,WACE7S,KAAKE,YAAYI,cAAcqS,MAAMC,WAAa,UAO5ClP,EAAViB,UAAA+N,WAAA,SAAqBJ,GACjB,GAAMQ,GAAY9S,KAAKoS,kBAAkBE,GACnCS,EAAsB/S,KAAKE,YAAYI,aAE7CyS,GAAOJ,MAAMK,KAAOF,EAAUE,KAC9BD,EAAOJ,MAAMM,MAAQH,EAAUG,sBAhDnCjU,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,cACV3F,MACEC,MAAS,uDAvCbO,KAAmB0I,EAAAA,aAAnB1I,KAAuDC,EAAAA,SA8CvDD,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYmQ,SAtDZpO,mBCaE,QAAFF,GAAqByC,GAAAjG,KAArBiG,SAAqBA,EAbrB,sBAWAjH,KAAC0C,EAAAA,UAADC,OAAYwC,SAAU,0DAHtBnF,KAAmBkU,EAAAA,eARnB1P,KCYa2P,GAAaC,EAAAA,qFAZ1B,MAkBiC1O,GAAjCpB,EAAAxD,kBAHAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qCAhBZb,GAkBiC6P,ICajCE,GAAA,yBA/BA,MAAAA,MAgCaC,GACT1T,EAAcyT,mBA+DhB,QAAF9P,GAAsBgQ,GAApB,GAAF1T,GACIC,EADJC,KAAAC,OAAAA,WAAsBH,GAAtB0T,kBAAsBA,EAvCpB1T,EAAF2T,UAAsC,GAYtC3T,EAAA4T,eAAkD,KAQhD5T,EAAF6T,cAA2B,GAAIC,GAAAA,QAM7B9T,EAAF+T,SAA4B,KAM1B/T,EAAFgU,OAA0B,KAKxBhU,EAAFiU,UAAa,IA5Bb,MAtB4BpP,GAA5BnB,EAAAzD,GA4BE2L,OAAFC,eAAMnI,EAANoB,UAAA,eAAE,WACE,MAAO3E,MAAKyT,gDA2BdlQ,EAAFoB,UAAAoP,YAAE,SAAY9O,IACNA,EAAQ+O,eAAe,cAAgB/O,EAAQ+O,eAAe,cAChEhU,KAAK0T,cAAc/H,QAIvBpI,EAAFoB,UAAAsD,YAAE,WACEjI,KAAK0T,cAAcO,YAGrB1Q,EAAFoB,UAAAuP,SAAE,WACElU,KAAKyT,eAAiB,GAAIU,GAAAA,eACtBnU,KAAKoU,kBAAoBpU,KAAKqU,iBAAkBrU,KAAKuT,mCA7E7DvU,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,UACE8B,SAAU,uDACVpE,QAAF,YACEhD,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,4EApBA2B,EAAAlE,wIA0BAgV,mBAAArV,KAAAsV,EAAAA,UAAA3S,MAAgBuR,EAAAA,eAKhBM,YAAAxU,KAAAO,EAAAA,MAAGoC,MAAH,WAGA4S,YAAAvV,KAAAO,EAAAA,MAAGoC,MAAH,gBAGA6S,iBAAAxV,KAAQO,EAAAA,MAARoC,MAAA,sBASA4B,OCjDakR,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyDjC,EAAAA,OAAOkC,UAAW,UAMjFD,EAAAA,MAAM,OAAQjC,EAAAA,OAAOkC,UAAW,2BAA4BC,UAAW,SACvEF,EAAAA,MAAM,QAASjC,EAAAA,OAAOkC,UAAW,0BAA2BC,UAAW,SAEvEC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACTpC,EAAAA,OAAOkC,UAAW,6BAClBG,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACTpC,EAAAA,OAAOkC,UAAW,4BAClBG,EAAAA,QAAQ,4DC4BZ,QAAFnR,GACIoR,EACAC,EAC8CC,GAHhD,GAAFtV,GAIMC,EAJNC,KAAAC,KAIYiV,EAA0BC,IAJtClV,WAGkDH,GAAlDsV,MAAkDA,EAPlDtV,EAAAuV,cAA0BhH,EAAAA,aAAaC,MAEvCxO,EAAAwV,YAAwBjH,EAAAA,aAAaC,QAlErC,MA8DsC3J,GAAtCb,EAAA/D,GAcE+D,EAAFc,UAAAuP,SAAE,WAAA,GAAFrU,GAAAG,IACIF,GAAJ6E,UAAUuP,SAAVnU,KAAAC,MAEIA,KAAKoV,cAAgBpV,KAAKmV,MAAMG,iBAC7BrL,KAAKsL,EAAAA,UAAUvV,KAAKmV,MAAMK,kBAAkBxV,KAAKmV,MAAMM,aACvDvQ,UAAU,SAACwQ,GACNA,IAAgB7V,EAAK8V,eACvB9V,EAAK+V,OAAO/V,EAAKsV,MAAMU,YAI7B7V,KAAKqV,YAAcrV,KAAKmV,MAAMW,oBAAoB5Q,UAAU,WAC1DrF,EAAKkW,YAKTlS,EAAFc,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,MACIA,KAAKoV,cAAcrE,cACnB/Q,KAAKqV,YAAYtE,8BArCrB/R,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2DAtCZnF,KAAEgX,EAAAA,2BACFhX,KAAEyH,EAAAA,mBAgDFzH,KAAyD4E,GAAzDnC,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYsU,EAAAA,WAAW,WAAM,MAAArS,YAvE7BC,GA8DsCqS,EAAAA,+BA6FpC,QAAFtS,GAAsB1D,EACYiW,EAIpBC,GALZ,GAAFvW,GAAAG,IAAsBA,MAAtBE,YAAsBA,EACYF,KAAlCmW,KAAkCA,EAlClCnW,KAAAqW,uBAAmCjI,EAAAA,aAAaC,MAM9CrO,KAAFsW,aAA0D,GAAIC,GAAAA,aAG5DvW,KAAFsV,iBAA+D,GAAIiB,GAAAA,aAGjEvW,KAAF8V,oBAAkE,GAAIS,GAAAA,aAGpEvW,KAAFwW,YAAuD,GAAID,GAAAA,cAAmB,GAyBtEvW,KAAKmW,MAAQC,IACfpW,KAAKqW,uBAAyBrW,KAAKmW,KAAKM,OAAOvR,UAAU,SAAAwR,GACvD7W,EAAK8W,+BAA+BD,GACpCN,EAAkBQ,kBAhB1B,MAAEnL,QAAFC,eACM9H,EADNe,UAAA,gBAAE,SACaiP,GACX5T,KAAK6W,eAAiBjD,EACtB5T,KAAK2W,kEAsBP/S,EAAFe,UAAAuP,SAAE,WACwB,UAAlBlU,KAAKyV,WAAwC,MAAfzV,KAAK6T,SACrC7T,KAAKyV,UAAYzV,KAAK8W,+BAI1BlT,EAAFe,UAAAsD,YAAE,WACEjI,KAAKqW,uBAAuBtF,eAG9BnN,EAAFe,UAAAoS,uBAAE,SAAuBC,GACrB,GAAMtB,GAAc1V,KAAKwV,kBAAkBwB,EAAEC,QAC7CjX,MAAKsV,iBAAiB4B,KAAKxB,GACvBA,GACF1V,KAAKsW,aAAaY,KAAKlX,KAAKE,YAAYI,cAAc6W,eAI1DvT,EAAFe,UAAAyS,wBAAE,SAAwBJ,GAElBhX,KAAKwV,kBAAkBwB,EAAEC,UAAYjX,KAAKwV,kBAAkBxV,KAAKyV,YACnEzV,KAAKwW,YAAYU,OAGflX,KAAKwV,kBAAkBwB,EAAEK,aAAerX,KAAKwV,kBAAkBxV,KAAKyV,YACtEzV,KAAK8V,oBAAoBoB,QAK7BtT,EAAFe,UAAA2S,oBAAE,WACE,MAAOtX,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,MAAkB,MAAQ,OAI1D2C,EAAFe,UAAA6Q,kBAAE,SAAkB5B,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIEhQ,EAAVe,UAAAgS,+BAAA,SAAyCD,OAAzC,KAAAA,IAAyCA,EAAiB1W,KAAKsX,uBACvDtX,KAAK6W,eAAiB,EACxB7W,KAAKyV,UAAmB,OAAPiB,EAAe,OAAS,QAChC1W,KAAK6W,eAAiB,EAC/B7W,KAAKyV,UAAmB,OAAPiB,EAAe,QAAU,OAE1C1W,KAAKyV,UAAY,UAQb7R,EAAVe,UAAAmS,sCACI,GAAMJ,GAAM1W,KAAKsX,qBAEjB,OAAY,OAAPZ,GAAgB1W,KAAK6T,QAAU,GAAc,OAAP6C,GAAgB1W,KAAK6T,OAAS,EAChE,qBAGF,sCArIX7U,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACE8B,SAAU,wOACVC,QAAF,wHACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEwY,YAAa9C,GAAfC,cACElW,MACFC,MAAe,mIA9FfO,KAAEE,EAAAA,qBAPF0E,EAAAvE,kFAsHAyW,sBAAA9W,KAAAwY,EAAAA,SAGAhB,cAAAxX,KAAAwY,EAAAA,SAGAC,cAAAzY,KAAAsV,EAAAA,UAAA3S,MAAA+V,EAAAA,uBAGA7B,WAAA7W,KAAAO,EAAAA,MAAAoC,MAAA,aAGAkS,SAAA7U,KAAAO,EAAAA,QAGAqU,WAAA5U,KAAGO,EAAAA,SAMHqE,KCvIA+T,GAAA,yBAdA,MAAAA,MAeaC,GACThY,EAAc+X,mBAehB,QAAFhU,GAAqBW,GAAnB,GAAFzE,GACIC,EADJC,KAAAC,OAAAA,WAAqBH,GAArByE,WAAqBA,IA/BrB,MA8BwCI,GAAxCf,EAAA7D,GAME6D,EAAFgB,UAAAkT,MAAE,WACE7X,KAAKsE,WAAWhE,cAAcuX,SAGhClU,EAAFgB,UAAAmT,cAAE,WACE,MAAO9X,MAAKsE,WAAWhE,cAAcyX,YAGvCpU,EAAFgB,UAAAqT,eAAE,WACE,MAAOhY,MAAKsE,WAAWhE,cAAc2X,4BAvBzCjZ,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVtC,QAAS,YACTrD,MACEyD,2BAA4B,WAC5BF,uBAAwB,sDAnB5B/C,KAAmB0I,EAAAA,cARnB/D,GA8BwCiU,ICuBxCM,GAAA,yBArDA,MAAAA,MAsDaC,GACTxY,EAAmBuY,mBAkFrB,QAAFpU,GAAsB5D,EACAkY,EACAC,EACYlC,EAEZhE,GALpB,GAAFtS,GAMIC,EANJC,KAAAC,OAAAA,WAAsBH,GAAtBK,YAAsBA,EACAL,EAAtBuY,mBAAsBA,EACAvY,EAAtBwY,eAAsBA,EACYxY,EAAlCsW,KAAkCA,EAEZtW,EAAtBsS,QAAsBA,EAvDtBtS,EAAAyY,gBAA4B,EAG5BzY,EAAA0Y,uBAAkC,EAGlC1Y,EAAA2Y,WAAgC,GAAI7E,GAAAA,QAGlC9T,EAAF4Y,yBAA4B,EAG1B5Y,EAAF6Y,qBAAwB,EAGtB7Y,EAAF8Y,sBAAyB,EAczB9Y,EAAA+Y,eAAmC,EAgBjC/Y,EAAFgZ,mBAA0C,GAAItC,GAAAA,aAG5C1W,EAAFiZ,aAAoC,GAAIvC,GAAAA,eAAxC,MAzDkC7R,GAAlCZ,EAAAhE,GAyCE2L,OAAFC,eACM5H,EADNa,UAAA,qBAAE,WAC8B,MAAO3E,MAAK4Y,oBAC1C,SAAkB3X,GAChBA,EAAQ8X,EAAAA,qBAAqB9X,GAC7BjB,KAAKuY,sBAAwBvY,KAAK4Y,gBAAkB3X,EACpDjB,KAAK4Y,eAAiB3X,EAElBjB,KAAKgZ,aACPhZ,KAAKgZ,YAAYC,sBAAsBhY,oCAmB3C6C,EAAFa,UAAAuU,sBAAE,WAEMlZ,KAAKmZ,gBAAkBnZ,KAAKoZ,eAAejU,SAC7CnF,KAAKqZ,oBACLrZ,KAAKmZ,eAAiBnZ,KAAKoZ,eAAejU,OAC1CnF,KAAKoY,mBAAmBxB,gBAKtB5W,KAAKuY,wBACPvY,KAAKsZ,eAAetZ,KAAK4Y,gBACzB5Y,KAAKuZ,0BACLvZ,KAAKwZ,4BACLxZ,KAAKuY,uBAAwB,EAC7BvY,KAAKoY,mBAAmBxB,gBAKtB5W,KAAKyZ,yBACPzZ,KAAK0Z,2BACL1Z,KAAKyZ,wBAAyB,EAC9BzZ,KAAKoY,mBAAmBxB,iBAI5B9S,EAAFa,UAAAgV,eAAE,SAAerY,GACb,OAAQA,EAAMsY,SACZ,IAAKC,GAAAA,KACH7Z,KAAKgZ,YAAYc,qBACjBxY,EAAMC,gBACN,MACF,KAAKwY,GAAAA,IACH/Z,KAAKgZ,YAAYgB,oBACjB1Y,EAAMC,gBACN,MACF,KAAK0Y,GAAAA,MACL,IAAKC,GAAAA,MACHla,KAAK6Y,mBAAmB3B,KAAKlX,KAAKma,YAClC7Y,EAAMC,gBACN,MACF,SACEvB,KAAKgZ,YAAYoB,UAAU9Y,KAOjCwC,EAAFa,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,KACUqa,EAAYra,KAAKmW,KAAOnW,KAAKmW,KAAKM,OAAStG,EAAAA,GAAa,MACxDmK,EAASta,KAAKqY,eAAe5B,OAAO,KACpC8D,EAAU,WACd1a,EAAKwZ,oBACLxZ,EAAK2Z,4BAGPxZ,MAAKgZ,YAAc,GAAIwB,GAAAA,gBAAgBxa,KAAKoZ,gBACzCqB,0BAA0Bza,KAAKsX,uBAC/BoD,WAEH1a,KAAKgZ,YAAY2B,iBAAiB,GAID,mBAA1BnI,uBAAwCA,sBAAsB+H,GAAWA,IAIhFtO,EAAAA,MAAMoO,EAAWC,GAAQrQ,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,WAClEqV,IACA1a,EAAKmZ,YAAYyB,0BAA0B5a,EAAKyX,yBAMlDtX,KAAKgZ,YAAYvC,OAAOxM,KAAK2Q,EAAAA,UAAU5a,KAAKwY,aAAatT,UAAU,SAAA2V,GACjEhb,EAAKiZ,aAAa5B,KAAK2D,GACvBhb,EAAKib,aAAaD,MAItB/W,EAAFa,UAAAsD,YAAE,WACEjI,KAAKwY,WAAW7M,OAChB3L,KAAKwY,WAAWvE,YAMlBnQ,EAAFa,UAAAoW,kBAAE,WAAA,GAAFlb,GAAAG,KACUgb,EAAe,WACnBnb,EAAKwZ,oBACLxZ,EAAK2Z,4BACL3Z,EAAKuY,mBAAmBxB,eAM1B5W,MAAKmS,QAAUnS,KAAKmS,QAAQ8I,IAAID,GAAgBA,KAMlDlX,EAAFa,UAAA0U,kBAAE,WACErZ,KAAKkb,0BACLlb,KAAKuZ,0BACLvZ,KAAK0Z,4BAIPjO,OAAFC,eAAM5H,EAANa,UAAA,kBAAE,WACE,MAAO3E,MAAKgZ,YAAchZ,KAAKgZ,YAA2B,gBAAI,OAIhE,SAAe/X,GACRjB,KAAKmb,cAAcla,IAAUjB,KAAKma,aAAelZ,GAAUjB,KAAKgZ,aAIrEhZ,KAAKgZ,YAAYoC,cAAcna,oCAOjC6C,EAAFa,UAAAwW,cAAE,SAAc7Q,GACZ,IAAKtK,KAAKoZ,eAAkB,OAAO,CAEnC,IAAMiC,GAAMrb,KAAKoZ,eAAiBpZ,KAAKoZ,eAAekC,UAAUhR,GAAS,IACzE,SAAS+Q,IAAQA,EAAI1a,UAOvBmD,EAAFa,UAAAmW,aAAE,SAAava,GAKX,GAJIP,KAAKyY,yBACPzY,KAAKsZ,eAAe/Y,GAGlBP,KAAKoZ,gBAAkBpZ,KAAKoZ,eAAejU,OAAQ,CACrDnF,KAAKoZ,eAAekC,UAAU/a,GAAUsX,OAKxC,IAAM0D,GAAcvb,KAAKwb,kBAAkBlb,cACrCoW,EAAM1W,KAAKsX,qBAGfiE,GAAYE,WADH,OAAP/E,EACuB,EAEA6E,EAAYG,YAAcH,EAAYtD,cAMrEnU,EAAFa,UAAA2S,oBAAE,WACE,MAAOtX,MAAKmW,MAA4B,QAApBnW,KAAKmW,KAAKlV,MAAkB,MAAQ,OAI1D6C,EAAFa,UAAA+U,yBAAE,WACE,GAAMiC,GAAiB3b,KAAK2b,eACtBC,EAA4C,QAA/B5b,KAAKsX,uBAAmCqE,EAAiBA,CAM5E3b,MAAK6b,SAASvb,cAAcqS,MAAMkC,UAAY,cAAc+G,EAAhE,OAIEnQ,OAAFC,eAAM5H,EAANa,UAAA,sBAAE,WAA+B,MAAO3E,MAAKsY,qBAC3C,SAAmBwD,GACjB9b,KAAKsY,gBAAkB3G,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI7R,KAAKgc,wBAAyBF,IAI1E9b,KAAKyZ,wBAAyB,EAC9BzZ,KAAKuZ,2DAWPzV,EAAFa,UAAAsX,cAAE,SAAcC,GACZ,GAAMC,GAAanc,KAAKwb,kBAAkBlb,cAAc2X,WAGxDjY,MAAK2b,iBAAgC,UAAbO,GAAyB,EAAI,GAAKC,EAAa,GASzErY,EAAFa,UAAA2U,eAAE,SAAe8C,GACb,GAAMC,GAAgBrc,KAAKoZ,eAAiBpZ,KAAKoZ,eAAekC,UAAUc,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAanc,KAAKwb,kBAAkBlb,cAAc2X,WAGtB,QAA9BjY,KAAKsX,uBACPgF,EAAiBD,EAAcvE,gBAC/ByE,EAAgBD,EAAiBD,EAAcrE,mBAE/CuE,EAAgBvc,KAAK6b,SAASvb,cAAc2X,YAAcoE,EAAcvE,gBACxEwE,EAAiBC,EAAgBF,EAAcrE,iBAGjD,IAAMwE,GAAmBxc,KAAK2b,eACxBc,EAAkBzc,KAAK2b,eAAiBQ,CAE1CG,GAAiBE,EAEnBxc,KAAK2b,gBAAkBa,EAAmBF,EA7UjB,GA8UhBC,EAAgBE,IAEzBzc,KAAK2b,gBAAkBY,EAAgBE,EAhVd,MA4V7B3Y,EAAFa,UAAAuW,wBAAE,WACE,GAAMwB,GACF1c,KAAK6b,SAASvb,cAAcob,YAAc1b,KAAKE,YAAYI,cAAc2X,WAExEyE,KACH1c,KAAK2b,eAAiB,GAGpBe,IAAc1c,KAAKyY,yBACrBzY,KAAKoY,mBAAmBxB,eAG1B5W,KAAKyY,wBAA0BiE,GAYjC5Y,EAAFa,UAAA4U,wBAAE,WAEEvZ,KAAK2Y,qBAA8C,GAAvB3Y,KAAK2b,eACjC3b,KAAK0Y,oBAAsB1Y,KAAK2b,gBAAkB3b,KAAKgc,wBACvDhc,KAAKoY,mBAAmBxB,gBAU1B9S,EAAFa,UAAAqX,sBAAE,WAGE,MAFwBhc,MAAK6b,SAASvb,cAAcob,YACjC1b,KAAKwb,kBAAkBlb,cAAc2X,aACf,GAI3CnU,EAAFa,UAAA6U,0BAAE,WACE,GAAMmD,GAAuB3c,KAAKoZ,gBAAkBpZ,KAAKoZ,eAAejU,OACpEnF,KAAKoZ,eAAekC,UAAUtb,KAAK4c,eAAetY,WAAWhE,cAC7D,IAEJN,MAAK6c,QAAQxK,eAAc,mBA/X/BrT,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACE8B,SAAU,+7BACVC,QAAF,61EACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,iBACMqe,qDAAN,0BACIC,6BAAJ,yHAtDA/d,KAAEG,EAAAA,gBAHFH,KAAEge,EAAAA,eAAFvb,aAAAzC,KAAAsD,EAAAA,aALAtD,KAAQC,EAAAA,UAWR6E,EAAAzE,2GA2DAmc,oBAAAxc,KAAAsV,EAAAA,UAAA3S,MAAA,sBACAka,WAAA7c,KAAAsV,EAAAA,UAAA3S,MAAA,aACAib,gBAAA5d,KAAAO,EAAAA,QACAsZ,qBAAA7Z,KAAAwY,EAAAA,SAmCAsB,eAAA9Z,KAAAwY,EAAAA,UAgBA1T,OC/FImZ,GAAS,EAGbC,GAAA,yBA3CA,MAAAA,MAuDAC,GAAA,WACE,QAAFA,GAAqBjd,GAAAF,KAArBE,YAAqBA,EAxDrB,MAAAid,MA0DaC,GACTlZ,EAAWvE,EAAmBwd,IAAkB,0BA4FlD,QAAF9Z,GAAciB,EACQ8T,GADpB,GAAFvY,GAEIC,EAFJC,KAAAC,KAEUsE,IAFVtE,WACsBH,GAAtBuY,mBAAsBA,EA7DtBvY,EAAAwd,eAA0C,EAG1Cxd,EAAAyd,sBAA0C,EAG1Czd,EAAA0d,kBAA8BnP,EAAAA,aAAaC,MAG3CxO,EAAA2d,sBAAkCpP,EAAAA,aAAaC,MAM/CxO,EAAA4d,gBAAoC,EAQpC5d,EAAA+Y,eAA0C,KAGxC/Y,EAAF6d,eAAkD,QAmBhD7d,EAAF8d,oBAAiE,GAAIpH,GAAAA,aAGnE1W,EAAF+d,YACM,GAAIrH,GAAAA,aAGR1W,EAAFge,cAAyD,GAAItH,GAAAA,aAG3D1W,EAAFie,kBACM,GAAIvH,GAAAA,cAAgC,GAOtC1W,EAAKke,SAAWd,OARpB,MAjEiCvY,GAAjCrB,EAAAvD,GAsBE2L,OAAFC,eACMrI,EADNsB,UAAA,qBAAE,WAC+B,MAAO3E,MAAKyd,oBAC3C,SAAkBxc,GAAkBjB,KAAKyd,eAAiBO,EAAAA,sBAAsB/c,oCAIhFwK,OAAFC,eACMrI,EADNsB,UAAA,qBAAE,WACqC,MAAO3E,MAAK4Y,oBACjD,SAAkB3X,GAChBjB,KAAKqd,eAAiBtE,EAAAA,qBAAqB9X,EAAO,uCAQpDwK,OAAFC,eACMrI,EADNsB,UAAA,uBAAE,WACsC,MAAO3E,MAAKie,sBAClD,SAAoBhd,GAClB,GAAMX,GAA6BN,KAAKE,YAAYI,aAEpDA,GAAckF,UAAU0Y,OAAO,kBAAkBle,KAAKV,iBAElD2B,GACFX,EAAckF,UAAU2Y,IAAI,kBAAkBld,GAGhDjB,KAAKie,iBAAmBhd,mCAgC1BoC,EAAFsB,UAAAuU,sBAAE,WAAA,GAAFrZ,GAAAG,KAGUoe,EAAgBpe,KAAKqd,eAAiBrd,KAAKqe,eAAere,KAAKqd,eAIrE,IAAIrd,KAAK4Y,gBAAkBwF,EAAe,CACxC,GAAME,GAAoC,MAAvBte,KAAK4Y,cAEnB0F,IACHte,KAAK8d,kBAAkB5G,KAAKlX,KAAKue,mBAAmBH,IAKtD7M,QAAQC,UAAUC,KAAK,WACrB5R,EAAK2e,MAAMpU,QAAQ,SAACiR,EAAK/Q,GAAU,MAAA+Q,GAAIvH,SAAWxJ,IAAU8T,IAEvDE,GACHze,EAAK8d,oBAAoBzG,KAAKkH,KAMpCpe,KAAKwe,MAAMpU,QAAQ,SAACiR,EAAa/Q,GAC/B+Q,EAAIzH,SAAWtJ,EAAQ8T,EAII,MAAvBve,EAAK+Y,gBAA0C,GAAhByC,EAAIzH,UAAkByH,EAAIxH,SAC3DwH,EAAIxH,OAASuK,EAAgBve,EAAK+Y,kBAIlC5Y,KAAK4Y,iBAAmBwF,IAC1Bpe,KAAK4Y,eAAiBwF,EACtBpe,KAAKoY,mBAAmBxB,iBAI5BvT,EAAFsB,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKye,wBAILze,KAAKud,kBAAoBvd,KAAKwe,MAAMvZ,QAAQC,UAAU,WAKpD,GAJsBrF,EAAKwe,eAAexe,EAAKwd,kBAIzBxd,EAAK+Y,eAGzB,IAAK,GAFC8F,GAAO7e,EAAK2e,MAAMlD,UAEftQ,EAAI,EAAGA,EAAI0T,EAAKvZ,OAAQ6F,IAC/B,GAAI0T,EAAK1T,GAAG8I,SAAU,CAIpBjU,EAAKwd,eAAiBxd,EAAK+Y,eAAiB5N,CAC5C,OAKNnL,EAAK4e,wBACL5e,EAAKuY,mBAAmBxB,kBAI5BvT,EAAFsB,UAAAsD,YAAE,WACEjI,KAAKud,kBAAkBxM,cACvB/Q,KAAKwd,sBAAsBzM,eAI7B1N,EAAFsB,UAAAga,cAAE,WACM3e,KAAK4e,YACP5e,KAAK4e,WAAWpF,6BAIpBnW,EAAFsB,UAAAka,cAAE,SAAcvU,GACZtK,KAAK4d,YAAY1G,KAAKlX,KAAKue,mBAAmBjU,KAGxCjH,EAAVsB,UAAA4Z,mBAAA,SAA6BjU,GACzB,GAAMhJ,GAAQ,GAAI4b,GAKlB,OAJA5b,GAAMgJ,MAAQA,EACVtK,KAAKwe,OAASxe,KAAKwe,MAAMrZ,SAC3B7D,EAAM+Z,IAAMrb,KAAKwe,MAAMlD,UAAUhR,IAE5BhJ,GASD+B,EAAVsB,UAAA8Z,2CACQze,MAAKwd,uBACPxd,KAAKwd,sBAAsBzM,cAG7B/Q,KAAKwd,sBAAwBvR,EAAAA,MAAjCC,UAAA,GAA0ClM,KAAKwe,MAAMrS,IAAI,SAAAkP,GAAO,MAAAA,GAAI3H,iBAC7DxO,UAAU,WAAM,MAAArF,GAAKuY,mBAAmBxB,kBAIrCvT,EAAVsB,UAAA0Z,eAAA,SAAyB/T,GAIrB,MAAOqH,MAAKE,IAAI7R,KAAKwe,MAAMrZ,OAAS,EAAGwM,KAAKoK,IAAIzR,GAAS,EAAG,KAI9DjH,EAAFsB,UAAAma,eAAE,SAAe9T,GACb,MAAO,iBAAiBhL,KAAK+d,SAAjC,IAA6C/S,GAI3C3H,EAAFsB,UAAAoa,iBAAE,SAAiB/T,GACf,MAAO,mBAAmBhL,KAAK+d,SAAnC,IAA+C/S,GAO7C3H,EAAFsB,UAAAqa,yBAAE,SAAyBC,GACvB,GAAKjf,KAAKyd,gBAAmBzd,KAAKsd,sBAAlC,CAEA,GAAM4B,GAAuBlf,KAAKmf,gBAAgB7e,aAElD4e,GAAQvM,MAAMyM,OAASpf,KAAKsd,sBAAwB,KAIhDtd,KAAKmf,gBAAgB7e,cAAc+e,eACrCH,EAAQvM,MAAMyM,OAASH,EAAY,QAKvC5b,EAAFsB,UAAA2a,4BAAE,WACEtf,KAAKsd,sBAAwBtd,KAAKmf,gBAAgB7e,cAAc6W,aAChEnX,KAAKmf,gBAAgB7e,cAAcqS,MAAMyM,OAAS,GAClDpf,KAAK6d,cAAc3G,QAIrB7T,EAAFsB,UAAA4a,aAAE,SAAalE,EAAamE,EAAyBC,GAC5CpE,EAAI1a,WACPX,KAAK4c,cAAgB4C,EAAUrF,WAAasF,IAKhDpc,EAAFsB,UAAA+a,aAAE,SAAarE,EAAaoE,GACxB,MAAIpE,GAAI1a,SACC,KAEFX,KAAK4c,gBAAkB6C,EAAM,GAAK,kBAvQ7CzgB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVqE,SAAU,w+CACVC,QAAF,u8CACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,QAAA,iBACErD,MACFC,MAAA,gBACMkhB,uCAAN,gBACIC,wCAAJ,sHA/DAvc,EAAEhE,wHAuEFuf,aAAA5f,KAAAsV,EAAAA,UAAA3S,MAAA,eAEAke,gBAAA7gB,KAAAO,EAAAA,QAEAqd,gBAAA5d,KAAAO,EAAAA,QAeAme,iBAAA1e,KAAAO,EAAAA,QAMAD,kBAAAN,KAAAO,EAAAA,QAQAoe,sBAAA3e,KAAQwY,EAAAA,SAGRoG,cAAA5e,KAAAwY,EAAAA,SAgBAqG,gBAAA7e,KAAAwY,EAAAA,SAGAsG,oBAAG9e,KAAMwY,EAAAA,UAOTnU,O7B7FAyc,GAAA,WACE,QAAFA,GAAqB5f,GAAAF,KAArBE,YAAqBA,EAtDrB,MAAA4f,MAwDaC,GACTpgB,EAAmBuE,EAAW4b,GAAe,2BAgD/C,QAAF1gB,GAAckF,EACoB6R,EACZhE,EACAiG,EACAC,GAJpB,GAAFxY,GAKIC,EALJC,KAAAC,KAKUsE,IALVtE,WACkCH,GAAlCsW,KAAkCA,EACZtW,EAAtBsS,QAAsBA,EACAtS,EAAtBuY,mBAAsBA,EACAvY,EAAtBwY,eAAsBA,EA/BtBxY,EAAAmgB,WAAgC,GAAIrM,GAAAA,UAYpC,MAhB+BjP,GAA/BtF,EAAAU,GAgBE2L,OAAFC,eACMtM,EADNuF,UAAA,uBAAE,WACsC,MAAO3E,MAAKie,sBAClD,SAAoBhd,GAClB,GAAMX,GAA6BN,KAAKE,YAAYI,aAEpDA,GAAckF,UAAU0Y,OAAO,kBAAkBle,KAAKV,iBAElD2B,GACFX,EAAckF,UAAU2Y,IAAI,kBAAkBld,GAGhDjB,KAAKie,iBAAmBhd,mCAgB1B7B,EAAFuF,UAAAzD,iBAAE,SAAiBoR,GAGftS,KAAKigB,qBAAuB3N,EAC5BtS,KAAKoY,mBAAmBxB,gBAG1BxX,EAAFuF,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKmS,QAAQM,kBAAkB,WAC7B,GAAM4H,GAAYxa,EAAKsW,KAAOtW,EAAKsW,KAAKM,OAAStG,EAAAA,GAAa,KAE9D,OAAOlE,GAAAA,MAAMoO,EAAWxa,EAAKwY,eAAe5B,OAAO,KAC9CxM,KAAK2Q,EAAAA,UAAU/a,EAAKmgB,aACpB9a,UAAU,WAAM,MAAArF,GAAKqgB,oBAK9B9gB,EAAFuF,UAAAuU,sBAAE,WACE,GAAIlZ,KAAKigB,mBAAoB,CAC3B,GAAME,GAAYngB,KAAKogB,UAAUC,KAAK,SAAAhF,GAAO,MAAAA,GAAIzM,QAEjD5O,MAAKsgB,mBAAqBH,EAAYA,EAAUjgB,YAAc,KAC9DF,KAAKkgB,eACLlgB,KAAKigB,oBAAqB,IAI9B7gB,EAAFuF,UAAAsD,YAAE,WACEjI,KAAKggB,WAAWrU,OAChB3L,KAAKggB,WAAW/L,YAIlB7U,EAAFuF,UAAAub,aAAE,WACMlgB,KAAKsgB,oBACPtgB,KAAK6c,QAAQtK,OACbvS,KAAK6c,QAAQxK,eAAerS,KAAKsgB,mBAAmBhgB,gBAEpDN,KAAK6c,QAAQhK,uBA7FnB7T,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACEvC,SAAU,0BACVC,QAAF,QAAA,iBACEoE,SAAU,6HACVC,QAAS;owCACT1H,MAAFC,MAAA,mBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAnDAC,KAAEC,EAAAA,SAZFD,KAAQE,EAAAA,oBAgBRF,KAAEG,EAAAA,iBAdFC,EAAAC,wJA0EAC,kBAAAN,KAAAO,EAAAA,SAOAH,OA1FAI,GAAA,qCAmKAC,GAAAC,EAAAC,EAAAC,EAAAJ,+CAsBA,GAAAK,GAAAC,EAAAC,KAAAC,OAAAA,IAiEA,OA5BAH,GAAAI,WAAAA,EAAEJ,EAAFK,YAAAA,EAAsBL,EAAtBM,cAAAA,kGAXEN,EAAFO,eAA+BC,mBAA/BH,EAAAI,eAwBIT,EAAKU,SAATC,SAAAD,IAAA,EACAE,IAIQZ,EAARa,2BAAAD,EAAAE,yBAEAC,qBAAAH,EAAAG,qBACAC,UAAAJ,EAAAI,YAGAV,GACAA,EAAAW,QAAAZ,GAGAL,EApDA,0DAAAkB,2EAEAf,KAAAgB,UAAAC,EACQjB,KAAKC,WAAbiB,iBAAAlB,KAAAE,eAGAiB,YAAA,EACAC,cAAA,gJAYApB,KAAAU,0BAEAS,YAAU,EACVC,cAAA,kFAkCApB,KAAAG,eACQH,KAARG,cAAAkB,eAAArB,KAA+CE,kEAU/CoB,EAAAC,kBAGAC,EAAAC,aACAzC,KAAA0C,EAAAA,UAAAC,+CAlGAC,SAAA,aACEC,QAAF,WAAA,gBAAA,YACErD,MACFC,MAAA,eACMqD,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FA0CAnD,KAAkCC,EAAAA,SA3MlCD,KAAEoD,EAAAA,WAIFpD,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAa,QAfAxD,KAAQyD,OAAQhB,aAAhBzC,KAAA0D,EAAAA,UAAAf,MAAA,gBA0NA3C,KAAA2D,EAAAA,gBAlLAnB,EAAAnC,yCAsJAmC,mCCtMA,sBAyBAxC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGFC,SACEL,GACAM,GACAC,GACAC,GACAnE,GACAoC,GACAgC,IAEFC,cACEJ,GACAC,GACAC,GACAG,GACAC,GACAvE,GACAoC,GACAoC,GACAC,GACAC,GACAN,QAvDJO,KC2BAC,GAAA,WACE,QAAFA,GAAqB9D,GAAAF,KAArBE,YAAqBA,EA5BrB,MAAA8D,MA8BaC,GACTC,EAAWF,gCA/Bf,sBAiCAhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACVvC,SAAU,gBACVpD,MAAOC,MAAS,uBApClB2F,KAsCAC,GAAA,SAAAvE,GAuBE,QAAFuE,GACIC,EACQC,EACUC,GAHpB,GAAF3E,GAIIC,EAJJC,KAAAC,KAIUsE,IAJVtE,WAEYH,GAAZ0E,UAAYA,EAKR1E,EAAK4E,UAAYD,IATrB,MAJgCE,GAAhCL,EAAAvE,GAgBEuE,EAAFM,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACS6E,GAAAA,aAAgB7E,KAAKuE,UAAUO,YAIpC9E,KAAK+E,0BACL/E,KAAKgF,aAAaC,QAAQC,UAAU,WAAM,MAAArF,GAAKkF,8BAMzCV,EAAVM,UAAAI,6CACI,IAAK/E,KAAKgF,aAAaG,OAAvB,IAM2BC,MAAMrF,KAAKC,KAAKE,YAAYI,cAAc+E,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAKC,WAAaD,EAAKC,UAAUC,SAAS,sBAC3DH,OAAO,SAAAC,GAAQ,MAAAA,GAAKG,YAAc7F,EAAK4E,UAAY5E,EAAK4E,UAAUkB,aAAe,KACjFC,KAAK,SAAAL,GAAQ,MAAAA,GAAKM,YAAYC,UAG/BC,sBAxDN/G,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,cACEvC,SAAU,aACVqE,SAAU,8EACVC,QAAF,yiBACErE,QAAF,SACErD,MACFC,MAAA,cACM0H,oCAAN,0BACIC,iCAAJ,6BAEAvH,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAI,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAgDAhC,EAAAhF,mEALAgF,mCC3DA,sBAaArF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAUiB,GAAYD,GAAerB,IACrCU,cAAeY,GAAYD,QAhB7BkC,mBCqBE,QAAFC,GAAqBC,GAAAxG,KAArBwG,cAAqBA,EArBrB,sBAiBAxH,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8DARZnF,KAAEyH,EAAAA,oBAVFF,KC8BaG,GAAkBC,EAAAA,eAElBC,GACTlH,EAAcE,EAAciH,EAAAA,cAEnBC,GAELpH,EAAcE,EAAcmH,EAAAA,mCAqBlC,QAAFC,GAAwB9G,EACA+G,EACa1G,GAFnC,GAAFV,GAGIC,EAHJC,KAAAC,KAGUE,EAAa+G,IAHvBjH,WAAwBH,GAAxBK,YAAwBA,EACAL,EAAxBoH,MAAwBA,EAHtBpH,EAAFqH,KAAwC,WAOpCrH,EAAKU,SAAW4G,OAAO5G,IAAa,IA/DxC,MAsDoCmE,GAApCsC,EAAAlH,kBAZAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBACVvC,SAAU,cACVC,QAAS,WAAY,YACrBrD,MACE4I,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf7I,MAAS,iBAEX8I,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CAtClDhI,KAAE0I,EAAAA,aANF1I,KAA2B2I,EAAAA,UAoD3B3I,KAAAyD,OAAAhB,aAAAzC,KAAe0D,EAAAA,UAAff,MAAyB,mCAJzBuF,OAAAlI,KAAGO,EAAAA,SAxDHyH,GAsDoCJ,+EAtDpC,MA6EuClC,GAAvCkD,EAAA9H,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACVtC,QACE,4BAEF0F,YAAaC,QAASb,EAAAA,eAAgBc,YAAaG,0BAGrDC,OAAA7I,KAAGO,EAAAA,MAAHoC,MAAS,kBA9ETiG,GA6EuClB,mBA4BrC,QAAFoB,GAAwB5H,EACA+G,EACAc,EACaxH,GAHnC,GAAFV,GAIIC,EAJJC,KAAAC,KAIUE,EAAa+G,EAAOc,IAJ9B/H,WAAwBH,GAAxBK,YAAwBA,EACAL,EAAxBoH,MAAwBA,EACApH,EAAxBkI,SAAwBA,EAIpBlI,EAAKU,SAAW4G,OAAO5G,IAAa,IA/GxC,MAkG0CmE,GAA1CoD,EAAAhI,GAmBEgI,EAAFnD,UAAAqD,mBAAE,WACElI,EAAJ6E,UAAUqD,mBAAVjI,KAAAC,OAGE8H,EAAFnD,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,sBAtCAhB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVvC,SAAU,oBACVpD,MACE4I,uBAAwB,aACxBE,cAAe,OACf7I,MAAS,wBAEXoD,QAAS,WAAY,YACrB0F,YACGC,QAAST,EAAAA,kBAAmBU,YAAaK,IACzCN,QAASX,EAAAA,YAAaY,YAAaK,4CAjFxC9I,KAAE0I,EAAAA,aANF1I,KAA2B2I,EAAAA,UAQ3B3I,KAAEkJ,EAAAA,kBA4FFlJ,KAAAyD,OAAAhB,aAAAzC,KAAe0D,EAAAA,UAAff,MAAyB,mCAPzB4D,OAAAvG,KAAGO,EAAAA,MAAHoC,MAAS,uBAETwG,aAAAnJ,KAAGoJ,EAAAA,gBAAHzG,MAAmB4E,OAvGnBuB,GAkG0ChB,ICvF7BuB,GAAsBC,EAAAA,8FAXnC,MAoB2C5D,GAA3C6D,EAAAzI,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVoD,YAAaC,QAASc,EAAAA,mBAAoBb,YAAac,0BAKzDC,QAAAxJ,KAAGO,EAAAA,MAAHoC,MAAS,wBAGT8G,SAAAzJ,KAAGO,EAAAA,MAAHoC,MAAS,+BA1BT4G,GAoB2CF,ICP9BK,GAAWf,EAAAA,mFAqBxB,MAFgCjD,GAAhCiE,EAAA7I,kBAdAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACEvC,SAAU,UACVqE,SAAU,kDACVzH,MACFC,MAAA,WACMyI,KAAN,QAEAhB,QAAA,mLACAxH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEwI,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCkB,QAGAA,EAAAtJ,4DAGAsJ,OCtBaC,GAAqBC,EAAAA,kGAahChJ,GAAFiJ,WAA4D,IAzB5D,MAwB0CpE,GAA1CqE,EAAAjJ,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sBACV3F,MACE2D,UAAW,mBAEboF,YAAaC,QAASqB,EAAAA,kBAAmBpB,YAAasB,0BAGxDD,YAAA9J,KAAGO,EAAAA,MAAHoC,MAAS,iCAzBToH,GAwB0CH,ICLpCI,IACJlB,GACAF,GACAW,GACAQ,GACAJ,GACA3B,GACAT,gCA1BF,sBA6BAvH,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUoG,EAAAA,cAAenG,EAAAA,aAAcC,IACvCK,QAAS4F,GACTvF,aAAcuF,OAhChBE,KC+CAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAvJ,KAArBoJ,kBAAqBA,EACApJ,KAArBqJ,SAAqBA,EACArJ,KAArBsJ,aAAqBA,EACAtJ,KAArBuJ,YAAqBA,EApDrB,MAsDEJ,GAAFxE,UAAA6E,aAAE,SAAajE,EAASiD,EACTiB,EAAkBC,GAD/B,GAAF7J,GAAAG,KAEU2J,EAAW3J,KAAKoJ,kBAAkB7D,EAAMiD,EAG9C,IAFAiB,EAAYG,KAAKD,GAEb3J,KAAKsJ,aAAaK,GAAW,CAC/B,GAAME,GAAgB7J,KAAKuJ,YAAYhE,EACnCuE,OAAMC,QAAQF,GAChB7J,KAAKgK,iBAAiBH,EAAerB,EAAOiB,EAAaC,GAEzDG,EAAcI,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,SAAAiF,GACpCtK,EAAKmK,iBAAiBG,EAAU3B,EAAOiB,EAAaC,KAI1D,MAAOD,IAGTN,EAAFxE,UAAAqF,iBAAE,SAAiBG,EAAe3B,EACfiB,EAAkBC,GADnC,GAAF7J,GAAAG,IAEImK,GAASC,QAAQ,SAACC,EAAOC,GACvB,GAAIC,GAA4Bb,EAAUtE,OAC1CmF,GAAeX,KAAKU,GAASH,EAAShF,OAAS,GAC/CtF,EAAK2J,aAAaa,EAAO7B,EAAQ,EAAGiB,EAAac,MASrDpB,EAAFxE,UAAA6F,aAAE,SAAaC,GAAb,GAAF5K,GAAAG,KACQyJ,IAEJ,OADAgB,GAAeL,QAAQ,SAAA7E,GAAQ,MAAA1F,GAAK2J,aAAajE,EAAM,EAAGkE,QACnDA,GAOTN,EAAFxE,UAAA+F,qBAAE,SAAqBC,EAAYC,GAAjC,GAAF/K,GAAAG,KACQ6K,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMP,QAAQ,SAAA7E,GAEZ,IAAK,GADDwF,IAAS,EACJC,EAAI,EAAGA,GAAKnL,EAAKwJ,SAAS9D,GAAOyF,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQjB,KAAKrE,GAEX1F,EAAKyJ,aAAa/D,KACpBuF,EAAcjL,EAAKwJ,SAAS9D,GAAQ,GAAKqF,EAAYK,WAAW1F,MAG7DsF,GAjHX1B,KA6HA+B,GAAA,SAAApL,GAaE,QAAFoL,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFvL,GAGIC,EAHJC,KAAAC,OAAAA,WAAsBH,GAAtB+K,YAAsBA,EACA/K,EAAtBsL,cAAsBA,EAbpBtL,EAAFwL,eAAmB,GAAIC,GAAAA,oBAErBzL,EAAF0L,cAAkB,GAAID,GAAAA,oBAclBzL,EAAK2L,MAAQ,GAAIF,GAAAA,gBAAqBF,KA9I1C,MA6HiD1G,GAAjDwG,EAAApL,GAME2L,OAAFC,eAAMR,EAANvG,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAASA,GACPjB,KAAKwL,MAAMG,KAAK1K,GAChBjB,KAAKqL,eAAeM,KAAK3L,KAAKmL,cAAcX,aAAaxK,KAAK6H,OAC9D7H,KAAK4K,YAAYgB,UAAY5L,KAAKqL,eAAepK,uCAUnDiK,EAAFvG,UAAAkH,QAAE,SAAQC,GAAR,GAAFjM,GAAAG,KACUiF,GACJ6G,EAAiBC,WACjB/L,KAAK4K,YAAYoB,eAAuB,SACxChM,KAAKqL,eAEP,OAAOY,GAAAA,MAAXC,UAAA,GAAoBjH,GAASgF,KAAKkC,EAAAA,IAAI,WAGhC,MAFAtM,GAAK0L,cAAcI,KACjB9L,EAAKsL,cAAcT,qBAAqB7K,EAAKwL,eAAepK,MAAOpB,EAAK+K,cACnE/K,EAAK0L,cAActK,UAI9BiK,EAAFvG,UAAAyH,WAAE,aA9JFlB,GA6HiDmB,EAAAA,YC1GjDC,GAAA,SAAAxM,oEACED,GAAF2L,MAAU,GAAIF,GAAAA,sBApBd,MAmBgD5G,GAAhD4H,EAAAxM,GAME2L,OAAFC,eAAMY,EAAN3H,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAASA,GAAcjB,KAAKwL,MAAMG,KAAK1K,oCAEvCqL,EAAF3H,UAAAkH,QAAE,SAAQC,GAAR,GAAFjM,GAAAG,IACI,OAAOiM,GAAAA,MAAXC,UAAA,IAAqBJ,EAAiBC,WAAY/L,KAAKwL,QAChDvB,KAAKkC,EAAAA,IAAI,WACR,MAAOtM,GAAKgI,SAIlByE,EAAF3H,UAAAyH,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,2XC6CO,+BAGD,upFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,g5CCOmB,quFCwFT,6BAGD,mCAGOC,2BAGR,kCAkBQ,41FCnFV"}