{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.3-dc0732b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  /**\n   * Current page path. Used to prefix SVG references which\n   * won't work on Safari unless they're prefixed with the path.\n   */\n  _currentPath: string;\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @deletion-target 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n    this._currentPath = location ? location.path() : '';\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","undefined","decorators","Attribute","args","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","MatNestedTreeNode","_MatNestedTreeNodeMixinBase","tslib_1.__extends","MatTreeNodePadding","_super","Directive","selector","providers","provide","CdkTreeNodePadding","useExisting","level","indent","MatTree","Component","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","CdkTree","_this","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","prototype","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_contentPortal","MatTab","ngOnChanges","hasOwnProperty","_labelChange","_disableChange","ngOnDestroy","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","_viewContainerRef","inputs","propDecorators","ViewChild","TemplateRef","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_MatTreeNodeMixinBase","CdkTreeNode","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","_isSorted","_updateArrowDirection","_viewState","_disableViewStateAnimation","_setAnimationTransitionState","_arrowDirection","changeDetectorRef","MatSortHeader","_disableClear","id","_cdkColumnDef","name","_sort","register","deregister","_rerenderSubscription","_setIndicatorHintVisible","visible","_isDisabled","_showIndicatorHint","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","CdkColumnDef","disableClear","MAT_SORT_HEADER_INTL_PROVIDER","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","Injectable","providedIn","MatStepperIntl","MatStepHeader","_intl","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","MatSlider","axis","vertical","scale","percent","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_isMinValue","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","MatSortHeaderIntl","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","getSortHeaderNotContainedWithinSortError","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","MatSelect","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_currentPath","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","autoActiveFirstOption","panelWidth","optionSelected","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}