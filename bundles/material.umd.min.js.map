{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-9d3d95f');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["some","node","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","paginator","filteredDataLength","pageIndex","lastPageIndex","Math","ceil","pageSize","min","MatTableDataSource","_renderData","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","left","width","NgZone","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","opacity","SORT_ANIMATION_TRANSITION","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","splice","_step","_roundToDecimal","toString","split","pop","MatSlider","_thumbLabel","_tickInterval","_value","_min","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatExpansionPanelTitle","_hideToggle","displayMode","MatAccordion","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","MatExpansionPanelHeader","hideToggle","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","startAt","minDate","maxDate","dateFilter","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","cellNumber","activeCell","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}