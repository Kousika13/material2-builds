{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.3-264f306');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTabGroup","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinDisableRipple","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatFooterCell","columnDef","cssClassFriendlyName","CdkColumnDef","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatSort","_MatSortMixinBase","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","CdkHeaderCell","MatSlider","_invert","_max","_percent","_calculatePercentage","_value","_min","_step","_roundToDecimal","toString","split","pop","_thumbLabel","_tickInterval","parseFloat","toFixed","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","MatDrawerContent","_container","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_element","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_optionIds","options","option","join","MatSelect","_highlightCorrectOption","empty","_selectionModel","_scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","_calculateOverlayPosition","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","hasModifierKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","optionSelected","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","MatAutocomplete","_isOpen","showPanel","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}