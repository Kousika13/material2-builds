{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.2.0-beta.0-cde00df');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState -> toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_disableRipple","coerceBooleanProperty","value","_setLinkDisableRipple","MatTabNav","prototype","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","_changeDetectorRef","markForCheck","ngAfterContentInit","_this","_ngZone","runOutsideAngular","dirChange","_dir","change","observableOf","merge","_viewportRuler","pipe","takeUntil","_onDestroy","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","nativeElement","_tabLinks","forEach","link","disableRipple","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_elementRef","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","decorators","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepperNext","[type]","provide","CdkStepper","useExisting","MatStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatHorizontalStepper","MatVerticalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","add","cssClassFriendlyName","role","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","apply","arguments","MatRow","ctorParameters","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","show","requestAnimationFrame","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceNumberProperty","_backgroundColor","remove","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","index","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","ViewChild","MatTabNavBase","_MatTabNavMixinBase","containerInstance","_onEnter","MatSnackBarRef","onAction","_onAction","asObservable","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","dismiss","afterOpened","_dismissAfter","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_stateChanged","ContentChildren","aria-orientation","MatSidenavContainer","_drawers","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterDismissed","_afterOpened","_dismissedByAction","_finishDismiss","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","dismissedByAction","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_createTooltip","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","_dateFilter","controlValue","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","_dateAdapter","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","deserialize","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","matDatepickerMin","actual","matDatepickerMax","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","TransitionCheckState","Unchecked","animSuffix","newState","Checked","Indeterminate","MatCheckbox","_removeFocusRipple","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_isRoundButton","DEFAULT_ROUND_BUTTON_COLOR","MatButton","_hasHostAttributes","attributes","_i","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","Init","_indeterminate","changed","_transitionCheckState","_getAriaChecked","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","defaults","showPanel","_isOpen","displayWith","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","Host","MatAutocompleteModule","MatButtonBase","_MatButtonMixinBase","_isIconButton","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}