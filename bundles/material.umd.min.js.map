{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.1-c3fdc32');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      const child = layoutElement.childNodes[i];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","_updatePagination","_alignInkBarToSelectedTab","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","_realignInkBar","merge","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","[style.width.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","MatSelect","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","setPositionClasses","posX","posY","xPosition","yPosition","classes","_classList","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","panelOpen","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","FixedTileStyler","reset","list","_setListStyle","_tiles","tile","_setStyle","TileStyler","RatioTileStyler","_parseRatio","setRowStyles","rowIndex","percentWidth","gutterWidth","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","getTilePosition","calc","getTileSize","rowspan","getComputedHeight","getTileSpan","getGutterSpan","ratioParts","FitTileStyler","_rowspan","gutterHeightPerTile","_rows","MatGridList","_gutter","_cols","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","cols","rowHeight","_tileStyler","tracker","TileCoordinator","init","gutterSize","setStyle","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_inputSubscription","_disabledChange","_popupRef","_popupComponentRef","date","_dateAdapter","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","_gutterSize","normalizeUnits","sizePercent","gutterFraction","baseSize","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","baseTileWidth","side","tileHeight","fixedRowHeight","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_handleCalendarBodyKeydown","oldActiveDate","_activeDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","activeDateChange","_focusActiveCell","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","minDate","maxDate","_hasSameMonthAndYear","d1","d2","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","_ripplesGloballyDisabled","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}