{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-f468321');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatExpansionPanelTitle","_hideToggle","displayMode","MatAccordion","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","MatExpansionPanelHeader","hideToggle","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","startAt","minDate","maxDate","dateFilter","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","cellNumber","activeCell","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}