{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.1-39d2311');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being`void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["filter","node","nodeType","_this","_document","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_super","call","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTableDataSource","_updatePaginator","filteredDataLength","Promise","resolve","then","paginator","pageIndex","lastPageIndex","Math","ceil","pageSize","min","_renderData","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","left","width","NgZone","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","contains","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","arguments","_icons","_a","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","startIndex","splice","_tickInterval","MatSlider","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","TileStyler","getTileSize","baseSize","span","_gutterSize","setStyle","tile","rowIndex","colIndex","percentWidthPerTile","_cols","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","calc","colspan","getGutterSpan","_rowspan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","init","gutterSize","tracker","cols","normalizeUnits","rowspan","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","_rows","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","TileCoordinator","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_popupRef","_dialogRef","_calendarPortal","completeClose","closedStream","_focusedElementBeforeOpen","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","_popupComponentRef","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","touchUi","yearSelected","monthSelected","openedStream","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateAdapter","_dateFormats","_formField","dateChange","dateInput","_valueChange","_disabledChange","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","_datepicker","_registerInput","_selectedChanged","isValid","oldDate","_formatValue","sameDate","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","date","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","sizePercent","gutterFraction","_userSelection","oldActiveDate","activeDate","activeDateChange","_focusActiveCell","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","dateFilter","minDate","maxDate","_hasSameMonthAndYear","getDate","d1","d2","selectedChange","_activeDate","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_openAsDialog","_openAsPopup","ariaOrientation","selectable","chips","MatChip","MatChipList","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_dateSelected","selectedYear","selectedMonth","selectedDate","changed","_indeterminate","_transitionCheckState","TransitionCheckState","Indeterminate","Checked","Unchecked","indeterminateChange","MatCheckbox","_getAriaChecked","indeterminate","newState","oldState","_currentCheckState","_currentAnimationClass","_getAnimationClassForCheckStateTransition","animationClass_1","MatCheckboxChange","_onInputFocusChange","_focusRipple","fadeOut","ripple","launch","persistent","_clickAction","_onInteractionEvent","animSuffix","Init","_calculateRippleRadius","calculatedRippleRadius","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","_hasFocus","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxBase","_MatCheckboxMixinBase","ngAfterViewChecked","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}