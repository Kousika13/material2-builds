{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.1-4166d16');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick(event: Event) {\n    event.stopPropagation();\n\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","_updatePagination","_alignInkBarToSelectedTab","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","_realignInkBar","merge","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","MatSelect","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","setPositionClasses","posX","posY","xPosition","yPosition","classes","_classList","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","panelOpen","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","A","ctrlKey","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","url","err","forkJoin","iconSetFetchRequests","foundIcon","_extractIconWithNameFromAnySet","iconSetConfigs","getMatIconNameNotFoundError","MatIconRegistry","iconName","svgElement","_extractSvgIconFromSet","_loadSvgIconFromConfig","_fetchUrl","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","namedIcon","iconSetConfig","catchError","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","_yearSelected","compareDate","oldActiveDate","activeDateChange","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","focused","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","_ripplesGloballyDisabled","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}